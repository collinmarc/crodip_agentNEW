Imports System.Text
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports CRODIPWS
Imports System.Xml.Serialization
Imports System.IO
Imports System.Net.Http

<TestClass()> Public Class ExploitationToPulverisateurTestWS
    Inherits CRODIPTest

    <TestMethod()> Public Sub getWS()
        Dim ExploitationToPulverisateur As CRODIPWS.ExploitationTOPulverisateur
        ExploitationToPulverisateur = ExploitationTOPulverisateurManager.WSgetById(141112, "")
        Assert.IsNotNull(ExploitationToPulverisateur)
        Assert.AreEqual(141112, ExploitationToPulverisateur.uid)

    End Sub
    <TestMethod(), Ignore()> Public Sub sendWS()
        Dim oExploitationToPulverisateur As CRODIPWS.ExploitationTOPulverisateur
        oExploitationToPulverisateur = ExploitationTOPulverisateurManager.WSgetById(141112, "")
        Assert.IsNotNull(oExploitationToPulverisateur)
        oExploitationToPulverisateur.aid = "TESTUMCO"
        Dim oreturn As CRODIPWS.ExploitationTOPulverisateur
        Dim nReturn As Integer
        nReturn = ExploitationTOPulverisateurManager.WSSend(oExploitationToPulverisateur, oreturn)
        Assert.AreEqual(2, nReturn)
        oExploitationToPulverisateur = ExploitationTOPulverisateurManager.WSgetById(141112, "")
        Assert.AreEqual("TESTUMCO", oExploitationToPulverisateur.aid)

    End Sub
    <TestMethod(), Ignore("CRUD Exploitation-Pulverisateur")> Public Sub CRUDWS()
        Dim updatedExploit As Object
        m_oExploitation = createExploitation()
        m_oPulve = createPulve(m_oExploitation)
        ExploitationManager.WSSend(m_oExploitation, updatedExploit)
        m_oExploitation = CType(updatedExploit, Exploitation)
        Dim updatedPulve As Object
        PulverisateurManager.WSSend(m_oPulve, updatedPulve)
        m_oPulve = CType(updatedPulve, Pulverisateur)
        Dim nreturn As Integer
        Dim oExploitationToPulverisateur As New ExploitationTOPulverisateur()
        oExploitationToPulverisateur.uidExploitation = m_oExploitation.uid
        oExploitationToPulverisateur.uidPulverisateur = m_oPulve.uid
        oExploitationToPulverisateur.aidExploitation = "TU_MCO"
        oExploitationToPulverisateur.uidstructure = m_oExploitation.idStructure

        ' Création de l'objet
        Dim oReturn As ExploitationTOPulverisateur
        nreturn = ExploitationTOPulverisateurManager.WSSend(oExploitationToPulverisateur, oReturn)
        Assert.AreEqual(4, nreturn)
        Assert.IsNotNull(oReturn.uid)

        'Lecture de l'objet
        oExploitationToPulverisateur = ExploitationTOPulverisateurManager.WSgetById(oReturn.uid, oReturn.aid)
        Assert.AreEqual("TU_MCO", oExploitationToPulverisateur.aidExploitation)

        'Update de l'objet
        oExploitationToPulverisateur.aidExploitation = "TU_UPDATE"
        nreturn = ExploitationTOPulverisateurManager.WSSend(oExploitationToPulverisateur, oReturn)
        Assert.AreEqual(oExploitationToPulverisateur.uid, oReturn.uid)
        Assert.AreEqual(2, nreturn)
        Assert.AreEqual("TU_UPDATE", oExploitationToPulverisateur.aidExploitation)

    End Sub
    <TestMethod()> Public Sub WSSerialize()
        Dim oExploitationToPulverisateur As New CRODIPWS.ExploitationTOPulverisateur()
        oExploitationToPulverisateur.uidExploitation = 123456
        oExploitationToPulverisateur.uidPulverisateur = 465879
        oExploitationToPulverisateur.aidExploitation = "TU123456"
        oExploitationToPulverisateur.aidPulverisateur = "TU465879"
        Dim serializer As New XmlSerializer(oExploitationToPulverisateur.GetType())
        Using writer As New StringWriter()
            serializer.Serialize(writer, oExploitationToPulverisateur)
            Dim xmlOutput As String = writer.ToString()
            ' Vous pouvez maintenant vérifier ou envoyer cette chaîne sérialisée
            Trace.WriteLine(xmlOutput)
        End Using

    End Sub


End Class