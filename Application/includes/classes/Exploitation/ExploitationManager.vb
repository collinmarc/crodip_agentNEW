Imports System.Collections.Generic
Imports System.Data.Common

Public Class ExploitationManager

    ' Variables
    'Private Shared query As String
    'Private Shared arrParametres(0) As String

#Region "Methodes acces Web Service"
    Public Shared Function getWSClientByDiagnosticId(pAgent As Agent, ByVal IdDiag As String) As Object
        Dim oExploit As Exploitation = Nothing
        Try
            Dim oDiag As Diagnostic
            oDiag = DiagnosticManager.getWSDiagnosticById(pAgent.id, IdDiag)
            If oDiag IsNot Nothing Then
                oExploit = getWSExploitationById(oDiag.proprietaireId)
                save(oExploit, pAgent)
                Dim oPulve As Pulverisateur
                oPulve = PulverisateurManager.getWSPulverisateurById(pAgent, oDiag.pulverisateurId)
                PulverisateurManager.save(oPulve, oExploit.id, pAgent)
            End If
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.getWSClientByDiagnosticId ERR" & ex.Message)
            Return Nothing
        End Try
        Return oExploit

    End Function

    Public Shared Function getWSExploitationById(ByVal client_id As String) As Exploitation
        Dim objClient As New Exploitation
        Try
            Dim objWSCrodip As WSCrodip_prod.CrodipServer = WSCrodip.getWS()
            Dim objWSCrodip_response As New Object

            ' Appel au WS
            Dim codeResponse As Integer = objWSCrodip.GetExploitation(agentCourant.id, client_id, objWSCrodip_response)

            Select Case codeResponse
                Case 0 ' OK
                    ' construction du client
                    Dim objWSCrodip_responseItem As System.Xml.XmlNode
                    For Each objWSCrodip_responseItem In objWSCrodip_response
                        Select Case objWSCrodip_responseItem.Name()
                            Case "id"
                                objClient.id = objWSCrodip_responseItem.InnerText()
                            Case "idStructure"
                                objClient.idStructure = objWSCrodip_responseItem.InnerText()
                            Case "numeroSiren"
                                objClient.numeroSiren = objWSCrodip_responseItem.InnerText()
                            Case "codeApe"
                                objClient.codeApe = objWSCrodip_responseItem.InnerText()
                            Case "raisonSociale"
                                objClient.raisonSociale = objWSCrodip_responseItem.InnerText()
                            Case "nombreExploitant"
                                objClient.nombreExploitant = objWSCrodip_responseItem.InnerText()
                            Case "nomExploitant"
                                objClient.nomExploitant = objWSCrodip_responseItem.InnerText()
                            Case "prenomExploitant"
                                objClient.prenomExploitant = objWSCrodip_responseItem.InnerText()
                            Case "adresse"
                                objClient.adresse = objWSCrodip_responseItem.InnerText()
                            Case "codePostal"
                                objClient.codePostal = objWSCrodip_responseItem.InnerText()
                            Case "commune"
                                objClient.commune = objWSCrodip_responseItem.InnerText()
                            Case "codeInsee"
                                objClient.codeInsee = objWSCrodip_responseItem.InnerText()
                            Case "telephoneFixe"
                                objClient.telephoneFixe = objWSCrodip_responseItem.InnerText()
                            Case "telephonePortable"
                                objClient.telephonePortable = objWSCrodip_responseItem.InnerText()
                            Case "telephoneFax"
                                objClient.telephoneFax = objWSCrodip_responseItem.InnerText()
                            Case "eMail"
                                objClient.eMail = objWSCrodip_responseItem.InnerText()
                            Case "isProdGrandeCulture"
                                objClient.isProdGrandeCulture = objWSCrodip_responseItem.InnerText()
                            Case "isProdElevage"
                                objClient.isProdElevage = objWSCrodip_responseItem.InnerText()
                            Case "isProdArboriculture"
                                objClient.isProdArboriculture = objWSCrodip_responseItem.InnerText()
                            Case "isProdLegume"
                                objClient.isProdLegume = objWSCrodip_responseItem.InnerText()
                            Case "isProdViticulture"
                                objClient.isProdViticulture = objWSCrodip_responseItem.InnerText()
                            Case "isProdAutre"
                                objClient.isProdAutre = objWSCrodip_responseItem.InnerText()
                            Case "productionAutre"
                                objClient.productionAutre = objWSCrodip_responseItem.InnerText()
                            Case "isSupprime"
                                objClient.isSupprime = objWSCrodip_responseItem.InnerText()
                            Case "dateModificationCrodip"
                                objClient.dateModificationCrodip = objWSCrodip_responseItem.InnerText()
                            Case "dateModificationAgent"
                                objClient.dateModificationAgent = objWSCrodip_responseItem.InnerText()
                            Case "dateDernierControle"
                                If objWSCrodip_responseItem.InnerText() <> "0001-01-01 00:00:00" Then
                                    objClient.dateDernierControle = objWSCrodip_responseItem.InnerText()
                                End If
                        End Select
                    Next
                Case 1 ' NOK
                    CSDebug.dispError("Erreur - ClientManager - Code 1 : Non-Trouvé")
                Case 9 ' BADREQUEST
                    CSDebug.dispError("Erreur - ClientManager - Code 9 : Bad Request")
            End Select

        Catch ex As Exception
            CSDebug.dispError("ClientManager - getWSClientById : " & ex.Message)
            'Return False
        End Try
        Return objClient
    End Function

    Public Shared Function sendWSExploitation(pAgent As Agent, ByVal exploitation As Exploitation, ByRef updatedObject As Object) As Integer
        Try
            ' Appel au Web Service
            Dim objWSCrodip As WSCrodip_prod.CrodipServer = WSCrodip.getWS()
            Return objWSCrodip.SendExploitation(pAgent.id, exploitation, updatedObject)
        Catch ex As Exception
            Return -1
        End Try
    End Function

    Public Shared Function xml2object(ByVal arrXml As Object) As Exploitation
        Dim objExploitation As New Exploitation

        For Each tmpSerializeItem As System.Xml.XmlElement In arrXml
            Select Case tmpSerializeItem.LocalName()
                Case "id"
                    objExploitation.id = CType(tmpSerializeItem.InnerText, String)
                Case "idStructure"
                    objExploitation.idStructure = CType(tmpSerializeItem.InnerText, String)
                Case "numeroSiren"
                    objExploitation.numeroSiren = CType(tmpSerializeItem.InnerText, String)
                Case "codeApe"
                    objExploitation.codeApe = CType(tmpSerializeItem.InnerText, String)
                Case "raisonSociale"
                    objExploitation.raisonSociale = CType(tmpSerializeItem.InnerText, String)
                Case "nombreExploitant"
                    objExploitation.nombreExploitant = CType(tmpSerializeItem.InnerText, String)
                Case "nomExploitant"
                    objExploitation.nomExploitant = CType(tmpSerializeItem.InnerText, String)
                Case "prenomExploitant"
                    objExploitation.prenomExploitant = CType(tmpSerializeItem.InnerText, String)
                Case "adresse"
                    objExploitation.adresse = CType(tmpSerializeItem.InnerText, String)
                Case "codePostal"
                    objExploitation.codePostal = CType(tmpSerializeItem.InnerText, String)
                Case "commune"
                    objExploitation.commune = CType(tmpSerializeItem.InnerText, String)
                Case "codeInsee"
                    objExploitation.codeInsee = CType(tmpSerializeItem.InnerText, String)
                Case "telephoneFixe"
                    objExploitation.telephoneFixe = CType(tmpSerializeItem.InnerText, String)
                Case "telephonePortable"
                    objExploitation.telephonePortable = CType(tmpSerializeItem.InnerText, String)
                Case "telephoneFax"
                    objExploitation.telephoneFax = CType(tmpSerializeItem.InnerText, String)
                Case "eMail"
                    objExploitation.eMail = CType(tmpSerializeItem.InnerText, String)
                Case "isProdGrandeCulture"
                    objExploitation.isProdGrandeCulture = CType(tmpSerializeItem.InnerText, String)
                Case "isProdElevage"
                    objExploitation.isProdElevage = CType(tmpSerializeItem.InnerText, String)
                Case "isProdArboriculture"
                    objExploitation.isProdArboriculture = CType(tmpSerializeItem.InnerText, String)
                Case "isProdLegume"
                    objExploitation.isProdLegume = CType(tmpSerializeItem.InnerText, String)
                Case "isProdViticulture"
                    objExploitation.isProdViticulture = CType(tmpSerializeItem.InnerText, String)
                Case "isProdAutre"
                    objExploitation.isProdAutre = CType(tmpSerializeItem.InnerText, String)
                Case "productionAutre"
                    objExploitation.productionAutre = CType(tmpSerializeItem.InnerText, String)
                Case "isSupprime"
                    objExploitation.isSupprime = CType(tmpSerializeItem.InnerText, String)
                Case "dateModificationCrodip"
                    objExploitation.dateModificationCrodip = CSDate.ToCRODIPString(CType(tmpSerializeItem.InnerText, String))
                Case "dateModificationAgent"
                    objExploitation.dateModificationAgent = CSDate.ToCRODIPString(CType(tmpSerializeItem.InnerText, String))
                Case "dateDernierControle"
                    If Not String.IsNullOrEmpty(tmpSerializeItem.InnerText.ToString()) Then
                        objExploitation.dateDernierControle = CSDate.ToCRODIPString(CType(tmpSerializeItem.InnerText, String))
                    End If
            End Select
        Next

        Return objExploitation
    End Function

#End Region

#Region "Methodes acces Local"
    ''' <summary>
    ''' Rend l iste des exploitations
    ''' 1° les exploitations sans date de derniercontrole
    ''' 2° les exploitations triés par date de ernier contole en odre croissant
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function getListeExploitation(pAgent As Agent, ByVal pDateLimite As Date) As List(Of Exploitation)
        Dim oCol As New List(Of Exploitation)
        Dim oCsDb As New CSDb(True)
        Dim strSQL As String
        Try
            Dim oCmd As DbCommand
            Dim oReader As DbDataReader
            oCmd = oCsDb.getConnection().CreateCommand()
            ''1) Les clients sans date de dernier controle classé par ordre décroissant de date de dernière modif
            '' les dernirs créés en premier
            'strSQL = "SELECT *, 0 as nPulvesAlerte " & _
            '    " FROM EXPLOITATION "
            'strSQL = strSQL & " WHERE "
            'strSQL = strSQL & " (DATEDERNIERCONTROLE IS NULL OR DATEDERNIERCONTROLE = CDATE(" & ControlChars.Quote & "00:00:00" & ControlChars.Quote & ")) AND "
            'strSQL = strSQL & " idStructure = " & pAgent.idStructure
            'strSQL = strSQL & " ORDER BY DATEMODIFICATIONAGENT DESC"
            'oCmd.CommandText = strSQL
            ''       Dim strSQL As String = "SELECT count(*) " & _
            ''" FROM ExploitationTOPulverisateur, pulverisateur" & _
            ''" WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " & _
            ''" Pulverisateur.DateProchainControle >= " & pDate.ToString("d") & " AND " & _
            ''" idExploitation = " & ControlChars.Quote & pidExploitation & ControlChars.Quote

            'oReader = oCmd.ExecuteReader()
            'While oReader.Read()
            '    Dim oExploit As New Exploitation()
            '    ' On rempli notre tableau
            '    Dim tmpColId As Integer = 0
            '    While tmpColId < oReader.FieldCount()
            '        FillExploitation(oExploit, oReader, tmpColId)
            '        tmpColId = tmpColId + 1
            '    End While
            '    '            CSDebug.dispInfo("ExploitationManager.getListeExploitation 1 :" & oExploit.id & ":" & oExploit.raisonSociale)
            '    oCol.Add(oExploit)
            'End While
            'oReader.Close()
            '2) Les clients avec date de dernier controle classé par ordre croissant de date de dernièr controle
            strSQL = "SELECT * FROM EXPLOITATION "
            strSQL = strSQL & " Where "
            strSQL = strSQL & " idStructure = " & pAgent.idStructure
            strSQL = strSQL & " ORDER BY DATEDERNIERCONTROLE ASC"
            oCmd.CommandText = strSQL
            oReader = oCmd.ExecuteReader()
            While oReader.Read()
                Dim oExploit As New Exploitation()
                ' On rempli notre tableau
                Dim tmpColId As Integer = 0
                While tmpColId < oReader.FieldCount()
                    FillExploitation(oExploit, oReader, tmpColId)
                    tmpColId = tmpColId + 1
                End While
                setnbPulveEnAlerte(oExploit)
                oCol.Add(oExploit)
            End While
            oReader.Close()

        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.getListeExploitation ERR : " & ex.Message)
            oCol.Clear()
        End Try
        oCsDb.free()
        Return oCol
    End Function
    ''' <summary>
    ''' Met à jout d'attribut nbPulveEnAlerte pour une exploitation
    ''' </summary>
    ''' <param name="poExploit"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function setnbPulveEnAlerte(poExploit As Exploitation) As Boolean
        Debug.Assert(poExploit IsNot Nothing)
        Debug.Assert(Not String.IsNullOrEmpty(poExploit.id))
        Dim bReturn As Boolean
        Dim oCsDb As New CSDb(True)
        Dim oCmd As DbCommand
        Dim oReader As DbDataReader

        Try
            'Calcul du nombre de Pulve NOK ou qui ont une date de prochain controle < Aujourd'hui
            Dim strSQL As String
            strSQL = " SELECT count(*) as nPulvesAlerte,  MIN(dateprochaincontrole) as MinDateProchainControle" &
                     " FROM ExploitationTOPulverisateur, pulverisateur" &
                     " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND NOT isSupprimeCoProp AND " &
                     " (Pulverisateur.ControleEtat <>'1' OR Pulverisateur.dateprochaincontrole is NULL OR Pulverisateur.dateprochaincontrole < DATE())  AND " &
                     " idExploitation = '" & poExploit.id & "'"
            oCmd = oCsDb.getConnection().CreateCommand()
            oCmd.CommandText = strSQL
            oReader = oCmd.ExecuteReader()
            If oReader.HasRows Then
                oReader.Read()
                FillExploitation(poExploit, oReader, 0)
                FillExploitation(poExploit, oReader, 1)
            End If
            oReader.Close()
            If poExploit.nPulvesAlerte > 0 Then
                ''Calcul de la 
                'strSQL = "SELECT MIN(dateprochaincontrole) as DateProchainControle" &
                '     " FROM ExploitationTOPulverisateur, pulverisateur" &
                '     " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " &
                '     " (Pulverisateur.dateprochaincontrole is NOT NULL AND Pulverisateur.dateprochaincontrole < NOW) AND " &
                '     " idExploitation = '" & poExploit.id & "'"
            Else
                strSQL = "SELECT MIN(dateprochaincontrole) as MinDateProchainControle" &
                     " FROM ExploitationTOPulverisateur, pulverisateur" &
                     " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND Not isSupprimeCoProp AND " &
                     " idExploitation = '" & poExploit.id & "'"

                oCmd = oCsDb.getConnection().CreateCommand()
                oCmd.CommandText = strSQL
                oReader = oCmd.ExecuteReader()
                If oReader.HasRows Then
                    oReader.Read()
                    FillExploitation(poExploit, oReader, 0)
                End If
                oReader.Close()
            End If
            oCsDb.free()
            bReturn = True
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.setnbPulveEnAlerte ERR : " & ex.Message)
            bReturn = False
        End Try

        oCsDb.free()
    End Function


    'Ancienne Version 
    'Public Shared Function getListeExploitationOLD(pAgent As Agent, ByVal pDateLimite As Date) As List(Of Exploitation)
    '    Dim oCol As New List(Of Exploitation)
    '    Dim oCsDb As New CSDb(True)
    '    Dim strSQL As String
    '    Try
    '        Dim oCmd As DbCommand
    '        Dim oReader As DbDataReader
    '        oCmd = oCsDb.getConnection().CreateCommand()
    '        '1) Les clients sans date de dernier controle classé par ordre décroissant de date de dernière modif
    '        ' les dernirs créés en premier
    '        strSQL = "SELECT *, " & _
    '            " (SELECT count(*) " & _
    '                 " FROM ExploitationTOPulverisateur, pulverisateur" & _
    '                 " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " & _
    '                 " Pulverisateur.DateProchainControle <= #" & pDateLimite.ToString("d") & "# AND " & _
    '                 " idExploitation = EXPLOITATION.ID ) as nPulvesAlerte " & _
    '            " FROM EXPLOITATION "
    '        strSQL = strSQL & " WHERE "
    '        strSQL = strSQL & " (DATEDERNIERCONTROLE IS NULL OR DATEDERNIERCONTROLE = CDATE(" & ControlChars.Quote & "00:00:00" & ControlChars.Quote & ")) "
    '        strSQL = strSQL & " AND idStructure = " & pAgent.idStructure
    '        strSQL = strSQL & " ORDER BY DATEMODIFICATIONAGENT DESC"
    '        oCmd.CommandText = strSQL
    '        '       Dim strSQL As String = "SELECT count(*) " & _
    '        '" FROM ExploitationTOPulverisateur, pulverisateur" & _
    '        '" WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " & _
    '        '" Pulverisateur.DateProchainControle >= " & pDate.ToString("d") & " AND " & _
    '        '" idExploitation = " & ControlChars.Quote & pidExploitation & ControlChars.Quote

    '        oReader = oCmd.ExecuteReader()
    '        While oReader.Read()
    '            Dim oExploit As New Exploitation()
    '            ' On rempli notre tableau
    '            Dim tmpColId As Integer = 0
    '            While tmpColId < oReader.FieldCount()
    '                FillExploitation(oExploit, oReader, tmpColId)
    '                tmpColId = tmpColId + 1
    '            End While
    '            CSDebug.dispInfo(oExploit.id)
    '            oCol.Add(oExploit)
    '        End While
    '        oReader.Close()
    '        '2) Les clients avec date de dernier controle classé par ordre croissant de date de dernièr controle
    '        strSQL = "SELECT *, " & _
    '            " (SELECT count(*) " & _
    '                 " FROM ExploitationTOPulverisateur, pulverisateur" & _
    '                 " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " & _
    '                 " Pulverisateur.DateProchainControle <= #" & pDateLimite.ToString("d") & "# AND " & _
    '                 " idExploitation = EXPLOITATION.ID ) as nPulvesAlerte " & _
    '            "FROM EXPLOITATION "
    '        strSQL = strSQL & " Where "
    '        strSQL = strSQL & " (DATEDERNIERCONTROLE IS NOT NULL AND DATEDERNIERCONTROLE <> CDATE(" & ControlChars.Quote & "00:00:00" & ControlChars.Quote & ")) "
    '        strSQL = strSQL & " AND idStructure = " & pAgent.idStructure
    '        strSQL = strSQL & " ORDER BY DATEDERNIERCONTROLE ASC"
    '        oCmd.CommandText = strSQL
    '        oReader = oCmd.ExecuteReader()
    '        While oReader.Read()
    '            Dim oExploit As New Exploitation()
    '            ' On rempli notre tableau
    '            Dim tmpColId As Integer = 0
    '            While tmpColId < oReader.FieldCount()
    '                FillExploitation(oExploit, oReader, tmpColId)
    '                tmpColId = tmpColId + 1
    '            End While
    '            oCol.Add(oExploit)
    '        End While
    '        oReader.Close()

    '    Catch ex As Exception
    '        dispError("ExploitationManager.getListeExploitation ERR : " & ex.Message)
    '        oCol.Clear()
    '    End Try
    '    oCsDb.free()
    '    Return oCol
    'End Function

    Private Shared Function FillExploitation(ByVal pExploitation As Exploitation, ByVal pReader As DbDataReader, ByVal tmpColId As Integer) As Boolean
        Dim bReturn As Boolean
        Try

            If Not pReader.IsDBNull(tmpColId) Then
                Select Case pReader.GetName(tmpColId).Trim().ToUpper
                    Case "id".Trim().ToUpper()
                        pExploitation.id = pReader.Item(tmpColId).ToString()
                    Case "numeroSiren".Trim().ToUpper()
                        pExploitation.numeroSiren = pReader.Item(tmpColId).ToString()
                    Case "codeApe".Trim().ToUpper()
                        pExploitation.codeApe = pReader.Item(tmpColId).ToString()
                    Case "raisonSociale".Trim().ToUpper()
                        pExploitation.raisonSociale = pReader.Item(tmpColId).ToString()
                    Case "nombreExploitant".Trim().ToUpper()
                        pExploitation.nombreExploitant = pReader.Item(tmpColId)
                    Case "nomExploitant".Trim().ToUpper()
                        pExploitation.nomExploitant = pReader.Item(tmpColId).ToString()
                    Case "prenomExploitant".Trim().ToUpper()
                        pExploitation.prenomExploitant = pReader.Item(tmpColId).ToString()
                    Case "adresse".Trim().ToUpper()
                        pExploitation.adresse = pReader.Item(tmpColId).ToString()
                    Case "codePostal".Trim().ToUpper()
                        pExploitation.codePostal = pReader.Item(tmpColId).ToString()
                    Case "commune".Trim().ToUpper()
                        pExploitation.commune = pReader.Item(tmpColId).ToString()
                    Case "codeInsee".Trim().ToUpper()
                        pExploitation.codeInsee = pReader.Item(tmpColId).ToString()
                    Case "telephoneFixe".Trim().ToUpper()
                        pExploitation.telephoneFixe = pReader.Item(tmpColId).ToString()
                    Case "telephonePortable".Trim().ToUpper()
                        pExploitation.telephonePortable = pReader.Item(tmpColId).ToString()
                    Case "telephoneFax".Trim().ToUpper()
                        pExploitation.telephoneFax = pReader.Item(tmpColId).ToString()
                    Case "eMail".Trim().ToUpper()
                        pExploitation.eMail = pReader.Item(tmpColId).ToString()
                    Case "isProdGrandeCulture".Trim().ToUpper()
                        pExploitation.isProdGrandeCulture = pReader.Item(tmpColId).ToString()
                    Case "isProdElevage".Trim().ToUpper()
                        pExploitation.isProdElevage = pReader.Item(tmpColId).ToString()
                    Case "isProdArboriculture".Trim().ToUpper()
                        pExploitation.isProdArboriculture = pReader.Item(tmpColId).ToString()
                    Case "isProdLegume".Trim().ToUpper()
                        pExploitation.isProdLegume = pReader.Item(tmpColId).ToString()
                    Case "isProdViticulture".Trim().ToUpper()
                        pExploitation.isProdViticulture = pReader.Item(tmpColId).ToString()
                    Case "isProdAutre".Trim().ToUpper()
                        pExploitation.isProdAutre = pReader.Item(tmpColId).ToString()
                    Case "productionAutre".Trim().ToUpper()
                        pExploitation.productionAutre = pReader.Item(tmpColId).ToString()
                    Case "idStructure".Trim().ToUpper()
                        pExploitation.idStructure = pReader.Item(tmpColId)
                    Case "isSupprime".Trim().ToUpper()
                        pExploitation.isSupprime = pReader.Item(tmpColId).ToString()
                    Case "dateModificationAgent".Trim().ToUpper()
                        pExploitation.dateModificationAgent = CSDate.ToCRODIPString(pReader.Item(tmpColId).ToString())
                    Case "dateModificationCrodip".Trim().ToUpper()
                        pExploitation.dateModificationCrodip = CSDate.ToCRODIPString(pReader.Item(tmpColId).ToString())
                    Case "dateDernierControle".Trim().ToUpper()
                        If String.IsNullOrEmpty(pReader.Item(tmpColId).ToString()) Or pReader.Item(tmpColId).ToString() = "30/12/1899 00:00:00" Then
                            pExploitation.dateDernierControle = ""
                        Else
                            pExploitation.dateDernierControle = CSDate.ToCRODIPString(pReader.Item(tmpColId).ToString())
                        End If
                    Case "surfaceAgricoleUtile".Trim().ToUpper()
                        pExploitation.surfaceAgricoleUtile = pReader.Item(tmpColId).ToString()
                    Case "nPulvesAlerte".Trim().ToUpper()
                        pExploitation.nPulvesAlerte = pReader.GetInt32(tmpColId)
                    Case "MinDateProchainControle".Trim().ToUpper()
                        pExploitation.dateProchainControle = CSDate.ToCRODIPString(pReader.Item(tmpColId))
                End Select
            End If
            bReturn = True
        Catch ex As Exception
            CSDebug.dispInfo("ExploitationManager.FillClient ERR " & ex.Message)
            bReturn = False
        End Try
        Return bReturn
    End Function

    Public Shared Function getExploitationById(ByVal client_id As String) As Exploitation
        Debug.Assert(Not String.IsNullOrEmpty(client_id))
        ' déclarations
        Dim tmpClient As New Exploitation
        If client_id <> "" Then

            Dim bdd As New CSDb(True)
            Try
                ' On récupère les résultats
                Dim tmpListProfils As DbDataReader = bdd.getResult2s("SELECT * FROM Exploitation WHERE Exploitation.id='" & client_id & "'")
                ' Puis on les parcours
                While tmpListProfils.Read()
                    ' On rempli notre tableau
                    Dim tmpColId As Integer = 0
                    While tmpColId < tmpListProfils.FieldCount()
                        FillExploitation(tmpClient, tmpListProfils, tmpColId)
                        tmpColId = tmpColId + 1
                    End While
                    setnbPulveEnAlerte(tmpClient)
                End While
            Catch ex As Exception ' On intercepte l'erreur
                CSDebug.dispError("ClientManager - getbyid : " & ex.Message)
            End Try

            bdd.free()

        End If
        'on retourne le client ou un objet vide en cas d'erreur
        Return tmpClient
    End Function
    ''' <summary>
    ''' Récupération de l'exploitation à partir d'un numéro de Pulvé
    ''' </summary>
    ''' <param name="pPulveId"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function GetExploitationByPulverisateurId(pPulveId As String) As Exploitation
        Dim oLst As List(Of Exploitation)
        Dim oReturn As Exploitation
        Try
            oLst = GetListExploitationByPulverisateurId(pPulveId)
            If oLst.Count() > 0 Then
                oReturn = oLst(0)
            Else
                oReturn = New Exploitation()
            End If

        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.GetExploitationByPulverisateurId ERR" & ex.Message)
            oReturn = New Exploitation()
        End Try
        Return oReturn
    End Function

    Public Shared Function GetListExploitationByPulverisateurId(pPulveId As String, Optional pTous As Boolean = False) As List(Of Exploitation)
        Dim oReturn As New List(Of Exploitation)
        Dim CSDb As New CSDb(True)
        Try
            Dim query As String = "SELECT Exploitation.* FROM ExploitationTOPulverisateur INNER JOIN Exploitation ON ExploitationTOPulverisateur.idExploitation = Exploitation.id WHERE ExploitationTOPulverisateur.idPulverisateur = '" & pPulveId & "'"
            If pTous = False Then
                query = query & " and NOT isSupprimeCoProp "
            End If
            Dim oDataReader As DbDataReader = CSDb.getResult2s(query)
            While oDataReader.Read()
                Dim tmpColId As Integer = 0
                Dim oExploit As New Exploitation()
                While tmpColId < oDataReader.FieldCount()
                    FillExploitation(oExploit, oDataReader, tmpColId)
                    tmpColId = tmpColId + 1
                End While
                oReturn.Add(oExploit)
            End While
            oDataReader.Close()
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.GetListExploitationByPulverisateurId ERR" & ex.Message)
            oReturn.Clear()
        End Try

        If CSDb IsNot Nothing Then
            CSDb.free()
        End If
        Return oReturn
    End Function
    'Retourne la liste des diagnostic en attente de contre visite
    Public Shared Function getDiagnosticCV(ByVal exploitationNumeroSiren As String) As Diagnostic()
        ' Déclaration
        Dim arrDiagnostic(0) As Diagnostic
        Dim oCSDB As New CSDb(True)

        If exploitationNumeroSiren <> "" Then

            Dim bddCommande As DbCommand = oCSDB.getConnection().CreateCommand()
            bddCommande.CommandText = "SELECT * FROM Diagnostic WHERE Diagnostic.controleEtat='0' AND Diagnostic.proprietaireNumeroSiren='" & exploitationNumeroSiren & "'"
            Try
                ' On récupère les résultats
                Dim tmpListProfils As DbDataReader = bddCommande.ExecuteReader
                ' Puis on les parcours
                Dim i As Integer = 0
                While tmpListProfils.Read()
                    ' On rempli notre tableau
                    Dim tmpDiagnostic As New Diagnostic
                    Dim tmpColId As Integer = 0
                    While tmpColId < tmpListProfils.FieldCount()
                        If Not tmpListProfils.IsDBNull(tmpColId) Then
                            tmpDiagnostic.Fill(tmpListProfils.GetName(tmpColId), tmpListProfils.Item(tmpColId))
                        End If
                        tmpColId = tmpColId + 1
                    End While
                    arrDiagnostic(i) = tmpDiagnostic
                    i = i + 1
                    ReDim Preserve arrDiagnostic(i)
                End While
                tmpListProfils.Close()
                ReDim Preserve arrDiagnostic(i - 1)
            Catch ex As Exception ' On intercepte l'erreur
                CSDebug.dispError("ClientManager - getDiagnosticCV : " & ex.Message)
            End Try

            ' Test pour fermeture de connection BDD
            If Not oCSDB Is Nothing Then
                ' On ferme la connexion
                oCSDB.free()
            End If

        End If
        Return arrDiagnostic
    End Function

    'Recherche si un client est en alerte
    ' il est en alerte si l'un de ces pulvé a dépassé la date de prochain controle 

    Public Shared Function isClientAlerte(ByVal pidExploitation As String, ByVal pDate As Date) As Boolean
        Dim oCsdb As CSDb = Nothing
        Dim bReturn As Boolean
        Try
            bReturn = True
            If pidExploitation <> "" Then
                oCsdb = New CSDb(True)
                Dim bddCommande As DbCommand
                bddCommande = oCsdb.getConnection().CreateCommand
                'Dim strSQL As String = "SELECT count(*) " & _
                '    " FROM (diagnostic INNER JOIN ExploitationTOPulverisateur ON diagnostic.pulverisateurId = ExploitationTOPulverisateur.idPulverisateur) " & _
                '    " WHERE (Diagnostic.controleEtat='0' and Diagnostic.proprietaireNumeroSiren='" & tmpClient_SIREN & "'" & _
                '    " and ((diagnostic.controleDateFin)=(SELECT  MAX(D.controleDateFin) " & _
                '    " FROM Diagnostic D " & _
                '    " WHERE D.PulverisateurId = Diagnostic.Pulverisateurid)))"

                Dim strSQL As String = "SELECT count(*) " &
                    " FROM ExploitationTOPulverisateur, pulverisateur" &
                    " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND Not isSupprimeCoProp AND " &
                    " Pulverisateur.DateProchainControle >= " & pDate.ToString("d") & " AND " &
                    " idExploitation = " & ControlChars.Quote & pidExploitation & ControlChars.Quote

                bddCommande.CommandText = strSQL
                ' On récupère les résultats
                Dim oReader As DbDataReader = bddCommande.ExecuteReader
                Dim tmpReturn As String = ""
                While oReader.Read()
                    tmpReturn = oReader.Item(0).ToString()
                End While
                oReader.Close()
                If (String.IsNullOrEmpty(tmpReturn) Or tmpReturn = "0") Then
                    bReturn = False
                Else
                    bReturn = True
                End If
                oCsdb.free()
            End If
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.isClientAlerte ERR:" & ex.Message)
            bReturn = False
        End Try
        If oCsdb IsNot Nothing Then
            oCsdb.free()
        End If
        Return bReturn

    End Function

    Private Shared Sub createClient(ByVal client_id As String)
        Dim oCSDB As New CSDb(True)
        If client_id <> "0" Then
            Try
                Dim bddCommande As DbCommand
                bddCommande = oCSDB.getConnection().CreateCommand()

                ' Création
                bddCommande.CommandText = "INSERT INTO Exploitation (id) VALUES ('" & client_id & "')"
                bddCommande.ExecuteReader()

                ' Test pour fermeture de connection BDD
                If oCSDB IsNot Nothing Then
                    ' On ferme la connexion
                    oCSDB.free()
                End If
            Catch ex As Exception
                CSDebug.dispFatal("ExploitationManager - createClient : " & ex.Message)
            End Try
        End If
    End Sub

    Private Shared Function getNewId(ByVal structure_id As String, ByVal pAgent As Agent) As String
        ' déclarations
        Dim tmpClientId As String = structure_id & "-" & pAgent.id & "-1"
        If structure_id <> "" And structure_id <> "0" Then

            Dim bddCommande As DbCommand
            Dim oCSDb As New CSDb(True)
            bddCommande = oCSDb.getConnection().CreateCommand()

            bddCommande.CommandText = "SELECT id FROM Exploitation WHERE id LIKE '" & structure_id & "-" & pAgent.id & "-%' ORDER BY id DESC"
            Try
                ' On récupère les résultats
                Dim tmpListProfils As DbDataReader = bddCommande.ExecuteReader
                ' Puis on les parcours
                Dim newId As Integer = 0
                While tmpListProfils.Read()
                    ' On récupère le dernier ID
                    Dim tmpId As Integer = 0
                    tmpClientId = tmpListProfils.Item(0).ToString
                    tmpId = CInt(tmpClientId.Replace(structure_id & "-" & pAgent.id & "-", ""))
                    If tmpId > newId Then
                        newId = tmpId
                    End If
                End While
                tmpClientId = structure_id & "-" & pAgent.id & "-" & (newId + 1)
            Catch ex As Exception ' On intercepte l'erreur
                CSDebug.dispFatal("ClientManager - newId : " & ex.Message)
            End Try

            ' Test pour fermeture de connection BDD
            If oCSDb IsNot Nothing Then
                ' On ferme la connexion
                oCSDb.free()
            End If

        End If
        'on retourne le nouvel id
        Return tmpClientId
    End Function

    Public Shared Function save(ByVal objClient As Exploitation, ByVal pAgent As Agent, Optional bSyncro As Boolean = False) As Boolean
        Dim oCsdb As CSDb = Nothing
        Dim bReturn As Boolean
        Try

            oCsdb = New CSDb(True)

            ' On test si le client existe ou non
            Dim existsClient As Object
            existsClient = ExploitationManager.getExploitationById(objClient.id)
            If existsClient.id = "" Or existsClient.id = "0" Then
                ' Si il n'existe pas, on le crée
                'createClient(objClient.idCrodip)
                If String.IsNullOrEmpty(objClient.id) Or objClient.id = "0" Then
                    'Affectation des id pour un nouveau client
                    objClient.id = getNewId(pAgent.idStructure, pAgent)
                    objClient.idStructure = pAgent.idStructure
                End If
                createClient(objClient.id)
            End If

            Dim bddCommande As DbCommand
            bddCommande = oCsdb.getConnection().CreateCommand()

            Dim paramsQuery As String

            paramsQuery = "id='" & objClient.id & "'"
            ' Mise a jour de la date de derniere modification
            If Not bSyncro Then
                objClient.dateModificationAgent = CSDate.ToCRODIPString(Date.Now).ToString
            End If
            paramsQuery = paramsQuery & " , idStructure=" & objClient.idStructure & ""
            If Not objClient.numeroSiren Is Nothing Then
                paramsQuery = paramsQuery & " , numeroSiren='" & CSDb.secureString(objClient.numeroSiren) & "'"
            End If
            If Not objClient.codeApe Is Nothing Then
                paramsQuery = paramsQuery & " , codeApe='" & CSDb.secureString(objClient.codeApe) & "'"
            End If
            If Not objClient.raisonSociale Is Nothing Then
                paramsQuery = paramsQuery & " , raisonSociale='" & CSDb.secureString(objClient.raisonSociale) & "'"
            End If
            paramsQuery = paramsQuery & " , nombreExploitant=" & objClient.nombreExploitant & ""
            If Not objClient.nomExploitant Is Nothing Then
                paramsQuery = paramsQuery & " , nomExploitant='" & CSDb.secureString(objClient.nomExploitant) & "'"
            End If
            If Not objClient.prenomExploitant Is Nothing Then
                paramsQuery = paramsQuery & " , prenomExploitant='" & CSDb.secureString(objClient.prenomExploitant) & "'"
            End If
            If Not objClient.adresse Is Nothing Then
                paramsQuery = paramsQuery & " , adresse='" & CSDb.secureString(objClient.adresse) & "'"
            End If
            If Not objClient.codePostal Is Nothing Then
                paramsQuery = paramsQuery & " , codePostal='" & CSDb.secureString(objClient.codePostal) & "'"
            End If
            If Not objClient.commune Is Nothing Then
                paramsQuery = paramsQuery & " , commune='" & CSDb.secureString(objClient.commune) & "'"
            End If
            If Not objClient.codeInsee Is Nothing Then
                paramsQuery = paramsQuery & " , codeInsee='" & CSDb.secureString(objClient.codeInsee) & "'"
            End If
            If Not objClient.telephoneFixe Is Nothing Then
                paramsQuery = paramsQuery & " , telephoneFixe='" & CSDb.secureString(objClient.telephoneFixe) & "'"
            End If
            If Not objClient.telephonePortable Is Nothing Then
                paramsQuery = paramsQuery & " , telephonePortable='" & CSDb.secureString(objClient.telephonePortable) & "'"
            End If
            If Not objClient.telephoneFax Is Nothing Then
                paramsQuery = paramsQuery & " , telephoneFax='" & CSDb.secureString(objClient.telephoneFax) & "'"
            End If
            If Not objClient.eMail Is Nothing Then
                paramsQuery = paramsQuery & " , eMail='" & CSDb.secureString(objClient.eMail) & "'"
            End If
            If Not objClient.surfaceAgricoleUtile Is Nothing Then
                paramsQuery = paramsQuery & " , surfaceAgricoleUtile='" & CSDb.secureString(objClient.surfaceAgricoleUtile) & "'"
            End If

            paramsQuery = paramsQuery & " , isProdGrandeCulture=" & CSDb.secureString(objClient.isProdGrandeCulture) & ""
            paramsQuery = paramsQuery & " , isProdElevage=" & CSDb.secureString(objClient.isProdElevage) & ""
            paramsQuery = paramsQuery & " , isProdArboriculture=" & CSDb.secureString(objClient.isProdArboriculture) & ""
            paramsQuery = paramsQuery & " , isProdLegume=" & CSDb.secureString(objClient.isProdLegume) & ""
            paramsQuery = paramsQuery & " , isProdViticulture=" & CSDb.secureString(objClient.isProdViticulture) & ""
            paramsQuery = paramsQuery & " , isProdAutre=" & CSDb.secureString(objClient.isProdAutre) & ""
            If Not objClient.productionAutre Is Nothing And objClient.productionAutre <> "" Then
                paramsQuery = paramsQuery & " , productionAutre='" & CSDb.secureString(objClient.productionAutre) & "'"
            End If

            paramsQuery = paramsQuery & " , isSupprime=" & CSDb.secureString(objClient.isSupprime) & ""
            If Not objClient.dateModificationCrodip Is Nothing And objClient.dateModificationCrodip <> "" Then
                paramsQuery = paramsQuery & " , dateModificationCrodip='" & CSDate.mysql2access((objClient.dateModificationCrodip)) & "'"
            End If
            If Not objClient.dateModificationAgent Is Nothing And objClient.dateModificationAgent <> "" Then
                paramsQuery = paramsQuery & " , dateModificationAgent='" & CSDate.mysql2access((objClient.dateModificationAgent)) & "'"
            End If
            If Not objClient.dateDernierControle Is Nothing And objClient.dateDernierControle <> "" Then
                paramsQuery = paramsQuery & " , dateDernierControle='" & CSDate.mysql2access((objClient.dateDernierControle)) & "'"
            End If

            bddCommande.CommandText = "UPDATE Exploitation SET " & paramsQuery & " WHERE id='" & CSDb.secureString(objClient.id) & "'"
            bddCommande.ExecuteNonQuery()
            bReturn = True
        Catch ex As Exception
            CSDebug.dispFatal("ClientManager - save : " & ex.Message)
            bReturn = False
        End Try
        If Not oCsdb Is Nothing Then
            oCsdb.free()
        End If
        Return bReturn
    End Function

    Public Shared Sub setSynchro(ByVal objClient As Exploitation)
        Try
            Dim dbLink As New CSDb(True)
            Dim newDate As String = Date.Now.ToString
            dbLink.queryString = "UPDATE Exploitation SET dateModificationCrodip='" & newDate & "',dateModificationAgent='" & newDate & "' WHERE id='" & objClient.id & "'"
            dbLink.Execute()
            dbLink.free()
        Catch ex As Exception
            CSDebug.dispFatal("ClientManager::setSynchro : " & ex.Message)
        End Try
    End Sub

    Public Shared Function getStats(ByVal objClient As Exploitation) As String()
        Dim arrStats() As String = {"0", "---", "0", "0"}

        If objClient.id <> "" Then

            Dim CSDb As New CSDb(True)
            Dim query As String = "SELECT count(Diagnostic.id) AS nbControles FROM (Diagnostic INNER JOIN ExploitationTOPulverisateur ON Diagnostic.pulverisateurId = ExploitationTOPulverisateur.idPulverisateur) INNER JOIN Exploitation ON ExploitationTOPulverisateur.idExploitation = Exploitation.id WHERE Not isSupprimeCoProp AND Exploitation.id = '" & objClient.id & "'"
            Dim tmpListResults As DbDataReader = CSDb.getResult2s(query)
            While tmpListResults.Read()
                Dim tmpColId As Integer = 0
                While tmpColId < tmpListResults.FieldCount()
                    Select Case tmpListResults.GetName(tmpColId)
                        Case "nbControles"
                            arrStats(0) = tmpListResults.Item(tmpColId).ToString()
                        Case "typeProductions"
                            arrStats(1) = tmpListResults.Item(tmpColId).ToString()
                        Case "surfaceAgricole"
                            arrStats(2) = tmpListResults.Item(tmpColId).ToString()
                        Case "surfacePulverise"
                            arrStats(3) = tmpListResults.Item(tmpColId).ToString()
                    End Select
                    tmpColId = tmpColId + 1
                End While
            End While
            CSDb.free()
        End If

        Return arrStats
    End Function

    Public Shared Function existsClient(ByVal clientId As String, ByVal numSiren As String) As Integer
        Dim bdd As CSDb
        bdd = New CSDb(True)
        Dim returnval As Integer

        Try
            Dim dataResults As DbDataReader = bdd.getResult2s("SELECT Count(*) AS existsClient FROM Exploitation WHERE numeroSiren='" & numSiren & "' AND id <> '" & clientId & "'")
            While dataResults.Read()
                returnval = CInt(Trim(dataResults.Item(0).ToString))
            End While
            dataResults.Close()
            bdd.free()
            Return returnval
        Catch ex As Exception
            bdd.free()
            Return 0
        End Try
    End Function
    Public Shared Function existsClient(ByVal numSiren As String) As Integer
        Dim bdd As CSDb
        bdd = New CSDb(True)
        Dim returnval As Integer
        Try
            Dim dataResults As DbDataReader = bdd.getResult2s("SELECT Count(*) AS existsClient FROM Exploitation WHERE numeroSiren='" & numSiren & "'")
            While dataResults.Read()
                returnval = CInt(Trim(dataResults.Item(0).ToString))
            End While
            dataResults.Close()
            bdd.free()
            Return returnval
        Catch ex As Exception
            bdd.free()
            Return 0
        End Try
    End Function

#Region " - Suppression - "
    Public Shared Function isUsedClient(ByVal client_id As String) As Boolean
        Dim bReturn As Boolean
        bReturn = False
        Try

            ' On vérifie que le client n'a pas de pulvé
            Dim query As String = "SELECT * FROM ExploitationTOPulverisateur WHERE ExploitationTOPulverisateur.idExploitation = '" & client_id & "'"
            Dim bdd As New CSDb(True)
            Dim dataResults As DbDataReader = bdd.getResult2s(query)

            bReturn = dataResults.HasRows
            dataResults.Close()
            Return bReturn

        Catch ex As Exception
            CSDebug.dispError("ClientManager.isUsedClient() : " & ex.Message)
            Return True
        End Try
    End Function
    Public Shared Function SupprimerExploitation(ByVal objClient As Exploitation) As Boolean
        Try
            If Not ExploitationManager.isUsedClient(objClient.id) Then

                ' On supprime le client de la base
                Dim query As String = "UPDATE Exploitation SET dateModificationAgent='" & Date.Now.ToString & "' , isSupprime=" & True & " WHERE id='" & objClient.id & "'"
                Dim bdd As New CSDb(True)
                Dim dataResults As DbDataReader = bdd.getResult2s(query)

                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            CSDebug.dispFatal("ClientManager.deleteClient() : " & ex.Message)
            Return False
        End Try
    End Function
    ''' Suppression de l'exploitation en base de données ainsi que du lien vers pulverisateur
    Public Shared Function delete(ByVal idExploitation As String) As Boolean

        Try
            Dim query As String
            Dim bdd As New CSDb(True)
            ' On supprime le ExploitationToPulverisateur de la base
            query = "DELETE FROM ExploitationToPulverisateur WHERE idExploitation='" & idExploitation & "'"
            bdd.Execute(query)

            ' On supprime le Client de la base
            query = "DELETE FROM Exploitation WHERE id='" & idExploitation & "'"
            bdd.Execute(query)

            bdd.free()
            Return True
        Catch ex As Exception
            CSDebug.dispFatal("ExploitationManager.Delete() : " & ex.Message)
            Return False
        End Try
    End Function
#End Region

    ''' Suppression des exploitations d'une structure (For Test Only)
    Friend Shared Function FTO_DBdelete(ByVal idStructure As Integer) As Boolean

#If DEBUG Then
        Try
            Dim query As String
            Dim bdd As New CSDb(True)
            Dim oReader As DbDataReader
            Dim idExploit As String
            'Lecture des Exploitation de la Structure
            query = "SELECT * FROM Exploitation WHERE idStructure=" & idStructure & ""

            oReader = bdd.getResult2s(query)
            While oReader.Read()
                idExploit = oReader.GetString(0)
                'Suppression de ExplitationToPulverisateur
                query = "DELETE FROM ExploitationToPulverisateur WHERE idExploitation =" & ControlChars.Quote & idExploit & ControlChars.Quote
                bdd.Execute(query)
                'Suppression de Explitation
                query = "DELETE FROM Exploitation WHERE id ='" & idExploit & "'"
                bdd.Execute(query)

            End While

            bdd.free()
            Return True
        Catch ex As Exception
            CSDebug.dispFatal("ClientManager.DBDelete() : " & ex.Message)
            Return False
        End Try
#Else
                return False
#End If

    End Function
#End Region

    ''' <summary>
    ''' Recherche les exploitations correspondant à un critère
    ''' </summary>
    ''' <param name="pAgent"></param>
    ''' <param name="SearchId (0=Tous, 1=Siren, 2=RS, 3=Prenom, 4 = Nom, ( = date de ctrl)"></param>
    ''' <param name="SearchParams"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function searchExploitation(ByVal pAgent As Agent, ByVal SearchId As Integer, ByVal SearchParams As String) As List(Of Exploitation)

        Dim oCol As New List(Of Exploitation)
        Dim oCsdB As New CSDb(True)
        Try

            ' On récupère les paramètres
            Dim searchParamdateControle1 As Date
            Dim searchParamDateControle2 As Date
            Dim oReader As DbDataReader
            Dim oCmd As DbCommand
            If SearchId = 5 Then
                If Not String.IsNullOrEmpty(SearchParams) And SearchParams.IndexOf("|") > 0 Then

                    searchParamdateControle1 = CDate(SearchParams.Split("|")(0))
                    searchParamDateControle2 = CDate(SearchParams.Split("|")(1))
                End If
            End If

            If SearchParams = "" Then
                SearchParams = "%"
            End If

            ' construction de la requête
            Dim tmpQuerySearch As String = "SELECT DISTINCT * FROM Exploitation WHERE Exploitation.idStructure = " & pAgent.idStructure & " AND ("
            Select Case SearchId
                Case 0
                    tmpQuerySearch = tmpQuerySearch &
                    " numeroSiren LIKE '" & SearchParams & "%' OR " &
                    " raisonSociale LIKE '%" & SearchParams & "%' OR " &
                    " prenomExploitant LIKE '%" & SearchParams & "%' OR " &
                    " nomExploitant LIKE '%" & SearchParams & "%'"
                Case 1
                    tmpQuerySearch = tmpQuerySearch &
                    " numeroSiren LIKE '" & SearchParams & "%'"
                Case 2
                    tmpQuerySearch = tmpQuerySearch &
                    " raisonSociale LIKE '%" & SearchParams & "%'"
                Case 3
                    tmpQuerySearch = tmpQuerySearch &
                    " prenomExploitant LIKE '%" & SearchParams & "%'"
                Case 4
                    tmpQuerySearch = tmpQuerySearch &
                    " nomExploitant LIKE '%" & SearchParams & "%'"
                Case 5 'Date de controle
                    tmpQuerySearch = "SELECT DISTINCT Exploitation.* FROM Exploitation, Diagnostic " &
                        "WHERE Diagnostic.ProprietaireId = Exploitation.id AND Exploitation.idStructure = " & pAgent.idStructure & " AND ("
                    tmpQuerySearch = tmpQuerySearch &
                    " DIAGNOSTIC.ControleDateDebut >=CDATE(" & ControlChars.Quote & searchParamdateControle1.ToString("d") & " 00:00:00" & ControlChars.Quote & ") AND DIAGNOSTIC.ControleDateDebut <= CDATE(" & ControlChars.Quote & searchParamDateControle2.ToString("d") & " 23:59:59" & ControlChars.Quote & ")"
                Case 6 'Numéro de pulverisateur
                    tmpQuerySearch = "SELECT DISTINCT Exploitation.* FROM (ExploitationTOPulverisateur INNER JOIN Exploitation ON ExploitationTOPulverisateur.idExploitation = Exploitation.id) INNER JOIN Pulverisateur ON ExploitationTOPulverisateur.idPulverisateur = Pulverisateur.id WHERE ( NOT isSupprimeCoProp AND Pulverisateur.numeroNational LIKE '%" & SearchParams & "%' AND Exploitation.idStructure = " & pAgent.idStructure
            End Select
            tmpQuerySearch = tmpQuerySearch & ")"

            oCmd = oCsdB.getConnection().CreateCommand()
            oCmd.CommandText = tmpQuerySearch
            oReader = oCmd.ExecuteReader()
            While oReader.Read()
                Dim oExploit As New Exploitation()
                ' On rempli notre tableau
                Dim tmpColId As Integer = 0
                While tmpColId < oReader.FieldCount()
                    FillExploitation(oExploit, oReader, tmpColId)
                    tmpColId = tmpColId + 1
                End While
                setnbPulveEnAlerte(oExploit)
                oCol.Add(oExploit)
            End While
            oReader.Close()
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.searchExploitation ERR : " & ex.Message)
            oCol = New List(Of Exploitation)
        End Try
        oCsdB.free()
        Return oCol
    End Function

    'Public Shared Function getResult(ByVal query As String)
    '    ' déclarations
    '    Dim arrItems(0) As Exploitation
    '    Dim bddCommande As New DbCommand
    '    ' On test si la connexion est déjà ouverte ou non
    '    If bddConnection.State() = 0 Then
    '        ' Si non, on la configure et on l'ouvre
    '        bddConnection.ConnectionString = bddConnectString
    '        bddConnection.Open()
    '    End If
    '    bddCommande.Connection = bddConnection
    '    bddCommande.CommandText = query
    '    Try
    '        ' On récupère les résultats
    '        Dim tmpListProfils As dbDataReader = bddCommande.ExecuteReader
    '        Dim i As Integer = 0
    '        ' Puis on les parcours
    '        While tmpListProfils.Read()
    '            ' On rempli notre tableau
    '            Dim tmpClient As New Exploitation
    '            Dim tmpColId As Integer = 0
    '            While tmpColId < tmpListProfils.FieldCount()
    '                Select Case tmpListProfils.GetName(tmpColId)
    '                    Case "id"
    '                        tmpClient.id = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "idStructure"
    '                        tmpClient.idStructure = tmpListProfils.Item(tmpColId)
    '                    Case "numeroSiren"
    '                        tmpClient.numeroSiren = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "codeApe"
    '                        tmpClient.codeApe = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "raisonSociale"
    '                        tmpClient.raisonSociale = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "nombreExploitant"
    '                        tmpClient.nombreExploitant = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "nomExploitant"
    '                        tmpClient.nomExploitant = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "prenomExploitant"
    '                        tmpClient.prenomExploitant = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "adresse"
    '                        tmpClient.adresse = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "codePostal"
    '                        tmpClient.codePostal = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "commune"
    '                        tmpClient.commune = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "codeInsee"
    '                        tmpClient.codeInsee = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "telephoneFixe"
    '                        tmpClient.telephoneFixe = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "telephonePortable"
    '                        tmpClient.telephonePortable = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "telephoneFax"
    '                        tmpClient.telephoneFax = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "eMail"
    '                        tmpClient.eMail = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdGrandeCulture"
    '                        tmpClient.isProdGrandeCulture = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdElevage"
    '                        tmpClient.isProdElevage = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdArboriculture"
    '                        tmpClient.isProdArboriculture = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdLegume"
    '                        tmpClient.isProdLegume = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdViticulture"
    '                        tmpClient.isProdViticulture = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdAutre"
    '                        tmpClient.isProdAutre = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "productionAutre"
    '                        tmpClient.productionAutre = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isSupprime"
    '                        tmpClient.isSupprime = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "dateModificationCrodip"
    '                        tmpClient.dateModificationCrodip = CSDate.access2mysql(tmpListProfils.Item(tmpColId).ToString())
    '                    Case "dateModificationAgent"
    '                        tmpClient.dateModificationAgent = CSDate.access2mysql(tmpListProfils.Item(tmpColId).ToString())
    '                    Case "dateDernierControle"
    '                        tmpClient.dateDernierControle = CSDate.access2mysql(tmpListProfils.Item(tmpColId).ToString())
    '                    Case "surfaceAgricoleUtile"
    '                        tmpClient.surfaceAgricoleUtile = tmpListProfils.Item(tmpColId).ToString()
    '                End Select
    '                tmpColId = tmpColId + 1
    '            End While
    '            arrItems(i) = tmpClient
    '            i = i + 1
    '            ReDim Preserve arrItems(i)
    '        End While
    '        ReDim Preserve arrItems(i - 1)
    '    Catch ex As Exception ' On intercepte l'erreur
    '        CSDebug.dispError("ClientManager Error: " & ex.Message)
    '    End Try
    '    ' Test pour fermeture de connection BDD
    '    If bddConnection.State() <> 0 Then
    '        ' On ferme la connexion
    '        bddConnection.Close()
    '    End If
    '    'on retourne le client ou un objet vide en cas d'erreur
    '    Return arrItems

    'End Function

    ''Public Shared Function addIdStructure(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.idStructure LIKE '%" & parametre & "' AND "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.idStructure LIKE '" & parametre & "%' AND "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.idStructure LIKE '%" & parametre & "%' AND "
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.idStructure = " & parametre & " AND "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNumeroSiren(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.numeroSiren LIKE '%" & parametre & "' OR "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.numeroSiren LIKE '" & parametre & "%' OR "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.numeroSiren LIKE '%" & parametre & "%' OR "
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.numeroSiren = '" & parametre & "' OR "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNumeroEde(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.numeroEde LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.numeroEde LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.numeroEde LIKE '%" & parametre & "%'"
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.numeroEde = '" & parametre & "'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCodeApe(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.codeApe LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.codeApe LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.codeApe LIKE '%" & parametre & "%'"
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.codeApe = '" & parametre & "'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addRaisonSociale(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.raisonSociale LIKE '%" & parametre & "' OR "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.raisonSociale LIKE '" & parametre & "%' OR "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.raisonSociale LIKE '%" & parametre & "%' OR "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNomExploitation(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.nom LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.nom LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.nom LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNombreExploitants(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.nombreExploitant LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.nombreExploitant LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.nombreExploitant LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCivilite(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.civiliteExploitant LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.civiliteExploitant LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.civiliteExploitant LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNom(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.nomExploitant LIKE '%" & parametre & "' OR "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.nomExploitant LIKE '" & parametre & "%' OR "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.nomExploitant LIKE '%" & parametre & "%' OR "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addPrenom(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.prenomExploitant LIKE '%" & parametre & "' OR "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.prenomExploitant LIKE '" & parametre & "%' OR "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.prenomExploitant LIKE '%" & parametre & "%' OR "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addAdresse(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.adresse LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.adresse LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.adresse LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCodePostal(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.codePostal LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.codePostal LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.codePostal LIKE '%" & parametre & "%'"
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.codePostal LIKE '" & parametre & "'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCommune(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.commune LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.commune LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.commune LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCodeInseeCommune(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.codeInsee LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.codeInsee LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.codeInsee LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addTelephoneFixe(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.telephoneFixe LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.telephoneFixe LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.telephoneFixe LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addTelephonePortable(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.telephonePortable LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.telephonePortable LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.telephonePortable LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addFax(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.telephoneFax LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.telephoneFax LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.telephoneFax LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addEmail(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.eMail LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.eMail LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.eMail LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    Public Shared Function getUpdates(ByVal pAgent As Agent) As Exploitation()
        ' déclarations
        Dim arrItems(0) As Exploitation
        Dim oCSdb As New CSDb(True)
        Dim bddCommande As DbCommand = oCSdb.getConnection().CreateCommand()
        bddCommande.CommandText = "SELECT * FROM Exploitation WHERE dateModificationAgent<>dateModificationCrodip "
        bddCommande.CommandText = bddCommande.CommandText & " AND idStructure=" & pAgent.idStructure

        Try
            ' On récupère les résultats
            Dim tmpListProfils As DbDataReader = bddCommande.ExecuteReader
            Dim i As Integer = 0
            ' Puis on les parcours
            While tmpListProfils.Read()
                ' On rempli notre tableau
                Dim tmpExploitation As New Exploitation
                Dim tmpColId As Integer = 0
                While tmpColId < tmpListProfils.FieldCount()
                    FillExploitation(tmpExploitation, tmpListProfils, tmpColId)
                    tmpColId = tmpColId + 1
                End While
                setnbPulveEnAlerte(tmpExploitation)
                arrItems(i) = tmpExploitation
                i = i + 1
                ReDim Preserve arrItems(i)
            End While
            ReDim Preserve arrItems(i - 1)

        Catch ex As Exception ' On intercepte l'erreur
            CSDebug.dispError("ClientManager - getUpdates : " & ex.Message)
        End Try

        oCSdb.free()
        'on retourne les objet non synchro
        Return arrItems
    End Function



End Class

