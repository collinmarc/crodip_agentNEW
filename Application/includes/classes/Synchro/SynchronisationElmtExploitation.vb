
Imports System.Web.Services
Imports System.Xml.Serialization
Imports System.Security.Cryptography
Imports System.IO
Imports System.Text
Imports System.Collections.Generic
Imports Crodip_agent
''' <summary>
''' SynchronisationElmtIdentifiantPulverisateur
''' Element de Synchronistation d'un Diagnostic
''' </summary>
''' <remarks></remarks>
Public Class SynchronisationElmtExploitation
    Inherits SynchronisationElmt
    Public Sub New(pSynchroBoleans As SynchroBooleans)
        MyBase.New(getLabelGet(), pSynchroBoleans)
        IdentifiantEntier = 0
        IdentifiantChaine = ""
        ValeurAuxiliaire = ""
    End Sub
    'constructeur Sans paramètre utilisé uniquement pour la sérialisation
    Public Sub New()
        MyBase.New(getLabelGet(), New SynchroBooleans)
        IdentifiantEntier = 0
        IdentifiantChaine = ""
        ValeurAuxiliaire = ""
    End Sub

    Public Sub New(pIdDiag As String)
        MyBase.New(getLabelGet(), New SynchroBooleans)
        IdentifiantEntier = 0
        IdentifiantChaine = pIdDiag
        ValeurAuxiliaire = ""
    End Sub
    Public Shared Function getLabelGet() As String
        Return "GetExploitation"
    End Function
    Public Overrides Function SynchroDesc(pAgent As Agent) As Boolean
        Dim breturn As Boolean = False
        If (m_SynchroBoolean.m_bSynchDescExploitation) Then
            Try
                Dim oExploit As Exploitation
                SetStatus("Réception MAJ Exploitation n°" & Me.IdentifiantChaine & "...")
                oExploit = ExploitationManager.getWSExploitationById(pAgent.id, Me.IdentifiantChaine)
                If oExploit.raisonSociale <> "" Then
                    ExploitationManager.save(oExploit, pAgent, True)
                End If
                breturn = True
            Catch ex As Exception
                CSDebug.dispFatal("Synchronisation::runDescSynchro(GetExploitation) : " & ex.Message.ToString)
                bReturn = False
            End Try
        End If

    End Function

End Class
