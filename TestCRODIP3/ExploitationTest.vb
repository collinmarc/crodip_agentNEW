Imports System

Imports Microsoft.VisualStudio.TestTools.UnitTesting

Imports CrodipWS



'''<summary>
'''Classe de test pour DiagnosticHelp551Test, 
'''</summary>
<TestClass()> _
Public Class Exploitationtest
    Inherits CRODIPTest



#Region "Attributs de tests supplémentaires"
    '
    'Vous pouvez utiliser les attributs supplémentaires suivants lorsque vous écrivez vos tests :
    '
    'Utilisez ClassInitialize pour exécuter du code avant d'exécuter le premier test dans la classe
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Utilisez ClassCleanup pour exécuter du code après que tous les tests ont été exécutés dans une classe
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Utilisez TestInitialize pour exécuter du code avant d'exécuter chaque test
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Utilisez TestCleanup pour exécuter du code après que chaque test a été exécuté
    '<TestCleanup()> _
    'Public Sub MyTestCleanup()
    'End Sub
#End Region


    '''<summary>
    '''Test pour D'init de l'objet + properties
    '''</summary>
    <TestMethod()> _
    Public Sub TST_Object()
    End Sub

    '''<summary>
    '''Test pour D'init de l'objet + properties
    '''</summary>
    <TestMethod()> _
    Public Sub TST_Database()
        Dim oExploitation As Exploitation
        Dim strId As String

        oExploitation = New Exploitation()
        oExploitation.raisonSociale = "MONEXPLOITATION"
        oExploitation.codeApe = "12345"
        oExploitation.uidStructure = m_oAgent.uidStructure
        ExploitationManager.save(oExploitation, m_oAgent)
        strId = oExploitation.id


        oExploitation = Nothing

        oExploitation = ExploitationManager.getExploitationById(strId)

        Assert.AreEqual(strId, oExploitation.id)
        Assert.AreEqual(m_oAgent.uidStructure, oExploitation.uidStructure)
        Assert.AreEqual("12345", oExploitation.codeApe)
        Assert.AreEqual("MONEXPLOITATION", oExploitation.raisonSociale)


        Dim oPulve As New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.marque = "PULVE1"

        PulverisateurManager.save(oPulve, oExploitation, m_oAgent)

        oPulve = PulverisateurManager.getPulverisateurById(oPulve.id)
        Assert.AreEqual("PULVE1", oPulve.marque)

        oPulve = PulverisateurManager.getPulverisateurByClientId(strId, "")(0)
        Assert.AreEqual("PULVE1", oPulve.marque)


        PulverisateurManager.deletePulverisateur(oPulve)
        ExploitationManager.delete(oExploitation.id)

    End Sub

    <TestMethod()>
    Public Sub TST_GET_SEND_WS()
        Dim oExploitation As Exploitation
        Dim strId As String

        oExploitation = New Exploitation()
        oExploitation.raisonSociale = "MONEXPLOITATION"
        oExploitation.codeApe = "12345"
        oExploitation.uidStructure = m_oAgent.uidStructure
        ExploitationManager.save(oExploitation, m_oAgent)
        strId = oExploitation.id
        oExploitation = ExploitationManager.getExploitationById(strId)

        Dim oPulve As Pulverisateur
        oPulve = New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.marque = "PULVE1"
        PulverisateurManager.save(oPulve, oExploitation, m_oAgent)

        'Création d'un second pulvé
        oPulve = New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.marque = "PULVE2"
        PulverisateurManager.save(oPulve, oExploitation, m_oAgent)

        'Création d'un Troisième pulvé
        oPulve = New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.marque = "PULVE3"
        PulverisateurManager.save(oPulve, oExploitation, m_oAgent)
        Dim oSynchro As New Synchronisation(m_oAgent)
        oSynchro.MAJDateDerniereSynchro()
        Threading.Thread.Sleep(5000)

        oSynchro.runAscSynchro()
        'Synchronisation "Manuelle" des exploitations, pulvérisateurs
        'agentCourant = m_oAgent
        Dim updatedObject As New Object

        Dim arrPulve As Pulverisateur()



        'Suppression de l'exploitation 
        ExploitationManager.delete(oExploitation.id)

        'Demande au serveur la liste des objects à Synchroniser

        Dim oLstSynchro As List(Of SynchronisationElmt)
        oLstSynchro = oSynchro.getListeElementsASynchroniserDESC(m_oAgent.oPCCourant, m_oAgent)
        Assert.AreNotEqual(0, oLstSynchro.Count)
        oSynchro.runDescSynchro()

        'Lecture du client
        oExploitation = ExploitationManager.getExploitationById(strId)

        Assert.AreEqual(strId, oExploitation.id)
        Assert.AreEqual(m_oAgent.uidStructure, oExploitation.uidStructure)
        Assert.AreEqual("12345", oExploitation.codeApe)
        Assert.AreEqual("MONEXPLOITATION", oExploitation.raisonSociale)

        'Lecture des Pulvé pour ce client => Lecture de ExploitationToPulverisateur

        arrPulve = PulverisateurManager.getPulverisateurByClientId(strId, "")

        Assert.AreEqual(3, arrPulve.Length)

        For Each oPulve In arrPulve
            Assert.AreEqual(m_oAgent.uidStructure, oPulve.uidStructure)
            Assert.IsTrue(oPulve.marque.StartsWith("PULVE"))
        Next

        'Suppression de l'exploitation 
        ExploitationManager.delete(oExploitation.id)
        'Suppression des pulverisateurs
        For Each oPulve In arrPulve
            PulverisateurManager.deletePulverisateur(oPulve)
        Next


    End Sub


    ''' <summary>
    ''' Test la liste des exploitations
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub TST_GetListeExploitation()
        Dim oExploit As Exploitation
        Dim tmpuidStructure As Integer = m_oAgent.uidStructure
        Dim oCol As List(Of Exploitation)
        'Suppression des Exploitations de la structure
        ExploitationManager.FTO_DBdelete(999)

        'Création d'une exploit sans date de dernier controle
        oExploit = New Exploitation()
        oExploit.uidStructure = tmpuidStructure
        oExploit.nomExploitant = "EXPL1"
        ExploitationManager.save(oExploit, m_oAgent)
        System.Threading.Thread.Sleep(1000)
        'Création d'une exploit dans date de dernier controle
        oExploit = New Exploitation()
        oExploit.uidStructure = tmpuidStructure
        oExploit.nomExploitant = "EXPL2"
        ExploitationManager.save(oExploit, m_oAgent)

        'création d'une exploit avec date de dernier controle = 01/02/2006
        oExploit = New Exploitation()
        oExploit.uidStructure = tmpuidStructure
        oExploit.nomExploitant = "EXPL3"
        oExploit.dateDernierControle = "01/02/2006 17:50:02"
        ExploitationManager.save(oExploit, m_oAgent)
        'création d'une exploit avec date de dernier controle = 02/01/2005
        oExploit = New Exploitation()
        oExploit.uidStructure = tmpuidStructure
        oExploit.nomExploitant = "EXPL4"
        oExploit.dateDernierControle = "02/01/2005 09:33:02"
        ExploitationManager.save(oExploit, m_oAgent)


        'Lecture de la liste
        oCol = ExploitationManager.getListeExploitation(m_oAgent, DateTime.Today)
        Assert.AreNotEqual(0, oCol.Count)

        'Vérification de l'ordre
        'Les explitation sans date de dernier controle classées par ordre croissant de Date de dernière Modif Agent
        'Première explitation
        oExploit = oCol(0)
        Assert.AreEqual("EXPL2", oExploit.nomExploitant)
        Assert.IsTrue(String.IsNullOrEmpty(oExploit.dateDernierControle))
        'Deuxième explitation
        'Première explitation
        oExploit = oCol(1)
        Assert.AreEqual("EXPL1", oExploit.nomExploitant)
        Assert.IsTrue(String.IsNullOrEmpty(oExploit.dateDernierControle))

        oExploit = oCol(2)
        Assert.AreEqual("EXPL4", oExploit.nomExploitant)
        Assert.AreEqual("2005-01-02 09:33:02", oExploit.dateDernierControle)

        'Troisième explitation
        oExploit = oCol(3)
        Assert.AreEqual("EXPL3", oExploit.nomExploitant)
        Assert.AreEqual("2006-02-01 17:50:02", oExploit.dateDernierControle)

        'Suppression des Exploitations de la structure

        'ExploitationManager.FTO_DBdelete("999")
        'oCol = ExploitationManager.getListeExploitation(m_oAgent, DateTime.Today)
        'Assert.AreEqual(0, oCol.Count)

    End Sub

    ''' <summary>
    ''' Test la liste des exploitations en alerte
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub TST_GetListeExploitationOrdre()
        Dim oExploit As Exploitation
        Dim tmpuidStructure As Integer = m_oAgent.uidStructure
        Dim oCol As List(Of Exploitation)

        'Création d'une exploit EXPL1 
        oExploit = New Exploitation()
        oExploit.uidStructure = tmpuidStructure
        oExploit.nomExploitant = "EXPL1"
        ExploitationManager.save(oExploit, m_oAgent)

        'Création d'une exploit EXPL2
        oExploit = New Exploitation()
        oExploit.uidStructure = tmpuidStructure
        oExploit.nomExploitant = "EXPL2"
        oExploit.dateDernierControle = "01/02/2006 17:50:02"
        ExploitationManager.save(oExploit, m_oAgent)

        'Ajout d'un pulvérisateur sur Expl2 Etat = OK
        Dim oPulve As New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.dateProchainControle = DateAdd(DateInterval.Day, -1, DateTime.Today).ToShortDateString()
        oPulve.controleEtat = Pulverisateur.controleEtatOK
        PulverisateurManager.save(oPulve, oExploit, m_oAgent)

        'création d'une exploit avec date de dernier controle = 01/02/2006
        oExploit = New Exploitation()
        oExploit.uidStructure = tmpuidStructure
        oExploit.nomExploitant = "EXPL3"
        ExploitationManager.save(oExploit, m_oAgent)

        'création d'une exploit avec date de dernier controle = 02/01/2005
        oExploit = New Exploitation()
        oExploit.uidStructure = tmpuidStructure
        oExploit.nomExploitant = "EXPL4"
        oExploit.dateDernierControle = "02/01/2005 09:33:02"
        ExploitationManager.save(oExploit, m_oAgent)

        'Ajout d'un pulvérisateur sur Expl4 
        oPulve = New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.controleEtat = Pulverisateur.controleEtatNOKCV
        oPulve.dateProchainControle = DateAdd(DateInterval.Day, -1, DateTime.Today).ToShortDateString()
        PulverisateurManager.save(oPulve, oExploit, m_oAgent)


        'Lecture de la liste
        oCol = ExploitationManager.getListeExploitation(m_oAgent, DateTime.Today)
        Assert.AreEqual(4, oCol.Count)


        'Vérification de l'ordre
        'D'abord les Exploitation sans date de prochain controle
        'Première explitation
        oExploit = oCol(0)
        Assert.AreEqual("EXPL3", oExploit.nomExploitant)
        Assert.AreEqual(0, oExploit.nPulvesAlerte)
        'Deuxième explitation
        oExploit = oCol(1)
        Assert.AreEqual("EXPL1", oExploit.nomExploitant)
        Assert.AreEqual(0, oExploit.nPulvesAlerte)

        'Puis les exploitations avec des pulvés en alertes
        oExploit = oCol(2)
        Assert.AreEqual("EXPL4", oExploit.nomExploitant)
        Assert.AreEqual("2005-01-02 09:33:02", oExploit.dateDernierControle)
        Assert.AreEqual(1, oExploit.nPulvesAlerte)

        oExploit = oCol(3)
        Assert.AreEqual("EXPL2", oExploit.nomExploitant)
        Assert.AreEqual("2006-02-01 17:50:02", oExploit.dateDernierControle)
        Assert.AreEqual(1, oExploit.nPulvesAlerte)

        'Suppression des Exploitations de la structure

        ExploitationManager.FTO_DBdelete(m_oAgent.uidStructure)
        oCol = ExploitationManager.getListeExploitation(m_oAgent, DateTime.Today)
        Assert.AreEqual(0, oCol.Count)

    End Sub

    ''' <summary>
    ''' Test la liste des exploitations en alerte
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub TST_NbAlertes()
        Dim oExploit As Exploitation
        Dim tmpuidStructure As Integer = m_oAgent.uidStructure
        Dim oCol As List(Of Exploitation)

        'Création d'une exploit EXPL1 
        oExploit = New Exploitation()
        oExploit.uidStructure = tmpuidStructure
        oExploit.nomExploitant = "EXPL1"
        ExploitationManager.save(oExploit, m_oAgent)

        'Lecture de la liste
        oCol = ExploitationManager.getListeExploitation(m_oAgent, DateTime.Today)
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual("EXPL1", oExploit.nomExploitant)
        Assert.AreEqual(0, oExploit.nPulvesAlerte)

        'Ajout dun pulve en bon   etat
        Dim oPulve As Pulverisateur
        oPulve = New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.controleEtat = Pulverisateur.controleEtatOK
        oPulve.dateProchainControle = DateAdd(DateInterval.Day, -1, DateTime.Today).ToShortDateString()
        PulverisateurManager.save(oPulve, oExploit, m_oAgent)

        'Lecture de la liste
        oCol = ExploitationManager.getListeExploitation(m_oAgent, DateTime.Today)
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual(1, oExploit.nPulvesAlerte)

        'Ajout d'un pulve en mauvais etat
        oPulve = New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.controleEtat = Pulverisateur.controleEtatNOKCV
        oPulve.dateProchainControle = DateAdd(DateInterval.Day, -1, DateTime.Today).ToShortDateString()
        PulverisateurManager.save(oPulve, oExploit, m_oAgent)

        'Lecture de la liste
        oCol = ExploitationManager.getListeExploitation(m_oAgent, DateTime.Today)
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual(2, oExploit.nPulvesAlerte)

        'Ajout d'un pulve en mauvais etat
        oPulve = New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.controleEtat = Pulverisateur.controleEtatNOKCV
        oPulve.dateProchainControle = DateAdd(DateInterval.Day, -1, DateTime.Today).ToShortDateString()
        PulverisateurManager.save(oPulve, oExploit, m_oAgent)

        'Lecture de la liste
        oCol = ExploitationManager.getListeExploitation(m_oAgent, DateTime.Today)
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual(3, oExploit.nPulvesAlerte)

    End Sub
    ''' <summary>
    ''' Test la Recherche D'exploitation sur critères Nom, Prenom, SIREN, RS
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub TST_SearchExploitation()
        Dim oExploit As Exploitation
        Dim oCol As List(Of Exploitation)
        'Suppression des Exploitations de la structure
        ExploitationManager.FTO_DBdelete(m_oAgent.uidStructure)

        'Création d'une exploit dans date de dernier controle
        oExploit = New Exploitation()
        oExploit.uidStructure = m_oAgent.uidStructure
        oExploit.nomExploitant = "ZZZ"

        ExploitationManager.save(oExploit, m_oAgent)
        'Création d'une exploit dans date de dernier controle
        oExploit = New Exploitation()
        oExploit.uidStructure = m_oAgent.uidStructure
        oExploit.nomExploitant = "NOMEXPL1"
        oExploit.prenomExploitant = "PRENOMEXPL1"
        oExploit.raisonSociale = "RSEXPL1"
        oExploit.numeroSiren = "444681605"
        ExploitationManager.save(oExploit, m_oAgent)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 4, "RIEN")
        Assert.AreEqual(0, oCol.Count)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 4, "NOMEXPL")
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual("NOMEXPL1", oExploit.nomExploitant)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 3, "RIEN")
        Assert.AreEqual(0, oCol.Count)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 3, "PREN")
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual("PRENOMEXPL1", oExploit.prenomExploitant)

        'Raison sociale
        oCol = ExploitationManager.searchExploitation(m_oAgent, 2, "RIEN")
        Assert.AreEqual(0, oCol.Count)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 2, "RS")
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual("RSEXPL1", oExploit.raisonSociale)
        'SIREN
        oCol = ExploitationManager.searchExploitation(m_oAgent, 1, "RIEN")
        Assert.AreEqual(0, oCol.Count)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 1, "444681605")
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual("444681605", oExploit.numeroSiren)

        'Tous
        oCol = ExploitationManager.searchExploitation(m_oAgent, 0, "RIEN")
        Assert.AreEqual(0, oCol.Count)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 0, "444681605")
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual("444681605", oExploit.numeroSiren)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 0, "RS")
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual("RSEXPL1", oExploit.raisonSociale)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 0, "PREN")
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual("PRENOMEXPL1", oExploit.prenomExploitant)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 0, "NOM")
        Assert.AreEqual(1, oCol.Count)
        oExploit = oCol(0)
        Assert.AreEqual("NOMEXPL1", oExploit.nomExploitant)
    End Sub
    ''' <summary>
    ''' Test la Recherche D'exploitation sur critères DateControle
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub TST_SearchExploitationDateControle()
        Dim oExploit As Exploitation
        Dim oCol As List(Of Exploitation)

        'Création d'une exploit dans date de dernier controle
        oExploit = New Exploitation()
        oExploit.uidStructure = m_oAgent.uidStructure
        oExploit.nomExploitant = "ZZZ"

        ExploitationManager.save(oExploit, m_oAgent)
        'Création d'une exploit dans date de dernier controle
        oExploit = New Exploitation()
        oExploit.uidStructure = m_oAgent.uidStructure
        oExploit.nomExploitant = "NOMEXPL1"
        oExploit.prenomExploitant = "PRENOMEXPL1"
        oExploit.raisonSociale = "RSEXPL1"
        oExploit.numeroSiren = "444681605"
        ExploitationManager.save(oExploit, m_oAgent)

        'Creation d'un diagnostique
        Dim oPulve As New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        PulverisateurManager.save(oPulve, oExploit, m_oAgent)

        Dim oDiag As New Diagnostic(m_oAgent, oPulve, oExploit)
        oDiag.id = DiagnosticManager.getNewId(m_oAgent)
        oDiag.controleDateDebut = CDate("06/02/1964").ToShortDateString()
        DiagnosticManager.save(oDiag)
        oCol = ExploitationManager.searchExploitation(m_oAgent, 5, "06/02/1965|06/02/1966")
        Assert.AreEqual(0, oCol.Count)
        oCol = ExploitationManager.searchExploitation(m_oAgent, 5, "06/02/1962|06/02/1963")
        Assert.AreEqual(0, oCol.Count)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 5, "06/01/1964|06/03/1964")
        Assert.AreEqual(1, oCol.Count)

        oCol = ExploitationManager.searchExploitation(m_oAgent, 5, "06/02/1964|06/02/1964")
        Assert.AreEqual(1, oCol.Count)

        oExploit = oCol(0)
        Assert.AreEqual("NOMEXPL1", oExploit.nomExploitant)
    End Sub
    ''' <summary>
    ''' Ce test vérifie que lors de la réception d'un nouveau client par WS , il est bien sauvegarder avec l'ID transmis
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()> _
    Public Sub TST_ReceptionNouveauClientWS()
        Dim oExploitation As Exploitation
        Dim strIdExploitation As String
        Dim strIdPulve1 As String
        Dim strIdpulve2 As String
        Dim strIdPulve3 As String

        'Création de l'exploitation
        oExploitation = New Exploitation()
        oExploitation.raisonSociale = "MONEXPLOITATION"
        oExploitation.codeApe = "12345"
        oExploitation.uidStructure = m_oAgent.uidStructure
        'On fixe arbitrairement les Ids pour simuler la création sur un autre poste
        strIdExploitation = m_oStructure.id & "-" & m_oAgent.id & "-8888"
        oExploitation.id = strIdExploitation
        ExploitationManager.save(oExploitation, m_oAgent)
        Assert.AreEqual(strIdExploitation, oExploitation.id)

        oExploitation = ExploitationManager.getExploitationById(strIdExploitation)

        'Création de 3 pulvé pour l'exploitation
        Dim oPulve As Pulverisateur
        oPulve = New Pulverisateur()
        'On fixe arbitrairement les Ids pour simuler la création sur un autre poste
        strIdPulve1 = m_oStructure.id & "-" & m_oAgent.id & "-8887"
        oPulve.id = strIdPulve1
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.marque = "PULVE1"
        PulverisateurManager.save(oPulve, oExploitation, m_oAgent)
        Assert.AreEqual(strIdPulve1, oPulve.id)

        'Création d'un second pulvé
        oPulve = New Pulverisateur()
        'On fixe arbitrairement les Ids pour simuler la création sur un autre poste
        strIdpulve2 = m_oStructure.id & "-" & m_oAgent.id & "-8888"
        oPulve.id = strIdpulve2
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.marque = "PULVE2"
        PulverisateurManager.save(oPulve, oExploitation, m_oAgent)
        Assert.AreEqual(strIdpulve2, oPulve.id)

        'Création d'un Troisième pulvé
        oPulve = New Pulverisateur()
        'On fixe arbitrairement les Ids pour simuler la création sur un autre poste
        strIdPulve3 = m_oStructure.id & "-" & m_oAgent.id & "-8886"
        oPulve.id = strIdPulve3
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.marque = "PULVE3"
        PulverisateurManager.save(oPulve, oExploitation, m_oAgent)
        Assert.AreEqual(strIdPulve3, oPulve.id)

        'Synchronisation "Manuelle" des exploitations, pulvérisateurs
        Dim updatedObject As New Object
        ExploitationManager.WSSend(oExploitation, updatedObject)

        Dim arrPulve As Pulverisateur()
        arrPulve = PulverisateurManager.getPulverisateurByClientId(strIdExploitation, "")
        Assert.AreEqual(3, arrPulve.Length)
        For Each oPulve In arrPulve
            PulverisateurManager.WSSend(oPulve, updatedObject)
        Next

        Dim lstEtP As List(Of ExploitationTOPulverisateur)
        lstEtP = ExploitationTOPulverisateurManager.getExploitationTOPulverisateurByExploitationId(strIdExploitation)
        For Each oEtP As ExploitationTOPulverisateur In lstEtP
            ExploitationTOPulverisateurManager.WSSend(oEtP, updatedObject)
        Next



        'Suppression des 3 pulvérisateurs et de l'exploitation
        arrPulve = PulverisateurManager.getPulverisateurByClientId(strIdExploitation, "")
        For Each oPulve In arrPulve
            PulverisateurManager.deletePulverisateurID(oPulve.id)
        Next
        'Suppression de l'exploitation 
        ExploitationManager.delete(oExploitation.id)

        'on Simule la date de dernière synchro de l'agent à -10 munites
        '======================================.ToShortDateString()
        m_oAgent.dateDerniereSynchro = CDate(oExploitation.dateModificationAgent).AddMinutes(-10).ToShortDateString()
        AgentManager.save(m_oAgent)
        Dim nRet As Integer
        nRet = CInt(AgentManager.WSSend(m_oAgent, updatedObject))
        Assert.IsTrue(nRet = 0 Or nRet = 2)


        'Demande au serveur la liste des objects à Synchroniser
        'Dim oLstSynchro As List(Of SynchronisationElmt)
        Dim oSynchro As New Synchronisation(m_oAgent)
        oSynchro.runDescSynchro()
        '        oLstSynchro = oSynchro.getListeElementsASynchroniserDESC(m_oAgent.oPCCourant, m_oAgent)
        '       Assert.AreNotEqual(0, oLstSynchro.Count)

        'Execution de la synchro descendante
        'For Each oSynchroElmnt In oLstSynchro
        'If oSynchroElmnt.type = "GetExploitation" Then
        '        oSynchroElmnt.SynchroDesc(m_oAgent)
        '    End If
        '    If oSynchroElmnt.type = "GetExploitationTOPulverisateur" Then
        '        oSynchroElmnt.SynchroDesc(m_oAgent)
        '    End If
        '    If oSynchroElmnt.type = "GetPulverisateur" Then
        '        oSynchroElmnt.SynchroDesc(m_oAgent)
        '    End If
        'Next oSynchroElmnt

        'Lecture du client
        oExploitation = ExploitationManager.getExploitationById(strIdExploitation)

        Assert.AreEqual(strIdExploitation, oExploitation.id)
        Assert.AreEqual(m_oAgent.uidStructure, oExploitation.uidStructure)
        Assert.AreEqual("12345", oExploitation.codeApe)
        Assert.AreEqual("MONEXPLOITATION", oExploitation.raisonSociale)

        'Lecture des Pulvé pour ce client => Lecture de ExploitationToPulverisateur

        arrPulve = PulverisateurManager.getPulverisateurByClientId(strIdExploitation, "")

        Assert.AreEqual(3, arrPulve.Length)

        For Each oPulve In arrPulve
            Assert.AreEqual(m_oAgent.uidStructure, oPulve.uidStructure)
            Assert.IsTrue(oPulve.marque.StartsWith("PULVE"))
            Assert.IsTrue(oPulve.id = strIdPulve1 Or oPulve.id = strIdpulve2 Or oPulve.id = strIdPulve3)
        Next
        oPulve = PulverisateurManager.getPulverisateurById(strIdPulve1)
        Assert.AreEqual(oPulve.id, strIdPulve1)
        oPulve = PulverisateurManager.getPulverisateurById(strIdpulve2)
        Assert.AreEqual(oPulve.id, strIdpulve2)
        oPulve = PulverisateurManager.getPulverisateurById(strIdPulve3)
        Assert.AreEqual(oPulve.id, strIdPulve3)


        'Suppression de l'exploitation 
        ExploitationManager.delete(oExploitation.id)
        'Suppression des pulverisateurs
        For Each oPulve In arrPulve
            PulverisateurManager.deletePulverisateur(oPulve)
        Next


    End Sub
    ''' <summary>
    ''' Test la Recherche D'exploitation sur numéro national de pulvé
    ''' </summary>
    ''' <remarks></remarks>
    <TestMethod()>
    Public Sub TST_SearchExploitationByPulveNumeroNational()
        Dim oExploit As Exploitation
        Dim olst As List(Of Exploitation)
        'Suppression des Exploitations de la structure
        ExploitationManager.FTO_DBdelete(m_oAgent.uidStructure)

        'Création d'une exploit dans date de dernier controle
        oExploit = New Exploitation()
        oExploit.uidStructure = m_oAgent.uidStructure
        oExploit.nomExploitant = "ZZZ"
        ExploitationManager.save(oExploit, m_oAgent)

        'Création d'un pulvérisateur dans cet exploitation
        Dim oPulve As Pulverisateur
        oPulve = New Pulverisateur()
        oPulve.uidStructure = m_oAgent.uidStructure
        oPulve.type = Pulverisateur.TYPEPULVE_VIGNE
        oPulve.categorie = Pulverisateur.CATEGORIEPULVE_FACEPARFACE
        oPulve.numeroNational = "E00TEST"
        PulverisateurManager.save(oPulve, oExploit, m_oAgent)

        Dim oExploit2 As Exploitation
        olst = ExploitationManager.searchExploitation(m_oAgent, 6, "E00TEST")
        Assert.IsNotNull(olst)
        Assert.AreEqual(1, olst.Count)
        oExploit2 = olst(0)
        Assert.IsNotNull(oExploit2)
        Assert.AreEqual(oExploit.id, oExploit2.id)
        Assert.AreEqual(oExploit.nomExploitant, oExploit2.nomExploitant)

        olst = ExploitationManager.searchExploitation(m_oAgent, 6, "E00TEST2")
        Assert.AreEqual(0, olst.Count)
    End Sub
    ''' <summary>
    ''' Test la liste des coPropriétaire d'un pulvé
    ''' </summary>
    <TestMethod()>
    Public Sub TST_GetListeExploitationByPulveId()
        Dim oExploit As Exploitation
        Dim oExploit2 As Exploitation
        Dim oPulve As Pulverisateur

        'Creation d'un pulve avec 2 coProp
        oExploit = createExploitation()
        oPulve = createPulve(oExploit)
        oExploit2 = createExploitation()
        oExploit2.raisonSociale = "CO PROP"
        ExploitationManager.save(oExploit2, m_oAgent)
        PulverisateurManager.save(oPulve, oExploit2, m_oAgent)

        Dim olst As List(Of Exploitation)
        olst = ExploitationManager.GetListExploitationByPulverisateurId(oPulve.id)
        Assert.AreEqual(2, olst.Count())
        Assert.IsTrue(olst(0).id = oExploit.id Or olst(0).id = oExploit2.id)
        Assert.IsTrue(olst(1).id = oExploit.id Or olst(1).id = oExploit2.id)





    End Sub

    '<TestMethod()>
    'Public Sub testGetNewId()
    '    Dim oExploit As Exploitation

    '    oExploit = createExploitation()
    '    ExploitationManager.save(oExploit, m_oAgent)
    '    oExploit = createExploitation()
    '    ExploitationManager.save(oExploit, m_oAgent)

    '    m_oAgent.oPool = New Pool()
    '    m_oAgent.oPool.idCRODIPPC = "12345"

    '    Dim str As String
    '    str = ExploitationManager.getNewId(m_oAgent)

    '    Assert.AreEqual(m_oStructure.idCrodip & "-" & m_oAgent.numeroNational & "-12345-1", str)

    '    m_oAgent.oPool.idCRODIPPC = "1119"
    '    str = ExploitationManager.getNewId(m_oAgent)
    '    Assert.AreEqual("8888-9999-1119-1", str)

    '    m_oAgent.oPool = Nothing
    '    str = ExploitationManager.getNewId(m_oAgent)
    '    Assert.AreEqual("498-1119-3", str)


    'End Sub


End Class
