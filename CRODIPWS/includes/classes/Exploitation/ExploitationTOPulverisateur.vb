Imports System.Web.Services
Imports System.Xml.Serialization

<Serializable(), XmlInclude(GetType(ExploitationTOPulverisateur))>
Public Class ExploitationTOPulverisateur
    Inherits root

    Private _id As String
    Private _idPulverisateur As String
    Private _idExploitation As String


    Sub New()
        isSupprimeCoProp = False

    End Sub
    Sub New(pExploitation As Exploitation, pPulve As Pulverisateur)
        idExploitation = pExploitation.id
        uidexploitation = pExploitation.uid
        nomExploitant = pExploitation.nomExploitant
        prenomExploitant = pExploitation.prenomExploitant
        codePostal = pExploitation.codePostal
        commune = pExploitation.commune
        raisonSociale = pExploitation.raisonSociale
        uidpulverisateur = pPulve.uid
        idPulverisateur = pPulve.id

        uidstructure = pPulve.uidstructure

        isSupprimeCoProp = False
    End Sub

    Public Property id() As String
        Get
            Return aid
        End Get
        Set(ByVal Value As String)
            aid = Value
        End Set
    End Property
    <XmlIgnore>
    Public Property idPulverisateur() As String
        Get
            Return aidpulverisateur
        End Get
        Set(ByVal Value As String)
            aidpulverisateur = Value
        End Set
    End Property
    <XmlIgnore>
    Public Property idExploitation() As String
        Get
            Return aidexploitation
        End Get
        Set(ByVal Value As String)
            aidexploitation = Value
        End Set
    End Property
    Public Property aidpulverisateur() As String
        Get
            Return _idPulverisateur
        End Get
        Set(ByVal Value As String)
            _idPulverisateur = Value
        End Set
    End Property

    Public Property aidexploitation() As String
        Get
            Return _idExploitation
        End Get
        Set(ByVal Value As String)
            _idExploitation = Value
        End Set
    End Property
    Private _uidPulverisateur As Integer
    <XmlElement("uidpulverisateur")>
    Public Property uidpulverisateurS() As String
        Get
            Return uidpulverisateur
        End Get
        Set(ByVal value As String)
            If Not String.IsNullOrEmpty(value) Then
                uidpulverisateur = value
            End If
        End Set
    End Property
    <XmlIgnore()>
    Public Property uidpulverisateur() As Integer
        Get
            Return _uidPulverisateur
        End Get
        Set(ByVal value As Integer)
            _uidPulverisateur = value
        End Set
    End Property
    Private _uidExploitation As Integer
    <XmlElement("uidexploitation")>
    Public Property uidexploitationS() As String
        Get
            Return uidexploitation
        End Get
        Set(ByVal value As String)
            If Not String.IsNullOrEmpty(value) Then
                uidexploitation = value
            End If
        End Set
    End Property
    <XmlIgnore()>
    Public Property uidexploitation() As Integer
        Get
            Return _uidExploitation
        End Get
        Set(ByVal value As Integer)
            _uidExploitation = value
        End Set
    End Property
    Private _uidstructure As Integer
    <XmlElement("uidstructure")>
    Public Property uidstructureS() As String
        Get
            Return uidstructure
        End Get
        Set(ByVal value As String)
            If Not String.IsNullOrEmpty(value) Then
                uidstructure = value
            End If
        End Set
    End Property
    <XmlIgnore()>
    Public Property uidstructure() As Integer
        Get
            Return _uidstructure
        End Get
        Set(ByVal value As Integer)
            _uidstructure = value
        End Set
    End Property
    Private _isSupprimeCoCprop As Boolean
    Public Property isSupprimeCoProp() As Boolean
        Get
            Return _isSupprimeCoCprop
        End Get
        Set(ByVal value As Boolean)
            _isSupprimeCoCprop = value
        End Set
    End Property
    Private _RaisonSociale As String
    <XmlIgnore>
    Public Property raisonSociale() As String
        Get
            Return _RaisonSociale
        End Get
        Set(ByVal value As String)
            _RaisonSociale = value
        End Set
    End Property
    Private _Nom As String
    <XmlIgnore>
    Public Property nomExploitant() As String
        Get
            Return _Nom
        End Get
        Set(ByVal value As String)
            _Nom = value
        End Set
    End Property
    Private _Prenom As String
    <XmlIgnore>
    Public Property prenomExploitant() As String
        Get
            Return _Prenom
        End Get
        Set(ByVal value As String)
            _Prenom = value
        End Set
    End Property
    Private _Commune As String
    <XmlIgnore>
    Public Property commune() As String
        Get
            Return _Commune
        End Get
        Set(ByVal value As String)
            _Commune = value
        End Set
    End Property
    Private _codePostal As String
    <XmlIgnore>
    Public Property codePostal() As String
        Get
            Return _codePostal
        End Get
        Set(ByVal value As String)
            _codePostal = value
        End Set
    End Property
    Public Overrides Function Fill(pName As String, pValue As Object) As Boolean
        Dim bReturn As Boolean = True
        If Not MyBase.Fill(pName, pValue) Then
            Select Case pName.ToUpper().Trim()
                Case "id".ToUpper().Trim()
                    Me.id = pValue.ToString()
                Case "idPulverisateur".ToUpper().Trim()
                    Me.idPulverisateur = pValue.ToString()
                Case "idExploitation".ToUpper().Trim()
                    Me.idExploitation = pValue.ToString()
                Case "isSupprimeCoProp".ToUpper().Trim()
                    Me.isSupprimeCoProp = pValue
                Case "uidexploitation".ToUpper().Trim()
                    Me.uidexploitation = pValue.ToString()
                Case "uidpulverisateur".ToUpper().Trim()
                    Me.uidpulverisateur = pValue.ToString()
                Case "uidstructure".ToUpper().Trim()
                    Me.uidstructure = pValue.ToString()
                Case Else
                    bReturn = False
            End Select
        End If
        Return bReturn
    End Function

End Class