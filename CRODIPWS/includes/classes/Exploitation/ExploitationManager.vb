Imports System.Collections.Generic
Imports System.Data.Common

Public Class ExploitationManager
    Inherits RootManager

#Region "Methodes Web Service"
    Public Shared Function WSgetById(ByVal p_uid As Integer, paid As String) As Exploitation
        Dim oreturn As Exploitation
        oreturn = RootWSGetById(Of Exploitation)(p_uid, paid)
        Return oreturn
    End Function

    Public Shared Function WSSend(ByVal pObjIn As Exploitation, ByRef pobjOut As Exploitation) As Integer
        Dim nreturn As Integer
        Try
            nreturn = RootWSSend(Of Exploitation)(pObjIn, pobjOut)
        Catch ex As Exception
            CSDebug.dispFatal("ExploitationManager.WSSend ERR : ", ex)
            nreturn = -1
        End Try
        Return nreturn
    End Function
    ''' <summary>
    ''' Recupére par les WS l'exploitation et le pulvérisateur à partir d'une référence de dignostic
    ''' Les elements sont sauvegardés en base
    ''' (utilisé par le gestionnaire)
    ''' </summary>
    ''' <param name="pAgent"></param>
    ''' <param name="paidDiag"></param>
    ''' <returns></returns>
    Public Shared Function WSgetExploitationPulverisateurByDiagnosticId(pAgent As Agent, puidDiag As Integer, ByVal paidDiag As String) As Exploitation
        Dim oExploit As Exploitation = Nothing
        Try
            Dim oDiag As Diagnostic
            oDiag = DiagnosticManager.WSgetById(pAgent.id, puidDiag, paidDiag)
            If oDiag IsNot Nothing Then
                oExploit = WSgetById(-1, oDiag.proprietaireId)

                'Chargement de la structure si elle n'existe pas
                Dim oStructure As [Structure]
                oStructure = StructureManager.getStructureById(oExploit.idStructure)
                If oStructure.id <> oExploit.idStructure Then
                    oStructure = StructureManager.WSgetById(-1, oExploit.idStructure)
                    If oStructure.id = oExploit.idStructure Then
                        StructureManager.save(oStructure, True)
                    End If
                End If

                save(oExploit, pAgent)

                Dim oPulve As Pulverisateur
                oPulve = PulverisateurManager.WSgetById(-1, oDiag.pulverisateurId)
                PulverisateurManager.save(oPulve, oExploit, pAgent)
            End If
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.WSgetExploitationPulverisateurByDiagnosticId ERR", ex)
            Return Nothing
        End Try
        Return oExploit

    End Function


    'Public Shared Function getWSExploitationById(pAgent As Agent, ByVal pmanometre_uid As Integer) As Exploitation
    '    Dim oreturn As Exploitation
    '    oreturn = getWSByKey(Of Exploitation)(pmanometre_uid, "")
    '    Return oreturn
    'End Function

    'Public Shared Function SendWSExploitation(pAgent As Agent, ByVal pobj As Exploitation, ByRef pReturn As Exploitation) As Integer
    '    Dim nreturn As Integer
    '    Try
    '        nreturn = SendWS(Of Exploitation)(pobj, pReturn)

    '    Catch ex As Exception
    '        CSDebug.dispFatal("sendWSExploitation : " & ex.Message)
    '        nreturn = -1
    '    End Try
    '    Return nreturn
    'End Function
#End Region

#Region "Methodes acces Local"
    ''' <summary>
    ''' Rend l iste des exploitations
    ''' 1° les exploitations sans date de derniercontrole
    ''' 2° les exploitations triés par date de ernier contole en odre croissant
    ''' </summary>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function getListeExploitation(pAgent As Agent, ByVal pDateLimite As Date) As List(Of Exploitation)
        Dim oCol As New List(Of Exploitation)
        Dim oCsDb As New CSDb(True)
        Dim strSQL As String
        Try
            Dim oCmd As DbCommand
            Dim oReader As DbDataReader
            oCmd = oCsDb.getConnection().CreateCommand()
            ''1) Les clients sans date de dernier controle classé par ordre décroissant de date de dernière modif
            '' les dernirs créés en premier
            strSQL = "SELECT *, 0 as nPulvesAlerte " &
                " FROM EXPLOITATION "
            strSQL = strSQL & " WHERE "
            If CSDb._DBTYPE <> CSDb.EnumDBTYPE.SQLITE Then
                strSQL = strSQL & " (DATEDERNIERCONTROLE IS NULL OR DATEDERNIERCONTROLE = CDATE(" & ControlChars.Quote & "00:00:00" & ControlChars.Quote & ")) AND "
            Else
                strSQL = strSQL & " (DATEDERNIERCONTROLE IS NULL ) AND "
            End If
            strSQL = strSQL & " idStructure = " & pAgent.uidStructure
            strSQL = strSQL & " ORDER BY DATEMODIFICATIONAGENT DESC"
            oCmd.CommandText = strSQL
            ''       Dim strSQL As String = "SELECT count(*) " & _
            ''" FROM ExploitationTOPulverisateur, pulverisateur" & _
            ''" WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " & _
            ''" Pulverisateur.DateProchainControle >= " & pDate.ToString("d") & " AND " & _
            ''" idExploitation = " & ControlChars.Quote & pidExploitation & ControlChars.Quote

            oReader = oCmd.ExecuteReader()
            While oReader.Read()
                Dim oExploit As New Exploitation()
                Dim tmpColId As Integer = 0
                While tmpColId < oReader.FieldCount()
                    If Not oReader.IsDBNull(tmpColId) Then
                        oExploit.Fill(oReader.GetName(tmpColId), oReader.Item(tmpColId))
                    End If
                    tmpColId = tmpColId + 1
                End While
                setnbPulveEnAlerte(oCsDb, oExploit)
                oCol.Add(oExploit)
            End While
            oReader.Close()
            '2) Les clients avec date de dernier controle classé par ordre croissant de date de dernièr controle
            strSQL = "SELECT * FROM EXPLOITATION "
            strSQL = strSQL & " Where "
            strSQL = strSQL & " idStructure = " & pAgent.uidstructure
            If CSDb._DBTYPE <> CSDb.EnumDBTYPE.SQLITE Then
                strSQL = strSQL & " AND  (DATEDERNIERCONTROLE IS NOT NULL AND DATEDERNIERCONTROLE <> CDATE(" & ControlChars.Quote & "00:00:00" & ControlChars.Quote & "))  "
            Else
                strSQL = strSQL & " AND (DATEDERNIERCONTROLE IS Not NULL ) "
            End If
            strSQL = strSQL & " ORDER BY DATEDERNIERCONTROLE ASC"
            oCmd.CommandText = strSQL
            oReader = oCmd.ExecuteReader()
            While oReader.Read()
                Dim oExploit As New Exploitation()
                Dim tmpColId As Integer = 0
                While tmpColId < oReader.FieldCount()
                    If Not oReader.IsDBNull(tmpColId) Then
                        oExploit.Fill(oReader.GetName(tmpColId), oReader.Item(tmpColId))
                    End If
                    tmpColId = tmpColId + 1
                End While
                setnbPulveEnAlerte(oCsDb, oExploit)
                oCol.Add(oExploit)
            End While
            oReader.Close()

        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.getListeExploitation ERR : " & ex.Message)
            oCol.Clear()
        End Try
        oCsDb.free()
        Return oCol
    End Function
    ''' <summary>
    ''' Met à jout d'attribut nbPulveEnAlerte pour une exploitation
    ''' </summary>
    ''' <param name="poExploit"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function setnbPulveEnAlerte(oCSDB As CSDb, poExploit As Exploitation) As Boolean
        Debug.Assert(poExploit IsNot Nothing)
        Debug.Assert(Not String.IsNullOrEmpty(poExploit.id))
        Dim bReturn As Boolean
        ' Dim oCsDb As New CSDb(True)
        Dim oCmd As DbCommand
        Dim oReader As DbDataReader

        Try
            'Calcul du nombre de Pulve NOK ou qui ont une date de prochain controle < Aujourd'hui
            Dim strSQL As String
            strSQL = " SELECT count(*) as nPulvesAlerte,  MIN(dateprochaincontrole) as MinDateProchainControle" &
                     " FROM ExploitationTOPulverisateur, pulverisateur" &
                     " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND NOT isSupprimeCoProp AND " &
                     " (Pulverisateur.ControleEtat <>'1' OR Pulverisateur.dateprochaincontrole is NULL OR Pulverisateur.dateprochaincontrole < DATE())  AND " &
                     " idExploitation = '" & poExploit.id & "'"
            oCmd = oCSDB.getConnection().CreateCommand()
            oCmd.CommandText = strSQL
            oReader = oCmd.ExecuteReader()
            If oReader.HasRows Then
                oReader.Read()
                Dim tmpColId As Integer = 0
                While tmpColId < oReader.FieldCount()
                    If Not oReader.IsDBNull(tmpColId) Then
                        poExploit.Fill(oReader.GetName(tmpColId), oReader.Item(tmpColId))
                    End If
                    tmpColId = tmpColId + 1
                End While
            End If
            oReader.Close()
            If poExploit.nPulvesAlerte > 0 Then
                ''Calcul de la 
                'strSQL = "SELECT MIN(dateprochaincontrole) as DateProchainControle" &
                '     " FROM ExploitationTOPulverisateur, pulverisateur" &
                '     " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " &
                '     " (Pulverisateur.dateprochaincontrole is NOT NULL AND Pulverisateur.dateprochaincontrole < NOW) AND " &
                '     " idExploitation = '" & poExploit.id & "'"
            Else
                strSQL = "SELECT MIN(dateprochaincontrole) as MinDateProchainControle" &
                     " FROM ExploitationTOPulverisateur, pulverisateur" &
                     " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND Not isSupprimeCoProp AND " &
                     " idExploitation = '" & poExploit.id & "'"

                oCmd = oCSDB.getConnection().CreateCommand()
                oCmd.CommandText = strSQL
                oReader = oCmd.ExecuteReader()
                If oReader.HasRows Then
                    oReader.Read()
                    Dim tmpColId As Integer = 0
                    While tmpColId < oReader.FieldCount()
                        If Not oReader.IsDBNull(tmpColId) Then
                            poExploit.Fill(oReader.GetName(tmpColId), oReader.Item(tmpColId))
                        End If
                        tmpColId = tmpColId + 1
                    End While
                End If
                oReader.Close()
            End If
            'oCsDb.free()
            bReturn = True
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.setnbPulveEnAlerte ERR : " & ex.Message)
            bReturn = False
        End Try

        'oCsDb.free()
    End Function


    'Ancienne Version 
    'Public Shared Function getListeExploitationOLD(pAgent As Agent, ByVal pDateLimite As Date) As List(Of Exploitation)
    '    Dim oCol As New List(Of Exploitation)
    '    Dim oCsDb As New CSDb(True)
    '    Dim strSQL As String
    '    Try
    '        Dim oCmd As DbCommand
    '        Dim oReader As DbDataReader
    '        oCmd = oCsDb.getConnection().CreateCommand()
    '        '1) Les clients sans date de dernier controle classé par ordre décroissant de date de dernière modif
    '        ' les dernirs créés en premier
    '        strSQL = "SELECT *, " & _
    '            " (SELECT count(*) " & _
    '                 " FROM ExploitationTOPulverisateur, pulverisateur" & _
    '                 " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " & _
    '                 " Pulverisateur.DateProchainControle <= #" & pDateLimite.ToString("d") & "# AND " & _
    '                 " idExploitation = EXPLOITATION.ID ) as nPulvesAlerte " & _
    '            " FROM EXPLOITATION "
    '        strSQL = strSQL & " WHERE "
    '        strSQL = strSQL & " (DATEDERNIERCONTROLE IS NULL OR DATEDERNIERCONTROLE = CDATE(" & ControlChars.Quote & "00:00:00" & ControlChars.Quote & ")) "
    '        strSQL = strSQL & " AND idStructure = " & pAgent.idStructure
    '        strSQL = strSQL & " ORDER BY DATEMODIFICATIONAGENT DESC"
    '        oCmd.CommandText = strSQL
    '        '       Dim strSQL As String = "SELECT count(*) " & _
    '        '" FROM ExploitationTOPulverisateur, pulverisateur" & _
    '        '" WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " & _
    '        '" Pulverisateur.DateProchainControle >= " & pDate.ToString("d") & " AND " & _
    '        '" idExploitation = " & ControlChars.Quote & pidExploitation & ControlChars.Quote

    '        oReader = oCmd.ExecuteReader()
    '        While oReader.Read()
    '            Dim oExploit As New Exploitation()
    '            ' On rempli notre tableau
    '            Dim tmpColId As Integer = 0
    '            While tmpColId < oReader.FieldCount()
    '                FillExploitation(oExploit, oReader, tmpColId)
    '                tmpColId = tmpColId + 1
    '            End While
    '            CSDebug.dispInfo(oExploit.id)
    '            oCol.Add(oExploit)
    '        End While
    '        oReader.Close()
    '        '2) Les clients avec date de dernier controle classé par ordre croissant de date de dernièr controle
    '        strSQL = "SELECT *, " & _
    '            " (SELECT count(*) " & _
    '                 " FROM ExploitationTOPulverisateur, pulverisateur" & _
    '                 " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND " & _
    '                 " Pulverisateur.DateProchainControle <= #" & pDateLimite.ToString("d") & "# AND " & _
    '                 " idExploitation = EXPLOITATION.ID ) as nPulvesAlerte " & _
    '            "FROM EXPLOITATION "
    '        strSQL = strSQL & " Where "
    '        strSQL = strSQL & " (DATEDERNIERCONTROLE IS NOT NULL AND DATEDERNIERCONTROLE <> CDATE(" & ControlChars.Quote & "00:00:00" & ControlChars.Quote & ")) "
    '        strSQL = strSQL & " AND idStructure = " & pAgent.idStructure
    '        strSQL = strSQL & " ORDER BY DATEDERNIERCONTROLE ASC"
    '        oCmd.CommandText = strSQL
    '        oReader = oCmd.ExecuteReader()
    '        While oReader.Read()
    '            Dim oExploit As New Exploitation()
    '            ' On rempli notre tableau
    '            Dim tmpColId As Integer = 0
    '            While tmpColId < oReader.FieldCount()
    '                FillExploitation(oExploit, oReader, tmpColId)
    '                tmpColId = tmpColId + 1
    '            End While
    '            oCol.Add(oExploit)
    '        End While
    '        oReader.Close()

    '    Catch ex As Exception
    '        dispError("ExploitationManager.getListeExploitation ERR : " & ex.Message)
    '        oCol.Clear()
    '    End Try
    '    oCsDb.free()
    '    Return oCol
    'End Function


    Public Shared Function getExploitationById(ByVal pId As String) As Exploitation
        ' déclarations
        Dim oExploit As New Exploitation
        If pId <> "" Then

            Dim bdd As New CSDb(True)
            Try
                ' On récupère les résultats
                Dim oDataReader As DbDataReader = bdd.getResult2s("SELECT * FROM Exploitation WHERE Exploitation.id='" & pId & "'")
                If oDataReader.HasRows() Then
                    oDataReader.Read()
                    ' On rempli notre tableau
                    Dim tmpColId As Integer = 0
                    While tmpColId < oDataReader.FieldCount()
                        If Not oDataReader.IsDBNull(tmpColId) Then
                            oExploit.Fill(oDataReader.GetName(tmpColId), oDataReader.Item(tmpColId))
                        End If
                        tmpColId = tmpColId + 1
                    End While
                    setnbPulveEnAlerte(bdd, oExploit)
                End If
                oDataReader.Close()
            Catch ex As Exception ' On intercepte l'erreur
                CSDebug.dispError("ExploitationManager - getbyid : ERR", ex)
            End Try

            bdd.free()

        End If
        'on retourne le client ou un objet vide en cas d'erreur
        Return oExploit
    End Function
    ''' <summary>
    ''' Récupération de l'exploitation à partir d'un numéro de Pulvé
    ''' </summary>
    ''' <param name="pPulveId"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function GetExploitationByPulverisateurId(pPulveId As String) As Exploitation
        Dim oLst As List(Of Exploitation)
        Dim oReturn As Exploitation
        Try
            oLst = GetListExploitationByPulverisateurId(pPulveId)
            If oLst.Count() > 0 Then
                oReturn = oLst(0)
            Else
                oReturn = New Exploitation()
            End If

        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.GetExploitationByPulverisateurId ERR" & ex.Message)
            oReturn = New Exploitation()
        End Try
        Return oReturn
    End Function

    Public Shared Function GetListExploitationByPulverisateurId(pPulveId As String, Optional pTous As Boolean = False) As List(Of Exploitation)
        Dim oReturn As New List(Of Exploitation)
        Dim CSDb As New CSDb(True)
        Try
            Dim query As String = "SELECT Exploitation.* FROM ExploitationTOPulverisateur INNER JOIN Exploitation ON ExploitationTOPulverisateur.idExploitation = Exploitation.id WHERE ExploitationTOPulverisateur.idPulverisateur = '" & pPulveId & "'"
            If pTous = False Then
                query = query & " and NOT isSupprimeCoProp "
            End If
            Dim oDataReader As DbDataReader = CSDb.getResult2s(query)
            While oDataReader.Read()
                Dim tmpColId As Integer = 0
                Dim oExploit As New Exploitation()
                While tmpColId < oDataReader.FieldCount()
                    If Not oDataReader.IsDBNull(tmpColId) Then
                        oExploit.Fill(oDataReader.GetName(tmpColId), oDataReader.Item(tmpColId))
                    End If
                    tmpColId = tmpColId + 1
                End While
                setnbPulveEnAlerte(CSDb, oExploit)
                oReturn.Add(oExploit)
            End While
            oDataReader.Close()
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.GetListExploitationByPulverisateurId ERR", ex)
            oReturn.Clear()
        End Try

        If CSDb IsNot Nothing Then
            CSDb.free()
        End If
        Return oReturn
    End Function
    ''' <summary>
    ''' Rend la liste des Exploitations d'un pulverisateur à partir de son numéro nationnal
    ''' </summary>
    ''' <param name="pNumeroNational"></param>
    ''' <returns></returns>
    Public Shared Function GetListExploitationByPulverisateurNumeroNational(pNumeroNational As String) As List(Of Exploitation)
        Dim oReturn As New List(Of Exploitation)
        Dim CSDb As New CSDb(True)
        Try
            Dim query As String = "SELECT Exploitation.* FROM ExploitationTOPulverisateur INNER JOIN Exploitation ON ExploitationTOPulverisateur.idExploitation = Exploitation.id INNER JOIN Pulverisateur ON ExploitationTOPulverisateur.idPulverisateur = Pulverisateur.id WHERE Pulverisateur.numeroNational = '" & pNumeroNational & "'"
            query = query & " and NOT isSupprimeCoProp "

            Dim oDataReader As DbDataReader = CSDb.getResult2s(query)
            While oDataReader.Read()
                Dim tmpColId As Integer = 0
                Dim oExploit As New Exploitation()
                While tmpColId < oDataReader.FieldCount()
                    If Not oDataReader.IsDBNull(tmpColId) Then
                        oExploit.Fill(oDataReader.GetName(tmpColId), oDataReader.Item(tmpColId))
                    End If
                    tmpColId = tmpColId + 1
                End While
                setnbPulveEnAlerte(CSDb, oExploit)
                oReturn.Add(oExploit)
            End While
            oDataReader.Close()
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.GetListExploitationByPulverisateurNumeroNational ERR", ex)
            oReturn.Clear()
        End Try

        If CSDb IsNot Nothing Then
            CSDb.free()
        End If
        Return oReturn
    End Function
    'Retourne la liste des diagnostic en attente de contre visite
    Public Shared Function getDiagnosticCV(ByVal exploitationNumeroSiren As String) As Diagnostic()
        ' Déclaration
        Dim arrDiagnostic(0) As Diagnostic
        Dim oCSDB As New CSDb(True)

        If exploitationNumeroSiren <> "" Then

            Dim bddCommande As DbCommand = oCSDB.getConnection().CreateCommand()
            bddCommande.CommandText = "SELECT * FROM Diagnostic WHERE Diagnostic.controleEtat='0' AND Diagnostic.proprietaireNumeroSiren='" & exploitationNumeroSiren & "'"
            Try
                ' On récupère les résultats
                Dim tmpListProfils As DbDataReader = bddCommande.ExecuteReader
                ' Puis on les parcours
                Dim i As Integer = 0
                While tmpListProfils.Read()
                    ' On rempli notre tableau
                    Dim tmpDiagnostic As New Diagnostic
                    Dim tmpColId As Integer = 0
                    While tmpColId < tmpListProfils.FieldCount()
                        If Not tmpListProfils.IsDBNull(tmpColId) Then
                            tmpDiagnostic.Fill(tmpListProfils.GetName(tmpColId), tmpListProfils.Item(tmpColId))
                        End If
                        tmpColId = tmpColId + 1
                    End While
                    arrDiagnostic(i) = tmpDiagnostic
                    i = i + 1
                    ReDim Preserve arrDiagnostic(i)
                End While
                tmpListProfils.Close()
                ReDim Preserve arrDiagnostic(i - 1)
            Catch ex As Exception ' On intercepte l'erreur
                CSDebug.dispError("ClientManager - getDiagnosticCV : " & ex.Message)
            End Try

            ' Test pour fermeture de connection BDD
            If Not oCSDB Is Nothing Then
                ' On ferme la connexion
                oCSDB.free()
            End If

        End If
        Return arrDiagnostic
    End Function

    'Recherche si un client est en alerte
    ' il est en alerte si l'un de ces pulvé a dépassé la date de prochain controle 

    Public Shared Function isClientAlerte(ByVal pidExploitation As String, ByVal pDate As Date) As Boolean
        Dim oCsdb As CSDb = Nothing
        Dim bReturn As Boolean
        Try
            bReturn = True
            If pidExploitation <> "" Then
                oCsdb = New CSDb(True)
                Dim bddCommande As DbCommand
                bddCommande = oCsdb.getConnection().CreateCommand
                'Dim strSQL As String = "SELECT count(*) " & _
                '    " FROM (diagnostic INNER JOIN ExploitationTOPulverisateur ON diagnostic.pulverisateurId = ExploitationTOPulverisateur.idPulverisateur) " & _
                '    " WHERE (Diagnostic.controleEtat='0' and Diagnostic.proprietaireNumeroSiren='" & tmpClient_SIREN & "'" & _
                '    " and ((diagnostic.controleDateFin)=(SELECT  MAX(D.controleDateFin) " & _
                '    " FROM Diagnostic D " & _
                '    " WHERE D.PulverisateurId = Diagnostic.Pulverisateurid)))"

                Dim strSQL As String = "SELECT count(*) " &
                    " FROM ExploitationTOPulverisateur, pulverisateur" &
                    " WHERE ExploitationToPulverisateur.idPulverisateur = Pulverisateur.id AND Not isSupprimeCoProp AND " &
                    " Pulverisateur.DateProchainControle >= " & pDate.ToString("d") & " AND " &
                    " idExploitation = " & ControlChars.Quote & pidExploitation & ControlChars.Quote

                bddCommande.CommandText = strSQL
                ' On récupère les résultats
                Dim oReader As DbDataReader = bddCommande.ExecuteReader
                Dim tmpReturn As String = ""
                While oReader.Read()
                    tmpReturn = oReader.Item(0).ToString()
                End While
                oReader.Close()
                If (String.IsNullOrEmpty(tmpReturn) Or tmpReturn = "0") Then
                    bReturn = False
                Else
                    bReturn = True
                End If
                oCsdb.free()
            End If
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.isClientAlerte ERR:" & ex.Message)
            bReturn = False
        End Try
        If oCsdb IsNot Nothing Then
            oCsdb.free()
        End If
        Return bReturn

    End Function

    Private Shared Sub createClient(ByVal client_id As String)
        Dim oCSDB As New CSDb(True)
        If client_id <> "0" Then
            Try
                Dim bddCommande As DbCommand
                bddCommande = oCSDB.getConnection().CreateCommand()

                ' Création
                bddCommande.CommandText = "INSERT INTO Exploitation (id) VALUES ('" & client_id & "')"
                bddCommande.ExecuteNonQuery()

                ' Test pour fermeture de connection BDD
                If oCSDB IsNot Nothing Then
                    ' On ferme la connexion
                    oCSDB.free()
                End If
            Catch ex As Exception
                CSDebug.dispFatal("ExploitationManager - createClient : " & ex.Message)
            End Try
        End If
    End Sub
    Public Shared Function getNewId(pAgent As Agent) As String
        If pAgent.oPCcourant IsNot Nothing Then
            Return getNewIdNew(pAgent)
        Else
            Return getNewIdOLD(pAgent)
        End If
    End Function

    Private Shared Function getNewIdNew(pAgent As Agent) As String
        Debug.Assert(Not pAgent Is Nothing, "L'agent doit être renseigné")
        Debug.Assert(pAgent.id <> 0, "L'agent id doit être renseigné")
        Debug.Assert(pAgent.uidstructure <> 0, "La structure id doit être renseignée")
        ' déclarations
        Dim idCrodipStructure As String = StructureManager.getStructureById(pAgent.uidstructure).idCrodip
        Dim idPC As String
        idPC = pAgent.oPCcourant.numeroNational

        Dim Racine As String = idCrodipStructure & "-" & pAgent.numeroNational & "-" & idPC & "-"
        Dim nIndex As Integer = 1

        If pAgent.uidstructure <> 0 Then

            ' On test si la table est vide

            Dim oCSDb As New CSDb(True)
            Dim res As Object = oCSDb.getValue("SELECT MAX(CAST (REPLACE(Id,'" & Racine & "','') as INT)) as ID  from Exploitation where id Like '" & Racine & "%'")
            oCSDb.free()
            If TypeOf res IsNot DBNull Then
                nIndex = CInt(res) + 1
            End If
        End If

        'on retourne le nouvel id
        Return Racine & nIndex
    End Function

    Private Shared Function getNewIdOLD(ByVal pAgent As Agent) As String
        Debug.Assert(pAgent.id <> 0, "IdAgent doit être renseigné")
        Debug.Assert(pAgent.uidstructure <> 0, "IdStructure doit être renseigné")
        ' déclarations
        Dim tmpClientId As String = pAgent.uidstructure & "-" & pAgent.id & "-1"

        Dim bddCommande As DbCommand
        Dim oCSDb As New CSDb(True)
        bddCommande = oCSDb.getConnection().CreateCommand()

        bddCommande.CommandText = "SELECT id FROM Exploitation WHERE id LIKE '" & pAgent.uidstructure & "-" & pAgent.id & "-%' ORDER BY id DESC"
        Try
            ' On récupère les résultats
            Dim tmpListProfils As DbDataReader = bddCommande.ExecuteReader
            ' Puis on les parcours
            Dim newId As Integer = 0
            While tmpListProfils.Read()
                ' On récupère le dernier ID
                Dim tmpId As Integer = 0
                tmpClientId = tmpListProfils.Item(0).ToString
                tmpId = CInt(tmpClientId.Replace(pAgent.uidstructure & "-" & pAgent.id & "-", ""))
                If tmpId > newId Then
                    newId = tmpId
                End If
            End While
            tmpClientId = pAgent.uidstructure & "-" & pAgent.id & "-" & (newId + 1)
        Catch ex As Exception ' On intercepte l'erreur
            CSDebug.dispFatal("ClientManager - newId : " & ex.Message)
        End Try

        ' Test pour fermeture de connection BDD
        If oCSDb IsNot Nothing Then
            ' On ferme la connexion
            oCSDb.free()
        End If

        'on retourne le nouvel id
        Return tmpClientId
    End Function

    Public Shared Function save(ByVal pExploit As Exploitation, ByVal pAgent As Agent, Optional bSyncro As Boolean = False) As Boolean
        Dim oCsdb As CSDb = Nothing
        Dim bReturn As Boolean
        Try


            ' On test si le client existe ou non
            Dim existsClient As Object
            existsClient = ExploitationManager.getExploitationById(pExploit.id)
            If existsClient.id = "" Or existsClient.id = "0" Then
                ' Si il n'existe pas, on le crée
                'createClient(objClient.idCrodip)
                If String.IsNullOrEmpty(pExploit.id) Or pExploit.id = "0" Then
                    'Affectation des id pour un nouveau client
                    pExploit.id = getNewId(pAgent)
                    pExploit.idStructure = pAgent.uidstructure
                End If
                createClient(pExploit.id)
            End If


            Dim paramsQuery As String

            paramsQuery = "id='" & pExploit.id & "'"
            ' Mise a jour de la date de derniere modification
            If Not bSyncro Then
                pExploit.dateModificationAgent = CSDate.ToCRODIPString(Date.Now).ToString
            End If
            paramsQuery = paramsQuery & " , idStructure=" & pExploit.idStructure & ""
            If Not pExploit.numeroSiren Is Nothing Then
                paramsQuery = paramsQuery & " , numeroSiren='" & CSDb.secureString(pExploit.numeroSiren) & "'"
            End If
            If Not pExploit.codeApe Is Nothing Then
                paramsQuery = paramsQuery & " , codeApe='" & CSDb.secureString(pExploit.codeApe) & "'"
            End If
            If Not pExploit.raisonSociale Is Nothing Then
                paramsQuery = paramsQuery & " , raisonSociale='" & CSDb.secureString(pExploit.raisonSociale) & "'"
            End If
            paramsQuery = paramsQuery & " , nombreExploitant=" & pExploit.nombreExploitant & ""
            If Not pExploit.nomExploitant Is Nothing Then
                paramsQuery = paramsQuery & " , nomExploitant='" & CSDb.secureString(pExploit.nomExploitant) & "'"
            End If
            If Not pExploit.prenomExploitant Is Nothing Then
                paramsQuery = paramsQuery & " , prenomExploitant='" & CSDb.secureString(pExploit.prenomExploitant) & "'"
            End If
            If Not pExploit.adresse Is Nothing Then
                paramsQuery = paramsQuery & " , adresse='" & CSDb.secureString(pExploit.adresse) & "'"
            End If
            If Not pExploit.codePostal Is Nothing Then
                paramsQuery = paramsQuery & " , codePostal='" & CSDb.secureString(pExploit.codePostal) & "'"
            End If
            If Not pExploit.commune Is Nothing Then
                paramsQuery = paramsQuery & " , commune='" & CSDb.secureString(pExploit.commune) & "'"
            End If
            If Not pExploit.codeInsee Is Nothing Then
                paramsQuery = paramsQuery & " , codeInsee='" & CSDb.secureString(pExploit.codeInsee) & "'"
            End If
            If Not pExploit.telephoneFixe Is Nothing Then
                paramsQuery = paramsQuery & " , telephoneFixe='" & CSDb.secureString(pExploit.telephoneFixe) & "'"
            End If
            If Not pExploit.telephonePortable Is Nothing Then
                paramsQuery = paramsQuery & " , telephonePortable='" & CSDb.secureString(pExploit.telephonePortable) & "'"
            End If
            If Not pExploit.telephoneFax Is Nothing Then
                paramsQuery = paramsQuery & " , telephoneFax='" & CSDb.secureString(pExploit.telephoneFax) & "'"
            End If
            If Not pExploit.eMail Is Nothing Then
                paramsQuery = paramsQuery & " , eMail='" & CSDb.secureString(pExploit.eMail) & "'"
            End If
            If Not pExploit.surfaceAgricoleUtile Is Nothing Then
                paramsQuery = paramsQuery & " , surfaceAgricoleUtile='" & CSDb.secureString(pExploit.surfaceAgricoleUtile) & "'"
            End If

            paramsQuery = paramsQuery & " , isProdGrandeCulture=" & CSDb.secureString(pExploit.isProdGrandeCulture) & ""
            paramsQuery = paramsQuery & " , isProdElevage=" & CSDb.secureString(pExploit.isProdElevage) & ""
            paramsQuery = paramsQuery & " , isProdArboriculture=" & CSDb.secureString(pExploit.isProdArboriculture) & ""
            paramsQuery = paramsQuery & " , isProdLegume=" & CSDb.secureString(pExploit.isProdLegume) & ""
            paramsQuery = paramsQuery & " , isProdViticulture=" & CSDb.secureString(pExploit.isProdViticulture) & ""
            paramsQuery = paramsQuery & " , isProdAutre=" & CSDb.secureString(pExploit.isProdAutre) & ""
            If Not pExploit.productionAutre Is Nothing And pExploit.productionAutre <> "" Then
                paramsQuery = paramsQuery & " , productionAutre='" & CSDb.secureString(pExploit.productionAutre) & "'"
            End If

            paramsQuery = paramsQuery & " , isSupprime=" & CSDb.secureString(pExploit.isSupprime) & ""
            If Not pExploit.dateDernierControle Is Nothing And pExploit.dateDernierControle <> "" Then
                paramsQuery = paramsQuery & " , dateDernierControle='" & CSDate.ToCRODIPString((pExploit.dateDernierControle)) & "'"
            End If

            paramsQuery = paramsQuery & pExploit.getRootQuery()

            If pExploit.uidstructure > 0 Then
                paramsQuery = paramsQuery & " , uidstructure=" & pExploit.uidstructure & ""
            End If

            oCsdb = New CSDb(True)
            Dim bddCommande As DbCommand
            bddCommande = oCsdb.getConnection().CreateCommand()
            bddCommande.CommandText = "UPDATE Exploitation SET " & paramsQuery & " WHERE id='" & CSDb.secureString(pExploit.id) & "'"
            bddCommande.ExecuteNonQuery()
            bReturn = True
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.save ERR : ", ex)
            bReturn = False
        End Try
        If Not oCsdb Is Nothing Then
            oCsdb.free()
        End If
        Return bReturn
    End Function
    Public Shared Function UpdateExploitToPulve(ByVal pExploit As Exploitation) As Boolean
        Dim oCsdb As CSDb = Nothing
        Dim bReturn As Boolean = False

        Try

            Dim query As String
            Dim Paramsquery As String
            oCsdb = New CSDb(True)
            'MISE A JOUR DE EXPLOITATIONTOPULVERISATEUR
            Paramsquery = "uidexploitation = " & pExploit.uid
            Paramsquery = Paramsquery & ", dateModificationAgent = '" & CSDate.ToCRODIPString(DateTime.Now) & "'"
            query = "UPDATE ExploitationToPulverisateur SET " & Paramsquery & " WHERE (uidexploitation =0 or uidexploitation is null ) and idExploitation = '" & pExploit.id & "'"
            bReturn = oCsdb.Execute(query)
            If Not bReturn Then
                CSDebug.dispError("ExploitationManager.UpdatePulveDiag ERR EX1")
            End If
            'MISE A JOUR DE DIAGNOSTIC déportée avant la synchro montante
            'Paramsquery = "uidexploitation = " & pExploit.uid
            'Paramsquery = Paramsquery & ", dateModificationAgent = '" & CSDate.ToCRODIPString(DateTime.Now) & "'"
            'query = "UPDATE Diagnostic SET " & Paramsquery & " WHERE (uidexploitation =0 or uidexploitation is Null) and proprietaireId = '" & pExploit.id & "'"

            'bReturn = oCsdb.Execute(query)
            If Not bReturn Then
                CSDebug.dispError("ExploitationManager.UpdatePulveDiag ERR EX2")
            End If
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.UpdatePulveDiag ERR : ", ex)
            bReturn = False
        End Try
        Return bReturn
    End Function

    Public Shared Sub setSynchro(ByVal objClient As Exploitation)
        Try
            Dim dbLink As New CSDb(True)
            Dim newDate As String = CSDate.ToCRODIPString(Date.Now)
            dbLink.queryString = "UPDATE Exploitation SET dateModificationCrodip='" & newDate & "',dateModificationAgent='" & newDate & "' WHERE id='" & objClient.id & "'"
            dbLink.Execute()
            dbLink.free()
        Catch ex As Exception
            CSDebug.dispFatal("ClientManager::setSynchro : " & ex.Message)
        End Try
    End Sub

    Public Shared Function getStats(ByVal objClient As Exploitation) As String()
        Dim arrStats() As String = {"0", "---", "0", "0"}

        If objClient.id <> "" Then

            Dim CSDb As New CSDb(True)
            Dim query As String = "SELECT count(Diagnostic.id) AS nbControles FROM (Diagnostic INNER JOIN ExploitationTOPulverisateur ON Diagnostic.pulverisateurId = ExploitationTOPulverisateur.idPulverisateur) INNER JOIN Exploitation ON ExploitationTOPulverisateur.idExploitation = Exploitation.id WHERE Not isSupprimeCoProp AND Exploitation.id = '" & objClient.id & "'"
            Dim tmpListResults As DbDataReader = CSDb.getResult2s(query)
            While tmpListResults.Read()
                Dim tmpColId As Integer = 0
                While tmpColId < tmpListResults.FieldCount()
                    Select Case tmpListResults.GetName(tmpColId)
                        Case "nbControles"
                            arrStats(0) = tmpListResults.Item(tmpColId).ToString()
                        Case "typeProductions"
                            arrStats(1) = tmpListResults.Item(tmpColId).ToString()
                        Case "surfaceAgricole"
                            arrStats(2) = tmpListResults.Item(tmpColId).ToString()
                        Case "surfacePulverise"
                            arrStats(3) = tmpListResults.Item(tmpColId).ToString()
                    End Select
                    tmpColId = tmpColId + 1
                End While
            End While
            tmpListResults.Close()
            CSDb.free()
        End If

        Return arrStats
    End Function

    Public Shared Function existsClient(ByVal clientId As String, ByVal numSiren As String) As Integer
        Dim bdd As CSDb
        bdd = New CSDb(True)
        Dim returnval As Integer

        Try
            returnval = bdd.getValue("SELECT Count(*) AS existsClient FROM Exploitation WHERE numeroSiren='" & numSiren & "' AND id <> '" & clientId & "'")
            bdd.free()
            Return returnval
        Catch ex As Exception
            bdd.free()
            Return 0
        End Try
    End Function
    Public Shared Function existsClient(ByVal numSiren As String) As Integer
        Dim bdd As CSDb
        bdd = New CSDb(True)
        Dim returnval As Integer
        Try
            returnval = bdd.getValue("SELECT Count(*) AS existsClient FROM Exploitation WHERE numeroSiren='" & numSiren & "'")
            bdd.free()
            Return returnval
        Catch ex As Exception
            bdd.free()
            Return 0
        End Try
    End Function

#Region " - Suppression - "
    Public Shared Function isUsedClient(ByVal client_id As String) As Boolean
        Dim bReturn As Boolean
        bReturn = False
        Try

            ' On vérifie que le client n'a pas de pulvé
            Dim query As String = "SELECT * FROM ExploitationTOPulverisateur WHERE ExploitationTOPulverisateur.idExploitation = '" & client_id & "'"
            Dim bdd As New CSDb(True)
            Dim dataResults As DbDataReader = bdd.getResult2s(query)

            bReturn = dataResults.HasRows
            dataResults.Close()
            bdd.free()
            Return bReturn

        Catch ex As Exception
            CSDebug.dispError("ClientManager.isUsedClient() : " & ex.Message)
            Return True
        End Try
    End Function
    Public Shared Function SupprimerExploitation(ByVal objClient As Exploitation) As Boolean
        Try
            If Not ExploitationManager.isUsedClient(objClient.id) Then

                ' On supprime le client de la base
                Dim query As String = "UPDATE Exploitation SET dateModificationAgent='" & Date.Now.ToString & "' , isSupprime=" & True & " WHERE id='" & objClient.id & "'"
                Dim bdd As New CSDb(True)
                bdd.Execute(query)

                Return True
            Else
                Return False
            End If
        Catch ex As Exception
            CSDebug.dispFatal("ClientManager.deleteClient() : " & ex.Message)
            Return False
        End Try
    End Function
    ''' Suppression de l'exploitation en base de données ainsi que du lien vers pulverisateur
    Public Shared Function delete(ByVal idExploitation As String) As Boolean

        Try
            Dim query As String
            Dim bdd As New CSDb(True)
            ' On supprime le ExploitationToPulverisateur de la base
            query = "DELETE FROM ExploitationToPulverisateur WHERE idExploitation='" & idExploitation & "'"
            bdd.Execute(query)

            ' On supprime le Client de la base
            query = "DELETE FROM Exploitation WHERE id='" & idExploitation & "'"
            bdd.Execute(query)

            bdd.free()
            Return True
        Catch ex As Exception
            CSDebug.dispFatal("ExploitationManager.Delete() : " & ex.Message)
            Return False
        End Try
    End Function
#End Region

    ''' Suppression des exploitations d'une structure (For Test Only)
    Public Shared Function FTO_DBdelete(ByVal idStructure As Integer) As Boolean

#If DEBUG Then
        Try
            Dim query As String
            Dim bdd As New CSDb(True)
            Dim oReader As DbDataReader
            Dim idExploit As String
            'Lecture des Exploitation de la Structure
            query = "SELECT * FROM Exploitation WHERE idStructure=" & idStructure & ""

            oReader = bdd.getResult2s(query)
            While oReader.Read()
                idExploit = oReader.GetString(0)
                'Suppression de ExplitationToPulverisateur
                query = "DELETE FROM ExploitationToPulverisateur WHERE idExploitation =" & ControlChars.Quote & idExploit & ControlChars.Quote
                bdd.Execute(query)
                'Suppression de Explitation
                query = "DELETE FROM Exploitation WHERE id ='" & idExploit & "'"
                bdd.Execute(query)

            End While
            oReader.Close()
            bdd.free()
            Return True
        Catch ex As Exception
            CSDebug.dispFatal("ClientManager.DBDelete() : " & ex.Message)
            Return False
        End Try
#Else
                return False
#End If

    End Function
#End Region

    ''' <summary>
    ''' Recherche les exploitations correspondant à un critère
    ''' </summary>
    ''' <param name="pAgent"></param>
    ''' <param name="SearchId (0=Tous, 1=Siren, 2=RS, 3=Prenom, 4 = Nom, ( = date de ctrl)"></param>
    ''' <param name="SearchParams"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function searchExploitation(ByVal pAgent As Agent, ByVal SearchId As Integer, ByVal SearchParams As String) As List(Of Exploitation)

        Dim oCol As New List(Of Exploitation)
        Dim oCsdB As New CSDb(True)
        Try

            ' On récupère les paramètres
            Dim searchParamdateControle1 As Date
            Dim searchParamDateControle2 As Date
            Dim oReader As DbDataReader
            Dim oCmd As DbCommand
            If SearchId = 5 Then
                If Not String.IsNullOrEmpty(SearchParams) And SearchParams.IndexOf("|") > 0 Then

                    searchParamdateControle1 = CDate(SearchParams.Split("|")(0))
                    searchParamDateControle2 = CDate(SearchParams.Split("|")(1))
                End If
            End If

            If SearchParams = "" Then
                SearchParams = "%"
            End If

            ' construction de la requête
            Dim tmpQuerySearch As String = "SELECT DISTINCT * FROM Exploitation WHERE Exploitation.idStructure = " & pAgent.uidstructure & " AND ("
            Select Case SearchId
                Case 0
                    tmpQuerySearch = tmpQuerySearch &
                    " numeroSiren LIKE '" & SearchParams & "%' OR " &
                    " raisonSociale LIKE '%" & SearchParams & "%' OR " &
                    " prenomExploitant LIKE '%" & SearchParams & "%' OR " &
                    " nomExploitant LIKE '%" & SearchParams & "%' OR" &
                    " commune LIKE '%" & SearchParams & "%' OR" &
                    " codepostal LIKE '%" & SearchParams & "%'"
                Case 1
                    tmpQuerySearch = tmpQuerySearch &
                    " numeroSiren LIKE '" & SearchParams & "%'"
                Case 2
                    tmpQuerySearch = tmpQuerySearch &
                    " raisonSociale LIKE '%" & SearchParams & "%'"
                Case 3
                    tmpQuerySearch = tmpQuerySearch &
                    " prenomExploitant LIKE '%" & SearchParams & "%'"
                Case 4
                    tmpQuerySearch = tmpQuerySearch &
                    " nomExploitant LIKE '%" & SearchParams & "%'"
                Case 8 'Commune
                    tmpQuerySearch = tmpQuerySearch &
                     " Exploitation.commune LIKE '%" & SearchParams & "%'"
                Case 9 'CodePostal
                    tmpQuerySearch = tmpQuerySearch &
                     " Exploitation.codePostal LIKE '%" & SearchParams & "%'"
                Case 5 'Date de controle
                    tmpQuerySearch = "SELECT DISTINCT Exploitation.* FROM Exploitation, Diagnostic " &
                        "WHERE Diagnostic.ProprietaireId = Exploitation.id AND Exploitation.idStructure = " & pAgent.uidstructure & " AND ("
                    If CSDb._DBTYPE <> CSDb.EnumDBTYPE.SQLITE Then
                        tmpQuerySearch = tmpQuerySearch &
                    " DIAGNOSTIC.ControleDateDebut >=CDATE(" & ControlChars.Quote & searchParamdateControle1.ToString("d") & " 00:00:00" & ControlChars.Quote & ") AND DIAGNOSTIC.ControleDateDebut <= CDATE(" & ControlChars.Quote & searchParamDateControle2.ToString("d") & " 23:59:59" & ControlChars.Quote & ")"
                    Else
                        tmpQuerySearch = tmpQuerySearch &
                    " DIAGNOSTIC.ControleDateDebut >='" & searchParamdateControle1.ToString("yyyy-MM-dd") & " 00:00:00" & "' AND DIAGNOSTIC.ControleDateDebut <= '" & searchParamDateControle2.ToString("yyyy-MM-dd") & " 23:59:59" & "'"
                    End If

                Case 6 'Numéro de pulverisateur
                    tmpQuerySearch = "SELECT DISTINCT Exploitation.* FROM (ExploitationTOPulverisateur INNER JOIN Exploitation ON ExploitationTOPulverisateur.idExploitation = Exploitation.id) INNER JOIN Pulverisateur ON ExploitationTOPulverisateur.idPulverisateur = Pulverisateur.id WHERE ( NOT isSupprimeCoProp AND Pulverisateur.numeroNational LIKE '%" & SearchParams & "%' AND Exploitation.idStructure = " & pAgent.uidstructure
            End Select
            tmpQuerySearch = tmpQuerySearch & ")"

            oCmd = oCsdB.getConnection().CreateCommand()
            oCmd.CommandText = tmpQuerySearch
            oReader = oCmd.ExecuteReader()
            While oReader.Read()
                Dim oExploit As New Exploitation()
                Dim tmpColId As Integer = 0
                While tmpColId < oReader.FieldCount()
                    If Not oReader.IsDBNull(tmpColId) Then
                        oExploit.Fill(oReader.GetName(tmpColId), oReader.Item(tmpColId))
                    End If
                    tmpColId = tmpColId + 1
                End While
                setnbPulveEnAlerte(oCsdB, oExploit)
                oCol.Add(oExploit)
            End While
            oReader.Close()

            'Si on a fait une recherche sur TOUS, i lfaut relancer un recherche sur le Numero de pulvé
            If SearchId = 0 Then
                Dim oCol2 As List(Of Exploitation)
                oCol2 = searchExploitation(pAgent, 5, SearchParams) 'Recherche sur date de controle
                oCol.AddRange(oCol2)
                oCol2 = searchExploitation(pAgent, 6, SearchParams) 'Recherche sur NumPulvé
                oCol.AddRange(oCol2)
            End If
        Catch ex As Exception
            CSDebug.dispError("ExploitationManager.searchExploitation ERR : " & ex.Message)
            oCol = New List(Of Exploitation)
        End Try
        oCsdB.free()
        Return oCol
    End Function

    'Public Shared Function getResult(ByVal query As String)
    '    ' déclarations
    '    Dim arrItems(0) As Exploitation
    '    Dim bddCommande As New DbCommand
    '    ' On test si la connexion est déjà ouverte ou non
    '    If bddConnection.State() = 0 Then
    '        ' Si non, on la configure et on l'ouvre
    '        bddConnection.ConnectionString = bddConnectString
    '        bddConnection.Open()
    '    End If
    '    bddCommande.Connection = bddConnection
    '    bddCommande.CommandText = query
    '    Try
    '        ' On récupère les résultats
    '        Dim tmpListProfils As dbDataReader = bddCommande.ExecuteReader
    '        Dim i As Integer = 0
    '        ' Puis on les parcours
    '        While tmpListProfils.Read()
    '            ' On rempli notre tableau
    '            Dim tmpClient As New Exploitation
    '            Dim tmpColId As Integer = 0
    '            While tmpColId < tmpListProfils.FieldCount()
    '                Select Case tmpListProfils.GetName(tmpColId)
    '                    Case "id"
    '                        tmpClient.id = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "idStructure"
    '                        tmpClient.idStructure = tmpListProfils.Item(tmpColId)
    '                    Case "numeroSiren"
    '                        tmpClient.numeroSiren = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "codeApe"
    '                        tmpClient.codeApe = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "raisonSociale"
    '                        tmpClient.raisonSociale = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "nombreExploitant"
    '                        tmpClient.nombreExploitant = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "nomExploitant"
    '                        tmpClient.nomExploitant = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "prenomExploitant"
    '                        tmpClient.prenomExploitant = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "adresse"
    '                        tmpClient.adresse = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "codePostal"
    '                        tmpClient.codePostal = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "commune"
    '                        tmpClient.commune = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "codeInsee"
    '                        tmpClient.codeInsee = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "telephoneFixe"
    '                        tmpClient.telephoneFixe = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "telephonePortable"
    '                        tmpClient.telephonePortable = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "telephoneFax"
    '                        tmpClient.telephoneFax = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "eMail"
    '                        tmpClient.eMail = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdGrandeCulture"
    '                        tmpClient.isProdGrandeCulture = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdElevage"
    '                        tmpClient.isProdElevage = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdArboriculture"
    '                        tmpClient.isProdArboriculture = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdLegume"
    '                        tmpClient.isProdLegume = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdViticulture"
    '                        tmpClient.isProdViticulture = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isProdAutre"
    '                        tmpClient.isProdAutre = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "productionAutre"
    '                        tmpClient.productionAutre = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "isSupprime"
    '                        tmpClient.isSupprime = tmpListProfils.Item(tmpColId).ToString()
    '                    Case "dateModificationCrodip"
    '                        tmpClient.dateModificationCrodip = CSDate.access2mysql(tmpListProfils.Item(tmpColId).ToString())
    '                    Case "dateModificationAgent"
    '                        tmpClient.dateModificationAgent = CSDate.access2mysql(tmpListProfils.Item(tmpColId).ToString())
    '                    Case "dateDernierControle"
    '                        tmpClient.dateDernierControle = CSDate.access2mysql(tmpListProfils.Item(tmpColId).ToString())
    '                    Case "surfaceAgricoleUtile"
    '                        tmpClient.surfaceAgricoleUtile = tmpListProfils.Item(tmpColId).ToString()
    '                End Select
    '                tmpColId = tmpColId + 1
    '            End While
    '            arrItems(i) = tmpClient
    '            i = i + 1
    '            ReDim Preserve arrItems(i)
    '        End While
    '        ReDim Preserve arrItems(i - 1)
    '    Catch ex As Exception ' On intercepte l'erreur
    '        CSDebug.dispError("ClientManager Error: " & ex.Message)
    '    End Try
    '    ' Test pour fermeture de connection BDD
    '    If bddConnection.State() <> 0 Then
    '        ' On ferme la connexion
    '        bddConnection.Close()
    '    End If
    '    'on retourne le client ou un objet vide en cas d'erreur
    '    Return arrItems

    'End Function

    ''Public Shared Function addIdStructure(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.idStructure LIKE '%" & parametre & "' AND "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.idStructure LIKE '" & parametre & "%' AND "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.idStructure LIKE '%" & parametre & "%' AND "
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.idStructure = " & parametre & " AND "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNumeroSiren(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.numeroSiren LIKE '%" & parametre & "' OR "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.numeroSiren LIKE '" & parametre & "%' OR "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.numeroSiren LIKE '%" & parametre & "%' OR "
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.numeroSiren = '" & parametre & "' OR "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNumeroEde(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.numeroEde LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.numeroEde LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.numeroEde LIKE '%" & parametre & "%'"
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.numeroEde = '" & parametre & "'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCodeApe(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.codeApe LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.codeApe LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.codeApe LIKE '%" & parametre & "%'"
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.codeApe = '" & parametre & "'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addRaisonSociale(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.raisonSociale LIKE '%" & parametre & "' OR "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.raisonSociale LIKE '" & parametre & "%' OR "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.raisonSociale LIKE '%" & parametre & "%' OR "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNomExploitation(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.nom LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.nom LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.nom LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNombreExploitants(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.nombreExploitant LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.nombreExploitant LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.nombreExploitant LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCivilite(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.civiliteExploitant LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.civiliteExploitant LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.civiliteExploitant LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addNom(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.nomExploitant LIKE '%" & parametre & "' OR "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.nomExploitant LIKE '" & parametre & "%' OR "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.nomExploitant LIKE '%" & parametre & "%' OR "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addPrenom(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.prenomExploitant LIKE '%" & parametre & "' OR "
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.prenomExploitant LIKE '" & parametre & "%' OR "
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.prenomExploitant LIKE '%" & parametre & "%' OR "
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addAdresse(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.adresse LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.adresse LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.adresse LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCodePostal(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.codePostal LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.codePostal LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.codePostal LIKE '%" & parametre & "%'"
    '        Case ""
    '            arrParametres(tmpId) = " Exploitation.codePostal LIKE '" & parametre & "'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCommune(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.commune LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.commune LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.commune LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addCodeInseeCommune(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.codeInsee LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.codeInsee LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.codeInsee LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addTelephoneFixe(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.telephoneFixe LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.telephoneFixe LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.telephoneFixe LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addTelephonePortable(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.telephonePortable LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.telephonePortable LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.telephonePortable LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addFax(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.telephoneFax LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.telephoneFax LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.telephoneFax LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    'Public Shared Function addEmail(ByVal parametre As String, ByVal likeFormat As String)
    '    Dim tmpId As Integer = (arrParametres.Length - 1)
    '    Select Case likeFormat
    '        Case "L"
    '            arrParametres(tmpId) = " Exploitation.eMail LIKE '%" & parametre & "'"
    '        Case "R"
    '            arrParametres(tmpId) = " Exploitation.eMail LIKE '" & parametre & "%'"
    '        Case "C"
    '            arrParametres(tmpId) = " Exploitation.eMail LIKE '%" & parametre & "%'"
    '    End Select
    '    ReDim Preserve arrParametres(tmpId + 1)
    'End Function

    Public Shared Function getUpdates(ByVal pAgent As Agent) As Exploitation()
        ' déclarations
        Dim arrItems(0) As Exploitation
        Dim oCSdb As New CSDb(True)
        Dim bddCommande As DbCommand = oCSdb.getConnection().CreateCommand()
        bddCommande.CommandText = "SELECT * FROM Exploitation WHERE (dateModificationAgent>dateModificationCrodip Or  dateModificationCrodip is null) "
        bddCommande.CommandText = bddCommande.CommandText & " AND idStructure=" & pAgent.uidstructure

        Try
            ' On récupère les résultats
            Dim oReader As DbDataReader = bddCommande.ExecuteReader
            Dim i As Integer = 0
            ' Puis on les parcours
            While oReader.Read()
                Dim oExploit As New Exploitation()
                Dim tmpColId As Integer = 0
                While tmpColId < oReader.FieldCount()
                    If Not oReader.IsDBNull(tmpColId) Then
                        oExploit.Fill(oReader.GetName(tmpColId), oReader.Item(tmpColId))
                    End If
                    tmpColId = tmpColId + 1
                End While
                setnbPulveEnAlerte(oCSdb, oExploit)
                arrItems(i) = oExploit
                i = i + 1
                ReDim Preserve arrItems(i)
            End While
            ReDim Preserve arrItems(i - 1)

        Catch ex As Exception ' On intercepte l'erreur
            CSDebug.dispError("ClientManager - getUpdates : " & ex.Message)
        End Try

        oCSdb.free()
        'on retourne les objet non synchro
        Return arrItems
    End Function



End Class

