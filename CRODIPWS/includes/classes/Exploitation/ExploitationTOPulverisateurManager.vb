Imports System.Collections.Generic
Imports System.Data.Common

Public Class ExploitationTOPulverisateurManager
    Inherits RootManager

#Region "Methodes Web Service"
    Public Shared Function WSgetById(ByVal p_uid As Integer, paid As String) As ExploitationTOPulverisateur
        Dim oreturn As ExploitationTOPulverisateur
        oreturn = RootWSGetById(Of ExploitationTOPulverisateur)(p_uid, paid)
        Return oreturn
    End Function

    Public Shared Function WSSend(ByVal pObjIn As ExploitationTOPulverisateur, ByRef pobjOut As ExploitationTOPulverisateur) As Integer
        Dim nreturn As Integer
        Try
            nreturn = RootWSSend(Of ExploitationTOPulverisateur)(pObjIn, pobjOut)

        Catch ex As Exception
            CSDebug.dispFatal("sendWSExploitationToPulverisateur : " & ex.Message)
            nreturn = -1
        End Try
        Return nreturn
    End Function
#End Region

#Region "Methodes Locales"
    ''' <summary>
    ''' rend un nouvel Id pour la relation ExploitationPulverisateur
    ''' </summary>
    ''' <param name="curAgent"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>

    Public Shared Function getNewId(pAgent As Agent) As String
        If pAgent.oPool IsNot Nothing Then
            Return getNewIdNew(pAgent)
        Else
            Return getNewIdOLD(pAgent)
        End If
    End Function

    Private Shared Function getNewIdNew(pAgent As Agent) As String
        Debug.Assert(Not pAgent Is Nothing, "L'agent doit être renseigné")
        Debug.Assert(pAgent.id <> 0, "L'agent id doit être renseigné")
        Debug.Assert(pAgent.uidStructure <> 0, "La structure id doit être renseignée")
        Debug.Assert(pAgent.oPool IsNot Nothing, "Le pool doit être renseigné")
        ' déclarations
        Dim idStructure As String = StructureManager.getStructureById(pAgent.uidStructure).idCrodip
        Dim idPC As String
        idPC = pAgent.oPool.idCRODIPPC
        Dim Racine As String = idStructure & "-" & pAgent.numeroNational & "-" & idPC & "-"
        Dim nIndex As Integer = 1

        If pAgent.uidStructure <> 0 Then

            ' On test si la table est vide

            Dim oCSDb As New CSDb(True)
            Dim res As Object = oCSDb.getValue("SELECT MAX(CAST (REPLACE(Id,'" & Racine & "','') as INT)) as ID  from ExploitationTOPulverisateur where id Like '" & Racine & "%'")
            oCSDb.free()
            If TypeOf res IsNot DBNull Then
                nIndex = CInt(res) + 1
            End If
        End If

        'on retourne le nouvel id
        Return Racine & nIndex
    End Function

    Private Shared Function getNewIdOLD(ByVal curAgent As Agent) As String
        Debug.Assert(Not curAgent Is Nothing)
        Debug.Assert(Not curAgent.numeroNational Is Nothing)
        ' déclarations
        Dim strExpl2PulvId As String = ""
        Dim oCsdb As CSDb = Nothing
        If Not curAgent.numeroNational Is Nothing Then
            oCsdb = New CSDb(True)
            Dim bddCommande As DbCommand
            bddCommande = oCsdb.getConnection().CreateCommand()
            bddCommande.CommandText = "SELECT `ExploitationTOPulverisateur`.`id` FROM `ExploitationTOPulverisateur` WHERE `ExploitationTOPulverisateur`.`id` LIKE '" & curAgent.uidStructure & "-" & curAgent.id & "-%' ORDER BY `ExploitationTOPulverisateur`.`id` DESC"
            Try
                ' On récupère les résultats
                Dim tmpListProfils As DbDataReader = bddCommande.ExecuteReader
                ' Puis on les parcours
                Dim newId As Integer = 0
                While tmpListProfils.Read()
                    ' On récupère le dernier ID
                    Dim tmpIdInt As Integer
                    strExpl2PulvId = tmpListProfils.Item(0).ToString
                    tmpIdInt = CInt(strExpl2PulvId.Replace(curAgent.uidStructure & "-" & curAgent.id & "-", ""))
                    If tmpIdInt > newId Then
                        newId = tmpIdInt
                    End If
                End While
                tmpListProfils.Close()
                strExpl2PulvId = curAgent.uidStructure & "-" & curAgent.id & "-" & (newId + 1)
            Catch ex As Exception ' On intercepte l'erreur
                CSDebug.dispFatal("PulverisateurManager - getNewShareId : " & ex.Message)
            End Try

            ' Test pour fermeture de connection BDD
            If Not oCsdb Is Nothing Then
                ' On ferme la connexion
                oCsdb.free()
            End If


        End If
        If strExpl2PulvId Is Nothing Or strExpl2PulvId = "" Then
            strExpl2PulvId = curAgent.uidStructure & "-" & curAgent.id & "-1"
        End If
        'on retourne le nouvel id
        Return strExpl2PulvId
    End Function
    Public Shared Function save(ByVal pIdPulve As String, pIdExploit As String, puidPulve As Integer, puidExploit As Integer, pIsSupprimeCoCProp As Boolean, pAgent As Agent, Optional bSyncro As Boolean = False) As Boolean
        Dim oExploit2Pulve As New ExploitationTOPulverisateur()
        oExploit2Pulve.idPulverisateur = pIdPulve
        oExploit2Pulve.idExploitation = pIdExploit
        oExploit2Pulve.uidpulverisateur = puidPulve
        oExploit2Pulve.uidexploitation = puidExploit
        oExploit2Pulve.isSupprimeCoProp = pIsSupprimeCoCProp
        Return save(oExploit2Pulve, pAgent, bSyncro)
    End Function


    Public Shared Function save(ByVal pExploit2Pulve As ExploitationTOPulverisateur, pAgent As Agent, Optional bSyncro As Boolean = False) As Boolean
        Dim bReturn As Boolean
        Try
            Dim oCSDb As New CSDb(True)

            Dim oExploit2Pulve As ExploitationTOPulverisateur = getExploitationTOPulverisateurByExploitIdAndPulverisateurId(pExploit2Pulve.idExploitation, pExploit2Pulve.idPulverisateur)
            If oExploit2Pulve.id = "" Then
                If Not pExploit2Pulve.isSupprimeCoProp Then

                    'il n'y a pas de relation entre l'exploitation et le pulverisateur => on la créé
                    createExploitationTOPulverisateur(pExploit2Pulve, pAgent, bSyncro)
                End If
            Else
                If oExploit2Pulve.isSupprimeCoProp <> pExploit2Pulve.isSupprimeCoProp Or bSyncro Then
                    'Mise à jour su Flag IsSupprime et date de modif
                    If Not bSyncro Then
                        pExploit2Pulve.dateModificationAgent = CSDate.ToCRODIPString(Date.Now())
                    End If
                    Dim paramsQuery As String = "isSupprimeCoProp=" & pExploit2Pulve.isSupprimeCoProp & ""
                    If pExploit2Pulve.uidpulverisateur > 0 Then
                        paramsQuery = paramsQuery & ",uidpulverisateur=" & pExploit2Pulve.uidpulverisateur
                    End If
                    If pExploit2Pulve.uidexploitation > 0 Then
                        paramsQuery = paramsQuery & ",uidexploitation=" & pExploit2Pulve.uidexploitation
                    End If

                    paramsQuery = paramsQuery & pExploit2Pulve.getRootQuery()

                    Dim bddCommande As DbCommand
                    bddCommande = oCSDb.getConnection().CreateCommand()

                    ' On finalise la requete et en l'execute
                    bddCommande.CommandText = "UPDATE ExploitationTOPulverisateur SET " & paramsQuery & " WHERE idPulverisateur = '" & pExploit2Pulve.idPulverisateur & "' and idExploitation = '" & pExploit2Pulve.idExploitation & "'"
                    bddCommande.ExecuteNonQuery()

                End If

            End If
                oCSDb.free()
            bReturn = True
        Catch ex As Exception
            CSDebug.dispFatal("ExploitationToPulverisateur.Save ERROR : " & ex.Message)
            bReturn = False
        End Try

        Return bReturn
    End Function
    Public Shared Function delete(pPulverisateurId As String, pExploitationId As String) As Boolean
        Dim bReturn As Boolean
        Try

            Dim oCSDb As New CSDb(True)

            Dim bddCommande As DbCommand
            bddCommande = oCSDb.getConnection().CreateCommand()

            bddCommande.CommandText = "DELETE FROM ExploitationTOPulverisateur WHERE idPulverisateur = '" & pPulverisateurId & "' and idExploitation = '" & pExploitationId & "'"
            bddCommande.ExecuteNonQuery()
            ' Test pour fermeture de connection BDD
            If oCSDb IsNot Nothing Then
                ' On ferme la connexion
                oCSDb.free()
            End If
            bReturn = True
        Catch ex As Exception
            CSDebug.dispFatal("ExploitationToPulverisateur.Save ERROR : " & ex.Message)
            bReturn = False
        End Try

        Return bReturn
    End Function

    Public Shared Sub setSynchro(ByVal objExploitationTOPulverisateur As ExploitationTOPulverisateur)
        Try
            Dim dbLink As New CSDb(True)
            Dim newDate As String = CSDate.ToCRODIPString(Date.Now)
            dbLink.queryString = "UPDATE ExploitationTOPulverisateur SET dateModificationCrodip='" & newDate & "',dateModificationAgent='" & newDate & "' WHERE id='" & objExploitationTOPulverisateur.id & "'"
            dbLink.Execute()
            dbLink.free()
        Catch ex As Exception
            CSDebug.dispFatal("ExploitationTOPulverisateurManager::setSynchro : " & ex.Message)
        End Try
    End Sub

    Public Shared Function getExploitationTOPulverisateurById(ByVal exploitationtopulverisateur_id As String) As ExploitationTOPulverisateur
        ' déclarations
        Dim tmpExploitationTOPulverisateur As New ExploitationTOPulverisateur
        If exploitationtopulverisateur_id <> "" Then

            Dim bddCommande As DbCommand
            Dim oCSdb As New CSDb(True)
            bddCommande = oCSdb.getConnection().CreateCommand()
            bddCommande.CommandText = "SELECT * FROM ExploitationTOPulverisateur WHERE ExploitationTOPulverisateur.id='" & exploitationtopulverisateur_id & "'"
            Try
                ' On récupère les résultats
                Dim oDataReader As DbDataReader = bddCommande.ExecuteReader
                ' Puis on les parcours
                While oDataReader.Read()
                    ' On rempli notre tableau
                    Dim tmpColId As Integer = 0
                    While tmpColId < oDataReader.FieldCount()
                        If Not oDataReader.IsDBNull(tmpColId) Then
                            tmpExploitationTOPulverisateur.Fill(oDataReader.GetName(tmpColId), oDataReader.GetValue(tmpColId))
                        End If
                        tmpColId = tmpColId + 1
                    End While
                End While
            Catch ex As Exception ' On intercepte l'erreur
                CSDebug.dispFatal("ExploitationTOPulverisateurManager Error: " & ex.Message)
            End Try

            ' Test pour fermeture de connection BDD
            If oCSdb IsNot Nothing Then
                ' On ferme la connexion
                oCSdb.free()
            End If

        End If
        'on retourne le exploitationtopulverisateur ou un objet vide en cas d'erreur
        Return tmpExploitationTOPulverisateur
    End Function

    Public Shared Function getExploitationTOPulverisateurByExploitationId(ByVal pExploitationId As String, Optional pTous As Boolean = False) As List(Of ExploitationTOPulverisateur)
        ' déclarations
        Dim tmpExploitationTOPulverisateur As ExploitationTOPulverisateur
        Dim oLst As New List(Of ExploitationTOPulverisateur)
        Dim oCSDB As New CSDb(True)
        If pExploitationId <> "" Then

            Dim bddCommande As DbCommand
            bddCommande = oCSDB.getConnection().CreateCommand()
            bddCommande.CommandText = "SELECT * FROM ExploitationTOPulverisateur WHERE ExploitationTOPulverisateur.idExploitation='" & pExploitationId & "'"
            'Si on ne les veut pas TOUS, on ne revoi que ceux qui ne sont pas supprimé
            If Not pTous Then
                bddCommande.CommandText = bddCommande.CommandText & " AND NOT isSupprimeCoProp "
            End If
            Try
                ' On récupère les résultats
                Dim oDataReader As DbDataReader = bddCommande.ExecuteReader
                ' Puis on les parcours
                While oDataReader.Read()
                    ' On rempli notre tableau
                    tmpExploitationTOPulverisateur = New ExploitationTOPulverisateur()
                    Dim tmpColId As Integer = 0
                    While tmpColId < oDataReader.FieldCount()
                        If Not oDataReader.IsDBNull(tmpColId) Then
                            tmpExploitationTOPulverisateur.Fill(oDataReader.GetName(tmpColId), oDataReader.GetValue(tmpColId))
                        End If
                        tmpColId = tmpColId + 1
                    End While
                    oLst.Add(tmpExploitationTOPulverisateur)
                End While
            Catch ex As Exception ' On intercepte l'erreur
                MsgBox("ExploitationTOPulverisateurManager Error: " & ex.Message)
            End Try

            ' Test pour fermeture de connection BDD
            If oCSDB IsNot Nothing Then
                ' On ferme la connexion
                oCSDB.free()
            End If

        End If
        'on retourne une liste de Exploitationtopulverisateur 
        Return oLst
    End Function
    ''' <summary>
    ''' Rend la liste des liens ExploitToPulve pour un Pulvé
    ''' </summary>
    ''' <param name="pPulveId">ID du pulve</param>
    ''' <param name="pTous">si vrai rend les liens 'supprimé' aussi</param>
    ''' <returns></returns>
    Public Shared Function getlstExploitationTOPulverisateurByPulverisateurId(ByVal pPulveId As String, Optional pTous As Boolean = False) As List(Of ExploitationTOPulverisateur)
        ' déclarations
        Dim tmpExploitationTOPulverisateur As ExploitationTOPulverisateur = Nothing
        Dim lstReturn As List(Of ExploitationTOPulverisateur) = New List(Of ExploitationTOPulverisateur)
        Dim oCSDB As New CSDb(True)
        If pPulveId <> "" Then

            Dim bddCommande As DbCommand
            bddCommande = oCSDB.getConnection().CreateCommand()
            bddCommande.CommandText = "SELECT * FROM ExploitationTOPulverisateur WHERE ExploitationTOPulverisateur.idPulverisateur='" & pPulveId & "'"
            'Si on ne les veut pas TOUS, on ne revoi que ceux qui ne sont pas supprimé
            If Not pTous Then
                bddCommande.CommandText = bddCommande.CommandText & " AND NOT isSupprimeCoProp "
            End If
            Try
                ' On récupère les résultats
                Dim oDataReader As DbDataReader = bddCommande.ExecuteReader
                ' Puis on les parcours
                While oDataReader.Read()
                    ' On rempli notre tableau
                    tmpExploitationTOPulverisateur = New ExploitationTOPulverisateur()
                    Dim tmpColId As Integer = 0
                    While tmpColId < oDataReader.FieldCount()
                        If Not oDataReader.IsDBNull(tmpColId) Then
                            tmpExploitationTOPulverisateur.Fill(oDataReader.GetName(tmpColId), oDataReader.GetValue(tmpColId))
                        End If
                        tmpColId = tmpColId + 1
                    End While
                    lstReturn.Add(tmpExploitationTOPulverisateur)
                End While
            Catch ex As Exception ' On intercepte l'erreur
                CSDebug.dispError("ExploitationTOPulverisateurManager.getlstExploitationTOPulverisateurByPulverisateurId ERR: ", ex)
            End Try

            oCSDB.free()
        End If
        Return lstReturn
    End Function
    ''' <summary>
    ''' Renvoie un lien en fonction de l'Id du pulve et l'Id de l'exploitation
    ''' </summary>
    ''' <param name="pExploitId"></param>
    ''' <param name="pPulveId"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Public Shared Function getExploitationTOPulverisateurByExploitIdAndPulverisateurId(pExploitId As String, ByVal pPulveId As String, Optional pTous As Boolean = False) As ExploitationTOPulverisateur
        ' déclarations
        Dim oReturn As New ExploitationTOPulverisateur()
        Dim oCSDB As New CSDb(True)
        If Not String.IsNullOrEmpty(pPulveId) And Not String.IsNullOrEmpty(pExploitId) Then

            Dim bddCommande As DbCommand
            bddCommande = oCSDB.getConnection().CreateCommand()
            bddCommande.CommandText = "SELECT * FROM ExploitationTOPulverisateur WHERE idPulverisateur='" & pPulveId & "' and idExploitation = '" & pExploitId & "'"
            'Si on ne les veut pas TOUS, on ne revoi que ceux qui ne sont pas supprimé
            If Not pTous Then
                bddCommande.CommandText = bddCommande.CommandText & " AND NOT isSupprimeCoProp "
            End If
            Try
                ' On récupère les résultats
                Dim oDataReader As DbDataReader = bddCommande.ExecuteReader
                ' Puis on les parcours
                While oDataReader.Read()
                    ' On rempli notre tableau
                    Dim tmpColId As Integer = 0
                    While tmpColId < oDataReader.FieldCount()
                        If Not oDataReader.IsDBNull(tmpColId) Then
                            oReturn.Fill(oDataReader.GetName(tmpColId), oDataReader.GetValue(tmpColId))
                        End If
                        tmpColId = tmpColId + 1
                    End While
                End While
            Catch ex As Exception ' On intercepte l'erreur
                CSDebug.dispFatal("ExploitationTOPulverisateurManager Error: " & ex.Message)
            End Try

            ' Test pour fermeture de connection BDD
            If oCSDB IsNot Nothing Then
                ' On ferme la connexion
                oCSDB.free()
            End If

        End If
        'on retourne une instance de Exploitationtopulverisateur 
        Return oReturn
    End Function
    Public Shared Function createExploitationTOPulverisateur(ByVal pExploitTOPulve As ExploitationTOPulverisateur, pAgent As Agent, Optional psynhcro As Boolean = False) As String
        Debug.Assert(pExploitTOPulve IsNot Nothing, "ExploitToPulve Must be set")
        Debug.Assert(pAgent IsNot Nothing, "agent must be set")
        Dim idReturn As String = ""
        Try
            Dim bddCommande As DbCommand
            Dim oCSdb As New CSDb(True)

            bddCommande = oCSdb.getConnection().CreateCommand()
            'New ID
            idReturn = ExploitationTOPulverisateurManager.getNewId(pAgent)
            pExploitTOPulve.id = idReturn
            If Not psynhcro Then
                pExploitTOPulve.dateModificationAgent = CSDate.ToCRODIPString(Date.Now)
            End If
            bddCommande.CommandText = "INSERT INTO `ExploitationTOPulverisateur` " &
                    " (id,idPulverisateur,idExploitation,isSupprimeCoProp, dateModificationAgent, dateModificationCrodip, uidexploitation,uidpulverisateur) " &
                    " VALUES ('" & pExploitTOPulve.id & "','" & pExploitTOPulve.idPulverisateur & "','" & pExploitTOPulve.idExploitation & "'," & pExploitTOPulve.isSupprimeCoProp & ",'" & CSDate.ToCRODIPString(pExploitTOPulve.dateModificationAgent) & "','" & CSDate.ToCRODIPString(pExploitTOPulve.dateModificationCrodip) & "'," & pExploitTOPulve.uidexploitation & "," & pExploitTOPulve.uidpulverisateur & ")"
            bddCommande.ExecuteNonQuery()

            ' Test pour fermeture de connection BDD
            If oCSdb IsNot Nothing Then
                ' On ferme la connexion
                oCSdb.free()
            End If
        Catch ex As Exception
            CSDebug.dispFatal("ExploitationTOPulverisateurManager.createExploitationTOPulverisateur ERROR : " & ex.Message)
            idReturn = ""
        End Try
        Return idReturn
    End Function

    Public Shared Function getUpdates(ByVal agent As Agent) As ExploitationTOPulverisateur()
        ' déclarations
        Dim arrItems(0) As ExploitationTOPulverisateur
        Dim bddCommande As DbCommand
        Dim oCSDb As New CSDb(True)

        bddCommande = oCSDb.getConnection().CreateCommand()
        bddCommande.CommandText = "SELECT ExploitationTOPulverisateur.* FROM ExploitationTOPulverisateur INNER JOIN Exploitation ON ExploitationTOPulverisateur.idExploitation = Exploitation.id WHERE (ExploitationTOPulverisateur.dateModificationAgent<>ExploitationTOPulverisateur.dateModificationCrodip or ExploitationTOPulverisateur.dateModificationCrodip is null)"
        bddCommande.CommandText = bddCommande.CommandText & " AND Exploitation.idStructure=" & agent.uidStructure
        Try
            ' On récupère les résultats
            Dim oDataReader As DbDataReader = bddCommande.ExecuteReader
            Dim i As Integer = 0
            ' Puis on les parcours
            While oDataReader.Read()
                ' On rempli notre tableau
                Dim oExploitationTOPulverisateur As New ExploitationTOPulverisateur
                oExploitationTOPulverisateur.FillDR(oDataReader)
                arrItems(i) = oExploitationTOPulverisateur
                i = i + 1
                ReDim Preserve arrItems(i)
            End While
            ReDim Preserve arrItems(i - 1)

        Catch ex As Exception ' On intercepte l'erreur
            CSDebug.dispFatal("Erreur - ExploitationTOPulverisateurManager - getResult : " & ex.Message)
        End Try

        ' Test pour fermeture de connection BDD
        If oCSDb IsNot Nothing Then
            ' On ferme la connexion
            oCSDb.free()
        End If

        'on retourne les objet non synchro
        Return arrItems
    End Function

#End Region

End Class