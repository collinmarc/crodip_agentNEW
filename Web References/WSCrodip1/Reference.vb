'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :4.0.30319.269
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Ce code source a été automatiquement généré par Microsoft.VSDesigner, Version 4.0.30319.269.
'
Namespace WSCrodip1
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CrodipBinding", [Namespace]:="http://www.example.org/crodip/")>  _
    Partial Public Class CrodipServer
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendLogsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendLogs2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendAgentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendAgent2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetDateSynchroAgentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPrestationCategorieOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendPrestationCategorieOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendPrestationCategorie2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPrestationTarifOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendPrestationTarifOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendPrestationTarif2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBuseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendBuseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendBuse2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetManometreControleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendManometreControleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendManometreControle2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetManometreEtalonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendManometreEtalonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendManometreEtalon2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBancOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendBancOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendBanc2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDiagnosticOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendDiagnosticOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendDiagnostic2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDiagnosticItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendDiagnosticItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDiagnosticBusesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendDiagnosticBusesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDiagnosticBusesDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendDiagnosticBusesDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDiagnosticMano542OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendDiagnosticMano542OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDiagnosticTroncons833OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendDiagnosticTroncons833OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExploitationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendExploitationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendExploitation2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExploitationTOPulverisateurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendExploitationTOPulverisateurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendExploitationTOPulverisateur2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetControleBancMesureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendControleBancMesureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendControleBancMesure2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetControleManoMesureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendControleManoMesureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFVBancOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFVBancOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFVBanc2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFVManometreControleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFVManometreControleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFVManometreControle2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFVManometreEtalonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFVManometreEtalonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFVManometreEtalon2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPulverisateurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendPulverisateurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStructureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendStructureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReferentielBuseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReferentielManometreOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReferentielPulverisateurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReferentielTerritoireOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVersionLogicielAgentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSoftwareUpdateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSynchroDateTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIncrementDiagnosticOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatesAvailableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://admin-pp.crodip.fr/server"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendLogsCompleted As SendLogsCompletedEventHandler
        
        '''<remarks/>
        Public Event SendLogs2Completed As SendLogs2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentCompleted As GetAgentCompletedEventHandler
        
        '''<remarks/>
        Public Event SendAgentCompleted As SendAgentCompletedEventHandler
        
        '''<remarks/>
        Public Event SendAgent2Completed As SendAgent2CompletedEventHandler
        
        '''<remarks/>
        Public Event SetDateSynchroAgentCompleted As SetDateSynchroAgentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPrestationCategorieCompleted As GetPrestationCategorieCompletedEventHandler
        
        '''<remarks/>
        Public Event SendPrestationCategorieCompleted As SendPrestationCategorieCompletedEventHandler
        
        '''<remarks/>
        Public Event SendPrestationCategorie2Completed As SendPrestationCategorie2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPrestationTarifCompleted As GetPrestationTarifCompletedEventHandler
        
        '''<remarks/>
        Public Event SendPrestationTarifCompleted As SendPrestationTarifCompletedEventHandler
        
        '''<remarks/>
        Public Event SendPrestationTarif2Completed As SendPrestationTarif2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetBuseCompleted As GetBuseCompletedEventHandler
        
        '''<remarks/>
        Public Event SendBuseCompleted As SendBuseCompletedEventHandler
        
        '''<remarks/>
        Public Event SendBuse2Completed As SendBuse2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetManometreControleCompleted As GetManometreControleCompletedEventHandler
        
        '''<remarks/>
        Public Event SendManometreControleCompleted As SendManometreControleCompletedEventHandler
        
        '''<remarks/>
        Public Event SendManometreControle2Completed As SendManometreControle2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetManometreEtalonCompleted As GetManometreEtalonCompletedEventHandler
        
        '''<remarks/>
        Public Event SendManometreEtalonCompleted As SendManometreEtalonCompletedEventHandler
        
        '''<remarks/>
        Public Event SendManometreEtalon2Completed As SendManometreEtalon2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetBancCompleted As GetBancCompletedEventHandler
        
        '''<remarks/>
        Public Event SendBancCompleted As SendBancCompletedEventHandler
        
        '''<remarks/>
        Public Event SendBanc2Completed As SendBanc2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetDiagnosticCompleted As GetDiagnosticCompletedEventHandler
        
        '''<remarks/>
        Public Event SendDiagnosticCompleted As SendDiagnosticCompletedEventHandler
        
        '''<remarks/>
        Public Event SendDiagnostic2Completed As SendDiagnostic2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetDiagnosticItemsCompleted As GetDiagnosticItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event SendDiagnosticItemsCompleted As SendDiagnosticItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDiagnosticBusesCompleted As GetDiagnosticBusesCompletedEventHandler
        
        '''<remarks/>
        Public Event SendDiagnosticBusesCompleted As SendDiagnosticBusesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDiagnosticBusesDetailCompleted As GetDiagnosticBusesDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event SendDiagnosticBusesDetailCompleted As SendDiagnosticBusesDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDiagnosticMano542Completed As GetDiagnosticMano542CompletedEventHandler
        
        '''<remarks/>
        Public Event SendDiagnosticMano542Completed As SendDiagnosticMano542CompletedEventHandler
        
        '''<remarks/>
        Public Event GetDiagnosticTroncons833Completed As GetDiagnosticTroncons833CompletedEventHandler
        
        '''<remarks/>
        Public Event SendDiagnosticTroncons833Completed As SendDiagnosticTroncons833CompletedEventHandler
        
        '''<remarks/>
        Public Event GetExploitationCompleted As GetExploitationCompletedEventHandler
        
        '''<remarks/>
        Public Event SendExploitationCompleted As SendExploitationCompletedEventHandler
        
        '''<remarks/>
        Public Event SendExploitation2Completed As SendExploitation2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetExploitationTOPulverisateurCompleted As GetExploitationTOPulverisateurCompletedEventHandler
        
        '''<remarks/>
        Public Event SendExploitationTOPulverisateurCompleted As SendExploitationTOPulverisateurCompletedEventHandler
        
        '''<remarks/>
        Public Event SendExploitationTOPulverisateur2Completed As SendExploitationTOPulverisateur2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetControleBancMesureCompleted As GetControleBancMesureCompletedEventHandler
        
        '''<remarks/>
        Public Event SendControleBancMesureCompleted As SendControleBancMesureCompletedEventHandler
        
        '''<remarks/>
        Public Event SendControleBancMesure2Completed As SendControleBancMesure2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetControleManoMesureCompleted As GetControleManoMesureCompletedEventHandler
        
        '''<remarks/>
        Public Event SendControleManoMesureCompleted As SendControleManoMesureCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFVBancCompleted As GetFVBancCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFVBancCompleted As SendFVBancCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFVBanc2Completed As SendFVBanc2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFVManometreControleCompleted As GetFVManometreControleCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFVManometreControleCompleted As SendFVManometreControleCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFVManometreControle2Completed As SendFVManometreControle2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetFVManometreEtalonCompleted As GetFVManometreEtalonCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFVManometreEtalonCompleted As SendFVManometreEtalonCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFVManometreEtalon2Completed As SendFVManometreEtalon2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetPulverisateurCompleted As GetPulverisateurCompletedEventHandler
        
        '''<remarks/>
        Public Event SendPulverisateurCompleted As SendPulverisateurCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStructureCompleted As GetStructureCompletedEventHandler
        
        '''<remarks/>
        Public Event SendStructureCompleted As SendStructureCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReferentielBuseCompleted As GetReferentielBuseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReferentielManometreCompleted As GetReferentielManometreCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReferentielPulverisateurCompleted As GetReferentielPulverisateurCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReferentielTerritoireCompleted As GetReferentielTerritoireCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVersionLogicielAgentCompleted As GetVersionLogicielAgentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSoftwareUpdateCompleted As GetSoftwareUpdateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSynchroDateTimeCompleted As GetSynchroDateTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIncrementDiagnosticCompleted As GetIncrementDiagnosticCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatesAvailableCompleted As UpdatesAvailableCompletedEventHandler
        
        '''<remarks/>
        <XmlInclude(GetType(Logs)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendLogs", RequestElementName:="SendLogsRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendLogs(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Logs As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendLogs", New Object() {Logs})
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendLogs(ByVal Logs As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendLogs", New Object() {Logs}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendLogs(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendLogsAsync(ByVal Logs As Object)
            Me.SendLogsAsync(Logs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendLogsAsync(ByVal Logs As Object, ByVal userState As Object)
            If (Me.SendLogsOperationCompleted Is Nothing) Then
                Me.SendLogsOperationCompleted = AddressOf Me.OnSendLogsOperationCompleted
            End If
            Me.InvokeAsync("SendLogs", New Object() {Logs}, Me.SendLogsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendLogsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendLogsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendLogsCompleted(Me, New SendLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendLogs2", RequestElementName:="SendLogs2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendLogs2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal type As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idInspecteur As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateLog As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal message As String) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendLogs2", New Object() {id, type, idInspecteur, dateLog, message})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendLogs2(ByVal id As Integer, ByVal type As String, ByVal idInspecteur As String, ByVal dateLog As String, ByVal message As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendLogs2", New Object() {id, type, idInspecteur, dateLog, message}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendLogs2(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendLogs2Async(ByVal id As Integer, ByVal type As String, ByVal idInspecteur As String, ByVal dateLog As String, ByVal message As String)
            Me.SendLogs2Async(id, type, idInspecteur, dateLog, message, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendLogs2Async(ByVal id As Integer, ByVal type As String, ByVal idInspecteur As String, ByVal dateLog As String, ByVal message As String, ByVal userState As Object)
            If (Me.SendLogs2OperationCompleted Is Nothing) Then
                Me.SendLogs2OperationCompleted = AddressOf Me.OnSendLogs2OperationCompleted
            End If
            Me.InvokeAsync("SendLogs2", New Object() {id, type, idInspecteur, dateLog, message}, Me.SendLogs2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendLogs2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendLogs2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendLogs2Completed(Me, New SendLogs2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Agent)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/getAgent", RequestElementName:="GetAgentRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetAgent(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal numeroNational As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Agent As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetAgent", New Object() {numeroNational})
            Agent = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAgent(ByVal numeroNational As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAgent", New Object() {numeroNational}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAgent(ByVal asyncResult As System.IAsyncResult, ByRef Agent As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Agent = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentAsync(ByVal numeroNational As String)
            Me.GetAgentAsync(numeroNational, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentAsync(ByVal numeroNational As String, ByVal userState As Object)
            If (Me.GetAgentOperationCompleted Is Nothing) Then
                Me.GetAgentOperationCompleted = AddressOf Me.OnGetAgentOperationCompleted
            End If
            Me.InvokeAsync("GetAgent", New Object() {numeroNational}, Me.GetAgentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentCompleted(Me, New GetAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Agent)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/sendAgent", RequestElementName:="SendAgentRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendAgent(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal AgentRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Agent As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendAgent", New Object() {AgentRequest})
            Agent = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendAgent(ByVal AgentRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendAgent", New Object() {AgentRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendAgent(ByVal asyncResult As System.IAsyncResult, ByRef Agent As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Agent = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendAgentAsync(ByVal AgentRequest As Object)
            Me.SendAgentAsync(AgentRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAgentAsync(ByVal AgentRequest As Object, ByVal userState As Object)
            If (Me.SendAgentOperationCompleted Is Nothing) Then
                Me.SendAgentOperationCompleted = AddressOf Me.OnSendAgentOperationCompleted
            End If
            Me.InvokeAsync("SendAgent", New Object() {AgentRequest}, Me.SendAgentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendAgentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendAgentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendAgentCompleted(Me, New SendAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/sendAgent2", RequestElementName:="SendAgent2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendAgent2( _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal numeroNational As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal motDePasse As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal nom As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal prenom As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal telephonePortable As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal eMail As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal statut As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal niveauQualification As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateCreation As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateDerniereConnexion As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateDerniereSynchro As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal versionLogiciel As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal commentaire As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal cleActivation As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isActif As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Agent As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendAgent2", New Object() {id, numeroNational, motDePasse, nom, prenom, idStructure, telephonePortable, eMail, statut, niveauQualification, dateCreation, dateDerniereConnexion, dateDerniereSynchro, dateModificationCrodip, dateModificationAgent, versionLogiciel, commentaire, cleActivation, isActif})
            Agent = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendAgent2( _
                    ByVal id As Integer,  _
                    ByVal numeroNational As String,  _
                    ByVal motDePasse As String,  _
                    ByVal nom As String,  _
                    ByVal prenom As String,  _
                    ByVal idStructure As Integer,  _
                    ByVal telephonePortable As String,  _
                    ByVal eMail As String,  _
                    ByVal statut As String,  _
                    ByVal niveauQualification As String,  _
                    ByVal dateCreation As String,  _
                    ByVal dateDerniereConnexion As String,  _
                    ByVal dateDerniereSynchro As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal versionLogiciel As String,  _
                    ByVal commentaire As String,  _
                    ByVal cleActivation As String,  _
                    ByVal isActif As Boolean,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendAgent2", New Object() {id, numeroNational, motDePasse, nom, prenom, idStructure, telephonePortable, eMail, statut, niveauQualification, dateCreation, dateDerniereConnexion, dateDerniereSynchro, dateModificationCrodip, dateModificationAgent, versionLogiciel, commentaire, cleActivation, isActif}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendAgent2(ByVal asyncResult As System.IAsyncResult, ByRef Agent As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Agent = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendAgent2Async( _
                    ByVal id As Integer,  _
                    ByVal numeroNational As String,  _
                    ByVal motDePasse As String,  _
                    ByVal nom As String,  _
                    ByVal prenom As String,  _
                    ByVal idStructure As Integer,  _
                    ByVal telephonePortable As String,  _
                    ByVal eMail As String,  _
                    ByVal statut As String,  _
                    ByVal niveauQualification As String,  _
                    ByVal dateCreation As String,  _
                    ByVal dateDerniereConnexion As String,  _
                    ByVal dateDerniereSynchro As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal versionLogiciel As String,  _
                    ByVal commentaire As String,  _
                    ByVal cleActivation As String,  _
                    ByVal isActif As Boolean)
            Me.SendAgent2Async(id, numeroNational, motDePasse, nom, prenom, idStructure, telephonePortable, eMail, statut, niveauQualification, dateCreation, dateDerniereConnexion, dateDerniereSynchro, dateModificationCrodip, dateModificationAgent, versionLogiciel, commentaire, cleActivation, isActif, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAgent2Async( _
                    ByVal id As Integer,  _
                    ByVal numeroNational As String,  _
                    ByVal motDePasse As String,  _
                    ByVal nom As String,  _
                    ByVal prenom As String,  _
                    ByVal idStructure As Integer,  _
                    ByVal telephonePortable As String,  _
                    ByVal eMail As String,  _
                    ByVal statut As String,  _
                    ByVal niveauQualification As String,  _
                    ByVal dateCreation As String,  _
                    ByVal dateDerniereConnexion As String,  _
                    ByVal dateDerniereSynchro As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal versionLogiciel As String,  _
                    ByVal commentaire As String,  _
                    ByVal cleActivation As String,  _
                    ByVal isActif As Boolean,  _
                    ByVal userState As Object)
            If (Me.SendAgent2OperationCompleted Is Nothing) Then
                Me.SendAgent2OperationCompleted = AddressOf Me.OnSendAgent2OperationCompleted
            End If
            Me.InvokeAsync("SendAgent2", New Object() {id, numeroNational, motDePasse, nom, prenom, idStructure, telephonePortable, eMail, statut, niveauQualification, dateCreation, dateDerniereConnexion, dateDerniereSynchro, dateModificationCrodip, dateModificationAgent, versionLogiciel, commentaire, cleActivation, isActif}, Me.SendAgent2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendAgent2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendAgent2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendAgent2Completed(Me, New SendAgent2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Agent)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SetDateSynchroAgent", RequestElementName:="SetDateSynchroAgentRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SetDateSynchroAgent(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateDerniereSynchro As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SetDateSynchroAgent", New Object() {agentId, dateDerniereSynchro})
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSetDateSynchroAgent(ByVal agentId As Object, ByVal dateDerniereSynchro As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SetDateSynchroAgent", New Object() {agentId, dateDerniereSynchro}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSetDateSynchroAgent(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetDateSynchroAgentAsync(ByVal agentId As Object, ByVal dateDerniereSynchro As Object)
            Me.SetDateSynchroAgentAsync(agentId, dateDerniereSynchro, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetDateSynchroAgentAsync(ByVal agentId As Object, ByVal dateDerniereSynchro As Object, ByVal userState As Object)
            If (Me.SetDateSynchroAgentOperationCompleted Is Nothing) Then
                Me.SetDateSynchroAgentOperationCompleted = AddressOf Me.OnSetDateSynchroAgentOperationCompleted
            End If
            Me.InvokeAsync("SetDateSynchroAgent", New Object() {agentId, dateDerniereSynchro}, Me.SetDateSynchroAgentOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetDateSynchroAgentOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetDateSynchroAgentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetDateSynchroAgentCompleted(Me, New SetDateSynchroAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(PrestationCategorie)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetPrestationCategorie", RequestElementName:="GetPrestationCategorieRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetPrestationCategorie(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef PrestationCategorie As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetPrestationCategorie", New Object() {agentId, id, idStructure})
            PrestationCategorie = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPrestationCategorie(ByVal agentId As String, ByVal id As String, ByVal idStructure As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPrestationCategorie", New Object() {agentId, id, idStructure}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPrestationCategorie(ByVal asyncResult As System.IAsyncResult, ByRef PrestationCategorie As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            PrestationCategorie = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPrestationCategorieAsync(ByVal agentId As String, ByVal id As String, ByVal idStructure As String)
            Me.GetPrestationCategorieAsync(agentId, id, idStructure, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPrestationCategorieAsync(ByVal agentId As String, ByVal id As String, ByVal idStructure As String, ByVal userState As Object)
            If (Me.GetPrestationCategorieOperationCompleted Is Nothing) Then
                Me.GetPrestationCategorieOperationCompleted = AddressOf Me.OnGetPrestationCategorieOperationCompleted
            End If
            Me.InvokeAsync("GetPrestationCategorie", New Object() {agentId, id, idStructure}, Me.GetPrestationCategorieOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPrestationCategorieOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPrestationCategorieCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPrestationCategorieCompleted(Me, New GetPrestationCategorieCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(PrestationCategorie)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendPrestationCategorie", RequestElementName:="SendPrestationCategorieRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendPrestationCategorie(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal PrestationCategorieRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef PrestationCategorie As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendPrestationCategorie", New Object() {agentId, PrestationCategorieRequest})
            PrestationCategorie = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendPrestationCategorie(ByVal agentId As String, ByVal PrestationCategorieRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendPrestationCategorie", New Object() {agentId, PrestationCategorieRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendPrestationCategorie(ByVal asyncResult As System.IAsyncResult, ByRef PrestationCategorie As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            PrestationCategorie = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendPrestationCategorieAsync(ByVal agentId As String, ByVal PrestationCategorieRequest As Object)
            Me.SendPrestationCategorieAsync(agentId, PrestationCategorieRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendPrestationCategorieAsync(ByVal agentId As String, ByVal PrestationCategorieRequest As Object, ByVal userState As Object)
            If (Me.SendPrestationCategorieOperationCompleted Is Nothing) Then
                Me.SendPrestationCategorieOperationCompleted = AddressOf Me.OnSendPrestationCategorieOperationCompleted
            End If
            Me.InvokeAsync("SendPrestationCategorie", New Object() {agentId, PrestationCategorieRequest}, Me.SendPrestationCategorieOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendPrestationCategorieOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendPrestationCategorieCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendPrestationCategorieCompleted(Me, New SendPrestationCategorieCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendPrestationCategorie2", RequestElementName:="SendPrestationCategorie2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendPrestationCategorie2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal libelle As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef PrestationCategorie As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendPrestationCategorie2", New Object() {id, idStructure, libelle, dateModificationAgent, dateModificationCrodip})
            PrestationCategorie = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendPrestationCategorie2(ByVal id As Integer, ByVal idStructure As Integer, ByVal libelle As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendPrestationCategorie2", New Object() {id, idStructure, libelle, dateModificationAgent, dateModificationCrodip}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendPrestationCategorie2(ByVal asyncResult As System.IAsyncResult, ByRef PrestationCategorie As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            PrestationCategorie = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendPrestationCategorie2Async(ByVal id As Integer, ByVal idStructure As Integer, ByVal libelle As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String)
            Me.SendPrestationCategorie2Async(id, idStructure, libelle, dateModificationAgent, dateModificationCrodip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendPrestationCategorie2Async(ByVal id As Integer, ByVal idStructure As Integer, ByVal libelle As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal userState As Object)
            If (Me.SendPrestationCategorie2OperationCompleted Is Nothing) Then
                Me.SendPrestationCategorie2OperationCompleted = AddressOf Me.OnSendPrestationCategorie2OperationCompleted
            End If
            Me.InvokeAsync("SendPrestationCategorie2", New Object() {id, idStructure, libelle, dateModificationAgent, dateModificationCrodip}, Me.SendPrestationCategorie2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendPrestationCategorie2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendPrestationCategorie2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendPrestationCategorie2Completed(Me, New SendPrestationCategorie2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(PrestationTarif)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetPrestationTarif", RequestElementName:="GetPrestationTarifRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetPrestationTarif(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idCategorie As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef PrestationTarif As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetPrestationTarif", New Object() {agentId, id, idStructure, idCategorie})
            PrestationTarif = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPrestationTarif(ByVal agentId As String, ByVal id As String, ByVal idStructure As String, ByVal idCategorie As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPrestationTarif", New Object() {agentId, id, idStructure, idCategorie}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPrestationTarif(ByVal asyncResult As System.IAsyncResult, ByRef PrestationTarif As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            PrestationTarif = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPrestationTarifAsync(ByVal agentId As String, ByVal id As String, ByVal idStructure As String, ByVal idCategorie As String)
            Me.GetPrestationTarifAsync(agentId, id, idStructure, idCategorie, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPrestationTarifAsync(ByVal agentId As String, ByVal id As String, ByVal idStructure As String, ByVal idCategorie As String, ByVal userState As Object)
            If (Me.GetPrestationTarifOperationCompleted Is Nothing) Then
                Me.GetPrestationTarifOperationCompleted = AddressOf Me.OnGetPrestationTarifOperationCompleted
            End If
            Me.InvokeAsync("GetPrestationTarif", New Object() {agentId, id, idStructure, idCategorie}, Me.GetPrestationTarifOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPrestationTarifOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPrestationTarifCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPrestationTarifCompleted(Me, New GetPrestationTarifCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(PrestationTarif)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendPrestationTarif", RequestElementName:="SendPrestationTarifRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendPrestationTarif(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal PrestationTarifRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef PrestationTarif As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendPrestationTarif", New Object() {agentId, PrestationTarifRequest})
            PrestationTarif = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendPrestationTarif(ByVal agentId As String, ByVal PrestationTarifRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendPrestationTarif", New Object() {agentId, PrestationTarifRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendPrestationTarif(ByVal asyncResult As System.IAsyncResult, ByRef PrestationTarif As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            PrestationTarif = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendPrestationTarifAsync(ByVal agentId As String, ByVal PrestationTarifRequest As Object)
            Me.SendPrestationTarifAsync(agentId, PrestationTarifRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendPrestationTarifAsync(ByVal agentId As String, ByVal PrestationTarifRequest As Object, ByVal userState As Object)
            If (Me.SendPrestationTarifOperationCompleted Is Nothing) Then
                Me.SendPrestationTarifOperationCompleted = AddressOf Me.OnSendPrestationTarifOperationCompleted
            End If
            Me.InvokeAsync("SendPrestationTarif", New Object() {agentId, PrestationTarifRequest}, Me.SendPrestationTarifOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendPrestationTarifOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendPrestationTarifCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendPrestationTarifCompleted(Me, New SendPrestationTarifCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendPrestationTarif2", RequestElementName:="SendPrestationTarif2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendPrestationTarif2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idCategorie As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal description As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tarifHT As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tarifTTC As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tva As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef PrestationTarif As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendPrestationTarif2", New Object() {id, idCategorie, idStructure, description, tarifHT, tarifTTC, tva, dateModificationAgent, dateModificationCrodip})
            PrestationTarif = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendPrestationTarif2(ByVal id As Integer, ByVal idCategorie As Integer, ByVal idStructure As Integer, ByVal description As String, ByVal tarifHT As String, ByVal tarifTTC As String, ByVal tva As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendPrestationTarif2", New Object() {id, idCategorie, idStructure, description, tarifHT, tarifTTC, tva, dateModificationAgent, dateModificationCrodip}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendPrestationTarif2(ByVal asyncResult As System.IAsyncResult, ByRef PrestationTarif As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            PrestationTarif = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendPrestationTarif2Async(ByVal id As Integer, ByVal idCategorie As Integer, ByVal idStructure As Integer, ByVal description As String, ByVal tarifHT As String, ByVal tarifTTC As String, ByVal tva As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String)
            Me.SendPrestationTarif2Async(id, idCategorie, idStructure, description, tarifHT, tarifTTC, tva, dateModificationAgent, dateModificationCrodip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendPrestationTarif2Async(ByVal id As Integer, ByVal idCategorie As Integer, ByVal idStructure As Integer, ByVal description As String, ByVal tarifHT As String, ByVal tarifTTC As String, ByVal tva As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal userState As Object)
            If (Me.SendPrestationTarif2OperationCompleted Is Nothing) Then
                Me.SendPrestationTarif2OperationCompleted = AddressOf Me.OnSendPrestationTarif2OperationCompleted
            End If
            Me.InvokeAsync("SendPrestationTarif2", New Object() {id, idCategorie, idStructure, description, tarifHT, tarifTTC, tva, dateModificationAgent, dateModificationCrodip}, Me.SendPrestationTarif2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendPrestationTarif2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendPrestationTarif2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendPrestationTarif2Completed(Me, New SendPrestationTarif2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Buse)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetBuse", RequestElementName:="GetBuseRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetBuse(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal numeroNational As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Buse As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetBuse", New Object() {agentId, numeroNational})
            Buse = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetBuse(ByVal agentId As String, ByVal numeroNational As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetBuse", New Object() {agentId, numeroNational}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetBuse(ByVal asyncResult As System.IAsyncResult, ByRef Buse As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Buse = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBuseAsync(ByVal agentId As String, ByVal numeroNational As String)
            Me.GetBuseAsync(agentId, numeroNational, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBuseAsync(ByVal agentId As String, ByVal numeroNational As String, ByVal userState As Object)
            If (Me.GetBuseOperationCompleted Is Nothing) Then
                Me.GetBuseOperationCompleted = AddressOf Me.OnGetBuseOperationCompleted
            End If
            Me.InvokeAsync("GetBuse", New Object() {agentId, numeroNational}, Me.GetBuseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBuseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBuseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBuseCompleted(Me, New GetBuseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Buse)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendBuse", RequestElementName:="SendBuseRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendBuse(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal BuseRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Buse As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendBuse", New Object() {agentId, BuseRequest})
            Buse = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendBuse(ByVal agentId As String, ByVal BuseRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendBuse", New Object() {agentId, BuseRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendBuse(ByVal asyncResult As System.IAsyncResult, ByRef Buse As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Buse = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendBuseAsync(ByVal agentId As String, ByVal BuseRequest As Object)
            Me.SendBuseAsync(agentId, BuseRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendBuseAsync(ByVal agentId As String, ByVal BuseRequest As Object, ByVal userState As Object)
            If (Me.SendBuseOperationCompleted Is Nothing) Then
                Me.SendBuseOperationCompleted = AddressOf Me.OnSendBuseOperationCompleted
            End If
            Me.InvokeAsync("SendBuse", New Object() {agentId, BuseRequest}, Me.SendBuseOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendBuseOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendBuseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendBuseCompleted(Me, New SendBuseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendBuse2", RequestElementName:="SendBuse2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendBuse2( _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal numeroNational As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal marque As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal type As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal couleur As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pressionEtalonnage As Double,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal debitEtalonnage As Double,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isSynchro As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateAchat As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal etat As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isSupprime As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isUtilise As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idCrodip As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Buse As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendBuse2", New Object() {numeroNational, marque, type, couleur, pressionEtalonnage, debitEtalonnage, idStructure, isSynchro, dateAchat, dateModificationAgent, dateModificationCrodip, etat, isSupprime, isUtilise, idCrodip})
            Buse = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendBuse2( _
                    ByVal numeroNational As String,  _
                    ByVal marque As String,  _
                    ByVal type As String,  _
                    ByVal couleur As String,  _
                    ByVal pressionEtalonnage As Double,  _
                    ByVal debitEtalonnage As Double,  _
                    ByVal idStructure As Integer,  _
                    ByVal isSynchro As Boolean,  _
                    ByVal dateAchat As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal etat As Boolean,  _
                    ByVal isSupprime As Boolean,  _
                    ByVal isUtilise As Boolean,  _
                    ByVal idCrodip As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendBuse2", New Object() {numeroNational, marque, type, couleur, pressionEtalonnage, debitEtalonnage, idStructure, isSynchro, dateAchat, dateModificationAgent, dateModificationCrodip, etat, isSupprime, isUtilise, idCrodip}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendBuse2(ByVal asyncResult As System.IAsyncResult, ByRef Buse As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Buse = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendBuse2Async(ByVal numeroNational As String, ByVal marque As String, ByVal type As String, ByVal couleur As String, ByVal pressionEtalonnage As Double, ByVal debitEtalonnage As Double, ByVal idStructure As Integer, ByVal isSynchro As Boolean, ByVal dateAchat As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal etat As Boolean, ByVal isSupprime As Boolean, ByVal isUtilise As Boolean, ByVal idCrodip As String)
            Me.SendBuse2Async(numeroNational, marque, type, couleur, pressionEtalonnage, debitEtalonnage, idStructure, isSynchro, dateAchat, dateModificationAgent, dateModificationCrodip, etat, isSupprime, isUtilise, idCrodip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendBuse2Async( _
                    ByVal numeroNational As String,  _
                    ByVal marque As String,  _
                    ByVal type As String,  _
                    ByVal couleur As String,  _
                    ByVal pressionEtalonnage As Double,  _
                    ByVal debitEtalonnage As Double,  _
                    ByVal idStructure As Integer,  _
                    ByVal isSynchro As Boolean,  _
                    ByVal dateAchat As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal etat As Boolean,  _
                    ByVal isSupprime As Boolean,  _
                    ByVal isUtilise As Boolean,  _
                    ByVal idCrodip As String,  _
                    ByVal userState As Object)
            If (Me.SendBuse2OperationCompleted Is Nothing) Then
                Me.SendBuse2OperationCompleted = AddressOf Me.OnSendBuse2OperationCompleted
            End If
            Me.InvokeAsync("SendBuse2", New Object() {numeroNational, marque, type, couleur, pressionEtalonnage, debitEtalonnage, idStructure, isSynchro, dateAchat, dateModificationAgent, dateModificationCrodip, etat, isSupprime, isUtilise, idCrodip}, Me.SendBuse2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendBuse2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendBuse2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendBuse2Completed(Me, New SendBuse2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ManometreControle)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetManometre", RequestElementName:="GetManometreControleRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetManometreControle(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal numeroNational As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ManometreControle As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetManometreControle", New Object() {agentId, numeroNational})
            ManometreControle = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetManometreControle(ByVal agentId As String, ByVal numeroNational As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetManometreControle", New Object() {agentId, numeroNational}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetManometreControle(ByVal asyncResult As System.IAsyncResult, ByRef ManometreControle As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ManometreControle = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetManometreControleAsync(ByVal agentId As String, ByVal numeroNational As String)
            Me.GetManometreControleAsync(agentId, numeroNational, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetManometreControleAsync(ByVal agentId As String, ByVal numeroNational As String, ByVal userState As Object)
            If (Me.GetManometreControleOperationCompleted Is Nothing) Then
                Me.GetManometreControleOperationCompleted = AddressOf Me.OnGetManometreControleOperationCompleted
            End If
            Me.InvokeAsync("GetManometreControle", New Object() {agentId, numeroNational}, Me.GetManometreControleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetManometreControleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetManometreControleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetManometreControleCompleted(Me, New GetManometreControleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ManometreControle)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendManometre", RequestElementName:="SendManometreControleRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendManometreControle(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal ManometreControleRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ManometreControle As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendManometreControle", New Object() {agentId, ManometreControleRequest})
            ManometreControle = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendManometreControle(ByVal agentId As String, ByVal ManometreControleRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendManometreControle", New Object() {agentId, ManometreControleRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendManometreControle(ByVal asyncResult As System.IAsyncResult, ByRef ManometreControle As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ManometreControle = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendManometreControleAsync(ByVal agentId As String, ByVal ManometreControleRequest As Object)
            Me.SendManometreControleAsync(agentId, ManometreControleRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendManometreControleAsync(ByVal agentId As String, ByVal ManometreControleRequest As Object, ByVal userState As Object)
            If (Me.SendManometreControleOperationCompleted Is Nothing) Then
                Me.SendManometreControleOperationCompleted = AddressOf Me.OnSendManometreControleOperationCompleted
            End If
            Me.InvokeAsync("SendManometreControle", New Object() {agentId, ManometreControleRequest}, Me.SendManometreControleOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendManometreControleOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendManometreControleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendManometreControleCompleted(Me, New SendManometreControleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendManometre2", RequestElementName:="SendManometreControle2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendManometreControle2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal numeroNational As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal marque As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal classe As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal type As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal fondEchelle As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal etat As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal resolution As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isSynchro As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateDernierControle As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isUtilise As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idCrodip As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ManometreControle As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendManometreControle2", New Object() {numeroNational, marque, classe, type, fondEchelle, etat, resolution, idStructure, isSynchro, dateDernierControle, dateModificationCrodip, dateModificationAgent, isUtilise, idCrodip})
            ManometreControle = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendManometreControle2( _
                    ByVal numeroNational As String,  _
                    ByVal marque As String,  _
                    ByVal classe As String,  _
                    ByVal type As String,  _
                    ByVal fondEchelle As String,  _
                    ByVal etat As Integer,  _
                    ByVal resolution As String,  _
                    ByVal idStructure As Integer,  _
                    ByVal isSynchro As Integer,  _
                    ByVal dateDernierControle As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal isUtilise As Boolean,  _
                    ByVal idCrodip As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendManometreControle2", New Object() {numeroNational, marque, classe, type, fondEchelle, etat, resolution, idStructure, isSynchro, dateDernierControle, dateModificationCrodip, dateModificationAgent, isUtilise, idCrodip}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendManometreControle2(ByVal asyncResult As System.IAsyncResult, ByRef ManometreControle As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ManometreControle = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendManometreControle2Async(ByVal numeroNational As String, ByVal marque As String, ByVal classe As String, ByVal type As String, ByVal fondEchelle As String, ByVal etat As Integer, ByVal resolution As String, ByVal idStructure As Integer, ByVal isSynchro As Integer, ByVal dateDernierControle As String, ByVal dateModificationCrodip As String, ByVal dateModificationAgent As String, ByVal isUtilise As Boolean, ByVal idCrodip As String)
            Me.SendManometreControle2Async(numeroNational, marque, classe, type, fondEchelle, etat, resolution, idStructure, isSynchro, dateDernierControle, dateModificationCrodip, dateModificationAgent, isUtilise, idCrodip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendManometreControle2Async(ByVal numeroNational As String, ByVal marque As String, ByVal classe As String, ByVal type As String, ByVal fondEchelle As String, ByVal etat As Integer, ByVal resolution As String, ByVal idStructure As Integer, ByVal isSynchro As Integer, ByVal dateDernierControle As String, ByVal dateModificationCrodip As String, ByVal dateModificationAgent As String, ByVal isUtilise As Boolean, ByVal idCrodip As String, ByVal userState As Object)
            If (Me.SendManometreControle2OperationCompleted Is Nothing) Then
                Me.SendManometreControle2OperationCompleted = AddressOf Me.OnSendManometreControle2OperationCompleted
            End If
            Me.InvokeAsync("SendManometreControle2", New Object() {numeroNational, marque, classe, type, fondEchelle, etat, resolution, idStructure, isSynchro, dateDernierControle, dateModificationCrodip, dateModificationAgent, isUtilise, idCrodip}, Me.SendManometreControle2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendManometreControle2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendManometreControle2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendManometreControle2Completed(Me, New SendManometreControle2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ManometreEtalon)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetManometre", RequestElementName:="GetManometreEtalonRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetManometreEtalon(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal numeroNational As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ManometreEtalon As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetManometreEtalon", New Object() {agentId, numeroNational})
            ManometreEtalon = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetManometreEtalon(ByVal agentId As String, ByVal numeroNational As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetManometreEtalon", New Object() {agentId, numeroNational}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetManometreEtalon(ByVal asyncResult As System.IAsyncResult, ByRef ManometreEtalon As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ManometreEtalon = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetManometreEtalonAsync(ByVal agentId As String, ByVal numeroNational As String)
            Me.GetManometreEtalonAsync(agentId, numeroNational, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetManometreEtalonAsync(ByVal agentId As String, ByVal numeroNational As String, ByVal userState As Object)
            If (Me.GetManometreEtalonOperationCompleted Is Nothing) Then
                Me.GetManometreEtalonOperationCompleted = AddressOf Me.OnGetManometreEtalonOperationCompleted
            End If
            Me.InvokeAsync("GetManometreEtalon", New Object() {agentId, numeroNational}, Me.GetManometreEtalonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetManometreEtalonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetManometreEtalonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetManometreEtalonCompleted(Me, New GetManometreEtalonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ManometreEtalon)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendManometre", RequestElementName:="SendManometreEtalonRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendManometreEtalon(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal ManometreEtalonRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ManometreEtalon As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendManometreEtalon", New Object() {agentId, ManometreEtalonRequest})
            ManometreEtalon = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendManometreEtalon(ByVal agentId As String, ByVal ManometreEtalonRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendManometreEtalon", New Object() {agentId, ManometreEtalonRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendManometreEtalon(ByVal asyncResult As System.IAsyncResult, ByRef ManometreEtalon As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ManometreEtalon = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendManometreEtalonAsync(ByVal agentId As String, ByVal ManometreEtalonRequest As Object)
            Me.SendManometreEtalonAsync(agentId, ManometreEtalonRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendManometreEtalonAsync(ByVal agentId As String, ByVal ManometreEtalonRequest As Object, ByVal userState As Object)
            If (Me.SendManometreEtalonOperationCompleted Is Nothing) Then
                Me.SendManometreEtalonOperationCompleted = AddressOf Me.OnSendManometreEtalonOperationCompleted
            End If
            Me.InvokeAsync("SendManometreEtalon", New Object() {agentId, ManometreEtalonRequest}, Me.SendManometreEtalonOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendManometreEtalonOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendManometreEtalonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendManometreEtalonCompleted(Me, New SendManometreEtalonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendManometre2", RequestElementName:="SendManometreEtalon2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendManometreEtalon2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal numeroNational As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal marque As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal classe As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal type As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal fondEchelle As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isSynchro As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateDernierControle As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal etat As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isUtilise As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idCrodip As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ManometreEtalon As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendManometreEtalon2", New Object() {numeroNational, marque, classe, type, fondEchelle, idStructure, isSynchro, dateDernierControle, etat, dateModificationAgent, dateModificationCrodip, isUtilise, idCrodip})
            ManometreEtalon = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendManometreEtalon2(ByVal numeroNational As String, ByVal marque As String, ByVal classe As String, ByVal type As String, ByVal fondEchelle As String, ByVal idStructure As Integer, ByVal isSynchro As Boolean, ByVal dateDernierControle As String, ByVal etat As Boolean, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal isUtilise As Boolean, ByVal idCrodip As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendManometreEtalon2", New Object() {numeroNational, marque, classe, type, fondEchelle, idStructure, isSynchro, dateDernierControle, etat, dateModificationAgent, dateModificationCrodip, isUtilise, idCrodip}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendManometreEtalon2(ByVal asyncResult As System.IAsyncResult, ByRef ManometreEtalon As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ManometreEtalon = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendManometreEtalon2Async(ByVal numeroNational As String, ByVal marque As String, ByVal classe As String, ByVal type As String, ByVal fondEchelle As String, ByVal idStructure As Integer, ByVal isSynchro As Boolean, ByVal dateDernierControle As String, ByVal etat As Boolean, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal isUtilise As Boolean, ByVal idCrodip As String)
            Me.SendManometreEtalon2Async(numeroNational, marque, classe, type, fondEchelle, idStructure, isSynchro, dateDernierControle, etat, dateModificationAgent, dateModificationCrodip, isUtilise, idCrodip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendManometreEtalon2Async(ByVal numeroNational As String, ByVal marque As String, ByVal classe As String, ByVal type As String, ByVal fondEchelle As String, ByVal idStructure As Integer, ByVal isSynchro As Boolean, ByVal dateDernierControle As String, ByVal etat As Boolean, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal isUtilise As Boolean, ByVal idCrodip As String, ByVal userState As Object)
            If (Me.SendManometreEtalon2OperationCompleted Is Nothing) Then
                Me.SendManometreEtalon2OperationCompleted = AddressOf Me.OnSendManometreEtalon2OperationCompleted
            End If
            Me.InvokeAsync("SendManometreEtalon2", New Object() {numeroNational, marque, classe, type, fondEchelle, idStructure, isSynchro, dateDernierControle, etat, dateModificationAgent, dateModificationCrodip, isUtilise, idCrodip}, Me.SendManometreEtalon2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendManometreEtalon2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendManometreEtalon2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendManometreEtalon2Completed(Me, New SendManometreEtalon2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Banc)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetBanc", RequestElementName:="GetBancRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetBanc(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Banc As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetBanc", New Object() {agentId, id})
            Banc = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetBanc(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetBanc", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetBanc(ByVal asyncResult As System.IAsyncResult, ByRef Banc As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Banc = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBancAsync(ByVal agentId As String, ByVal id As String)
            Me.GetBancAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBancAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetBancOperationCompleted Is Nothing) Then
                Me.GetBancOperationCompleted = AddressOf Me.OnGetBancOperationCompleted
            End If
            Me.InvokeAsync("GetBanc", New Object() {agentId, id}, Me.GetBancOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBancOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBancCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBancCompleted(Me, New GetBancCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Banc)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendBanc", RequestElementName:="SendBancRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendBanc(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal BancRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Banc As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendBanc", New Object() {agentId, BancRequest})
            Banc = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendBanc(ByVal agentId As String, ByVal BancRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendBanc", New Object() {agentId, BancRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendBanc(ByVal asyncResult As System.IAsyncResult, ByRef Banc As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Banc = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendBancAsync(ByVal agentId As String, ByVal BancRequest As Object)
            Me.SendBancAsync(agentId, BancRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendBancAsync(ByVal agentId As String, ByVal BancRequest As Object, ByVal userState As Object)
            If (Me.SendBancOperationCompleted Is Nothing) Then
                Me.SendBancOperationCompleted = AddressOf Me.OnSendBancOperationCompleted
            End If
            Me.InvokeAsync("SendBanc", New Object() {agentId, BancRequest}, Me.SendBancOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendBancOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendBancCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendBancCompleted(Me, New SendBancCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendBanc2", RequestElementName:="SendBanc2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendBanc2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal marque As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal modele As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateAchat As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal etat As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateDernierControle As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isUtilise As Boolean, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Banc As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendBanc2", New Object() {id, marque, modele, dateAchat, etat, idStructure, dateDernierControle, dateModificationAgent, dateModificationCrodip, isUtilise})
            Banc = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendBanc2(ByVal id As String, ByVal marque As String, ByVal modele As String, ByVal dateAchat As String, ByVal etat As Boolean, ByVal idStructure As Integer, ByVal dateDernierControle As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal isUtilise As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendBanc2", New Object() {id, marque, modele, dateAchat, etat, idStructure, dateDernierControle, dateModificationAgent, dateModificationCrodip, isUtilise}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendBanc2(ByVal asyncResult As System.IAsyncResult, ByRef Banc As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Banc = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendBanc2Async(ByVal id As String, ByVal marque As String, ByVal modele As String, ByVal dateAchat As String, ByVal etat As Boolean, ByVal idStructure As Integer, ByVal dateDernierControle As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal isUtilise As Boolean)
            Me.SendBanc2Async(id, marque, modele, dateAchat, etat, idStructure, dateDernierControle, dateModificationAgent, dateModificationCrodip, isUtilise, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendBanc2Async(ByVal id As String, ByVal marque As String, ByVal modele As String, ByVal dateAchat As String, ByVal etat As Boolean, ByVal idStructure As Integer, ByVal dateDernierControle As String, ByVal dateModificationAgent As String, ByVal dateModificationCrodip As String, ByVal isUtilise As Boolean, ByVal userState As Object)
            If (Me.SendBanc2OperationCompleted Is Nothing) Then
                Me.SendBanc2OperationCompleted = AddressOf Me.OnSendBanc2OperationCompleted
            End If
            Me.InvokeAsync("SendBanc2", New Object() {id, marque, modele, dateAchat, etat, idStructure, dateDernierControle, dateModificationAgent, dateModificationCrodip, isUtilise}, Me.SendBanc2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendBanc2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendBanc2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendBanc2Completed(Me, New SendBanc2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetDiagnostic", RequestElementName:="GetDiagnosticRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetDiagnostic(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Diagnostic As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetDiagnostic", New Object() {agentId, id})
            Diagnostic = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDiagnostic(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDiagnostic", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDiagnostic(ByVal asyncResult As System.IAsyncResult, ByRef Diagnostic As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Diagnostic = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticAsync(ByVal agentId As String, ByVal id As String)
            Me.GetDiagnosticAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetDiagnosticOperationCompleted Is Nothing) Then
                Me.GetDiagnosticOperationCompleted = AddressOf Me.OnGetDiagnosticOperationCompleted
            End If
            Me.InvokeAsync("GetDiagnostic", New Object() {agentId, id}, Me.GetDiagnosticOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDiagnosticOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDiagnosticCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDiagnosticCompleted(Me, New GetDiagnosticCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendDiagnostic", RequestElementName:="SendDiagnosticRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendDiagnostic(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal DiagnosticRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Diagnostic As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendDiagnostic", New Object() {agentId, DiagnosticRequest})
            Diagnostic = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendDiagnostic(ByVal agentId As String, ByVal DiagnosticRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendDiagnostic", New Object() {agentId, DiagnosticRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendDiagnostic(ByVal asyncResult As System.IAsyncResult, ByRef Diagnostic As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Diagnostic = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticAsync(ByVal agentId As String, ByVal DiagnosticRequest As Object)
            Me.SendDiagnosticAsync(agentId, DiagnosticRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticAsync(ByVal agentId As String, ByVal DiagnosticRequest As Object, ByVal userState As Object)
            If (Me.SendDiagnosticOperationCompleted Is Nothing) Then
                Me.SendDiagnosticOperationCompleted = AddressOf Me.OnSendDiagnosticOperationCompleted
            End If
            Me.InvokeAsync("SendDiagnostic", New Object() {agentId, DiagnosticRequest}, Me.SendDiagnosticOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendDiagnosticOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendDiagnosticCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendDiagnosticCompleted(Me, New SendDiagnosticCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendDiagnostic2", RequestElementName:="SendDiagnostic2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendDiagnostic2( _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal inspecteurId As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal inspecteurNom As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal inspecteurPrenom As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleTarif As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleDateDebut As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleDateFin As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleLieu As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleTerritoire As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleCommune As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleCodePostal As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleSite As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleNomSite As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleIsComplet As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controlePremierControle As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleEtat As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleDateDernierControle As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleIsSiteSecurise As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleIsRecupResidus As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleInfosConseils As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleIsPulveRepare As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal organismePresId As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal organismePresNumero As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal organismePresNom As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal organismeInspNom As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal organismeInspAgrement As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireId As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireNom As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietairePrenom As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireNumeroSiren As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireRaisonSociale As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireCodeApe As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireCommune As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireCodePostal As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireEmail As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireTelephoneFixe As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireTelephonePortable As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurId As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurType As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurMarque As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurModele As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurCapacite As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurLargeurPlantation As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurLargeur As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurNbRangs As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsVentilateur As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsDebrayage As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurAnneeAchat As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurSurface As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurNombreUtilisateurs As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsCuveRincage As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurCapaciteCuveRincage As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsCuveIncorporation As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsRinceBidon As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsBidonLaveMain As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsLanceLavageExterieur As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsRotobuse As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurCategorieIsRampe As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurCategorieIsAxial As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurCategorieIsJetDirige As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurCategorieIsCanon As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurCategorieIsVoute As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurCategorieIsFaceParFace As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurAttelage As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurRegulationIsPressionConstante As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurRegulationIsDpm As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurRegulationIsDpa As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurRegulationIsDpae As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurRegulationIsPression As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurRegulationIsDebit As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsJetProjete As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsJetPorte As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurIsPneumatique As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pulverisateurAutresAccessoires As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseMarque As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseCouleur As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseGenre As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseCalibre As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseDebit As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseDebit2bars As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseDebit3bars As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseAge As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseNbBuses As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseType As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseAngle As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseFonctionnementIsStandard As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseFonctionnementIsPastilleChambre As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseFonctionnementIsInjectionAirLibre As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseFonctionnementIsInjectionAirForce As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buseIsIso As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal manometreMarque As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal manometreDiametre As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal manometreType As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal manometreFondEchelle As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal manometrePressionTravail As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal exploitationTypeCultureIsGrandeCulture As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal exploitationTypeCultureIsLegume As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal exploitationTypeCultureIsElevage As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal exploitationTypeCultureIsArboriculture As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal exploitationTypeCultureIsViticulture As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal exploitationTypeCultureIsAutres As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal exploitationSau As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateSynchro As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isSynchro As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isATGIP As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isTGIP As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isFacture As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal syntheseErreurMoyenneMano As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal syntheseErreurMaxiMano As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal syntheseErreurDebitmetre As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal syntheseErreurMoyenneCinemometre As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal syntheseUsureMoyenneBuses As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal syntheseNbBusesUsees As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal synthesePerteChargeMoyenne As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal synthesePerteChargeMaxi As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleIsPreControleProfessionel As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal controleIsAutoControle As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal proprietaireRepresentant As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Diagnostic As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendDiagnostic2", New Object() {id, inspecteurId, inspecteurNom, inspecteurPrenom, controleTarif, controleDateDebut, controleDateFin, controleLieu, controleTerritoire, controleCommune, controleCodePostal, controleSite, controleNomSite, controleIsComplet, controlePremierControle, controleEtat, controleDateDernierControle, controleIsSiteSecurise, controleIsRecupResidus, controleInfosConseils, controleIsPulveRepare, organismePresId, organismePresNumero, organismePresNom, organismeInspNom, organismeInspAgrement, proprietaireId, proprietaireNom, proprietairePrenom, proprietaireNumeroSiren, proprietaireRaisonSociale, proprietaireCodeApe, proprietaireCommune, proprietaireCodePostal, proprietaireEmail, proprietaireTelephoneFixe, proprietaireTelephonePortable, pulverisateurId, pulverisateurType, pulverisateurMarque, pulverisateurModele, pulverisateurCapacite, pulverisateurLargeurPlantation, pulverisateurLargeur, pulverisateurNbRangs, pulverisateurIsVentilateur, pulverisateurIsDebrayage, pulverisateurAnneeAchat, pulverisateurSurface, pulverisateurNombreUtilisateurs, pulverisateurIsCuveRincage, pulverisateurCapaciteCuveRincage, pulverisateurIsCuveIncorporation, pulverisateurIsRinceBidon, pulverisateurIsBidonLaveMain, pulverisateurIsLanceLavageExterieur, pulverisateurIsRotobuse, pulverisateurCategorieIsRampe, pulverisateurCategorieIsAxial, pulverisateurCategorieIsJetDirige, pulverisateurCategorieIsCanon, pulverisateurCategorieIsVoute, pulverisateurCategorieIsFaceParFace, pulverisateurAttelage, pulverisateurRegulationIsPressionConstante, pulverisateurRegulationIsDpm, pulverisateurRegulationIsDpa, pulverisateurRegulationIsDpae, pulverisateurRegulationIsPression, pulverisateurRegulationIsDebit, pulverisateurIsJetProjete, pulverisateurIsJetPorte, pulverisateurIsPneumatique, pulverisateurAutresAccessoires, buseMarque, buseCouleur, buseGenre, buseCalibre, buseDebit, buseDebit2bars, buseDebit3bars, buseAge, buseNbBuses, buseType, buseAngle, buseFonctionnementIsStandard, buseFonctionnementIsPastilleChambre, buseFonctionnementIsInjectionAirLibre, buseFonctionnementIsInjectionAirForce, buseIsIso, manometreMarque, manometreDiametre, manometreType, manometreFondEchelle, manometrePressionTravail, exploitationTypeCultureIsGrandeCulture, exploitationTypeCultureIsLegume, exploitationTypeCultureIsElevage, exploitationTypeCultureIsArboriculture, exploitationTypeCultureIsViticulture, exploitationTypeCultureIsAutres, exploitationSau, dateSynchro, isSynchro, dateModificationAgent, dateModificationCrodip, isATGIP, isTGIP, isFacture, syntheseErreurMoyenneMano, syntheseErreurMaxiMano, syntheseErreurDebitmetre, syntheseErreurMoyenneCinemometre, syntheseUsureMoyenneBuses, syntheseNbBusesUsees, synthesePerteChargeMoyenne, synthesePerteChargeMaxi, controleIsPreControleProfessionel, controleIsAutoControle, proprietaireRepresentant})
            Diagnostic = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendDiagnostic2( _
                    ByVal id As String,  _
                    ByVal inspecteurId As Integer,  _
                    ByVal inspecteurNom As String,  _
                    ByVal inspecteurPrenom As String,  _
                    ByVal controleTarif As String,  _
                    ByVal controleDateDebut As String,  _
                    ByVal controleDateFin As String,  _
                    ByVal controleLieu As String,  _
                    ByVal controleTerritoire As String,  _
                    ByVal controleCommune As String,  _
                    ByVal controleCodePostal As Integer,  _
                    ByVal controleSite As Integer,  _
                    ByVal controleNomSite As Integer,  _
                    ByVal controleIsComplet As Boolean,  _
                    ByVal controlePremierControle As Boolean,  _
                    ByVal controleEtat As Boolean,  _
                    ByVal controleDateDernierControle As String,  _
                    ByVal controleIsSiteSecurise As Boolean,  _
                    ByVal controleIsRecupResidus As Boolean,  _
                    ByVal controleInfosConseils As String,  _
                    ByVal controleIsPulveRepare As Boolean,  _
                    ByVal organismePresId As Integer,  _
                    ByVal organismePresNumero As String,  _
                    ByVal organismePresNom As String,  _
                    ByVal organismeInspNom As String,  _
                    ByVal organismeInspAgrement As String,  _
                    ByVal proprietaireId As String,  _
                    ByVal proprietaireNom As String,  _
                    ByVal proprietairePrenom As String,  _
                    ByVal proprietaireNumeroSiren As String,  _
                    ByVal proprietaireRaisonSociale As String,  _
                    ByVal proprietaireCodeApe As String,  _
                    ByVal proprietaireCommune As String,  _
                    ByVal proprietaireCodePostal As Integer,  _
                    ByVal proprietaireEmail As String,  _
                    ByVal proprietaireTelephoneFixe As String,  _
                    ByVal proprietaireTelephonePortable As String,  _
                    ByVal pulverisateurId As String,  _
                    ByVal pulverisateurType As String,  _
                    ByVal pulverisateurMarque As String,  _
                    ByVal pulverisateurModele As String,  _
                    ByVal pulverisateurCapacite As String,  _
                    ByVal pulverisateurLargeurPlantation As Integer,  _
                    ByVal pulverisateurLargeur As Integer,  _
                    ByVal pulverisateurNbRangs As Integer,  _
                    ByVal pulverisateurIsVentilateur As Boolean,  _
                    ByVal pulverisateurIsDebrayage As Boolean,  _
                    ByVal pulverisateurAnneeAchat As Integer,  _
                    ByVal pulverisateurSurface As String,  _
                    ByVal pulverisateurNombreUtilisateurs As String,  _
                    ByVal pulverisateurIsCuveRincage As Boolean,  _
                    ByVal pulverisateurCapaciteCuveRincage As String,  _
                    ByVal pulverisateurIsCuveIncorporation As Boolean,  _
                    ByVal pulverisateurIsRinceBidon As Boolean,  _
                    ByVal pulverisateurIsBidonLaveMain As Boolean,  _
                    ByVal pulverisateurIsLanceLavageExterieur As Boolean,  _
                    ByVal pulverisateurIsRotobuse As Boolean,  _
                    ByVal pulverisateurCategorieIsRampe As Boolean,  _
                    ByVal pulverisateurCategorieIsAxial As Boolean,  _
                    ByVal pulverisateurCategorieIsJetDirige As Boolean,  _
                    ByVal pulverisateurCategorieIsCanon As Boolean,  _
                    ByVal pulverisateurCategorieIsVoute As Boolean,  _
                    ByVal pulverisateurCategorieIsFaceParFace As Boolean,  _
                    ByVal pulverisateurAttelage As String,  _
                    ByVal pulverisateurRegulationIsPressionConstante As Boolean,  _
                    ByVal pulverisateurRegulationIsDpm As Boolean,  _
                    ByVal pulverisateurRegulationIsDpa As Boolean,  _
                    ByVal pulverisateurRegulationIsDpae As Boolean,  _
                    ByVal pulverisateurRegulationIsPression As Boolean,  _
                    ByVal pulverisateurRegulationIsDebit As Boolean,  _
                    ByVal pulverisateurIsJetProjete As Boolean,  _
                    ByVal pulverisateurIsJetPorte As Boolean,  _
                    ByVal pulverisateurIsPneumatique As Boolean,  _
                    ByVal pulverisateurAutresAccessoires As String,  _
                    ByVal buseMarque As String,  _
                    ByVal buseCouleur As String,  _
                    ByVal buseGenre As String,  _
                    ByVal buseCalibre As String,  _
                    ByVal buseDebit As String,  _
                    ByVal buseDebit2bars As String,  _
                    ByVal buseDebit3bars As String,  _
                    ByVal buseAge As String,  _
                    ByVal buseNbBuses As String,  _
                    ByVal buseType As String,  _
                    ByVal buseAngle As String,  _
                    ByVal buseFonctionnementIsStandard As Boolean,  _
                    ByVal buseFonctionnementIsPastilleChambre As Boolean,  _
                    ByVal buseFonctionnementIsInjectionAirLibre As Boolean,  _
                    ByVal buseFonctionnementIsInjectionAirForce As Boolean,  _
                    ByVal buseIsIso As Boolean,  _
                    ByVal manometreMarque As String,  _
                    ByVal manometreDiametre As String,  _
                    ByVal manometreType As String,  _
                    ByVal manometreFondEchelle As String,  _
                    ByVal manometrePressionTravail As String,  _
                    ByVal exploitationTypeCultureIsGrandeCulture As Boolean,  _
                    ByVal exploitationTypeCultureIsLegume As Boolean,  _
                    ByVal exploitationTypeCultureIsElevage As Boolean,  _
                    ByVal exploitationTypeCultureIsArboriculture As Boolean,  _
                    ByVal exploitationTypeCultureIsViticulture As Boolean,  _
                    ByVal exploitationTypeCultureIsAutres As String,  _
                    ByVal exploitationSau As String,  _
                    ByVal dateSynchro As String,  _
                    ByVal isSynchro As Boolean,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal isATGIP As Boolean,  _
                    ByVal isTGIP As Boolean,  _
                    ByVal isFacture As Boolean,  _
                    ByVal syntheseErreurMoyenneMano As String,  _
                    ByVal syntheseErreurMaxiMano As String,  _
                    ByVal syntheseErreurDebitmetre As String,  _
                    ByVal syntheseErreurMoyenneCinemometre As String,  _
                    ByVal syntheseUsureMoyenneBuses As String,  _
                    ByVal syntheseNbBusesUsees As String,  _
                    ByVal synthesePerteChargeMoyenne As String,  _
                    ByVal synthesePerteChargeMaxi As String,  _
                    ByVal controleIsPreControleProfessionel As Boolean,  _
                    ByVal controleIsAutoControle As Boolean,  _
                    ByVal proprietaireRepresentant As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendDiagnostic2", New Object() {id, inspecteurId, inspecteurNom, inspecteurPrenom, controleTarif, controleDateDebut, controleDateFin, controleLieu, controleTerritoire, controleCommune, controleCodePostal, controleSite, controleNomSite, controleIsComplet, controlePremierControle, controleEtat, controleDateDernierControle, controleIsSiteSecurise, controleIsRecupResidus, controleInfosConseils, controleIsPulveRepare, organismePresId, organismePresNumero, organismePresNom, organismeInspNom, organismeInspAgrement, proprietaireId, proprietaireNom, proprietairePrenom, proprietaireNumeroSiren, proprietaireRaisonSociale, proprietaireCodeApe, proprietaireCommune, proprietaireCodePostal, proprietaireEmail, proprietaireTelephoneFixe, proprietaireTelephonePortable, pulverisateurId, pulverisateurType, pulverisateurMarque, pulverisateurModele, pulverisateurCapacite, pulverisateurLargeurPlantation, pulverisateurLargeur, pulverisateurNbRangs, pulverisateurIsVentilateur, pulverisateurIsDebrayage, pulverisateurAnneeAchat, pulverisateurSurface, pulverisateurNombreUtilisateurs, pulverisateurIsCuveRincage, pulverisateurCapaciteCuveRincage, pulverisateurIsCuveIncorporation, pulverisateurIsRinceBidon, pulverisateurIsBidonLaveMain, pulverisateurIsLanceLavageExterieur, pulverisateurIsRotobuse, pulverisateurCategorieIsRampe, pulverisateurCategorieIsAxial, pulverisateurCategorieIsJetDirige, pulverisateurCategorieIsCanon, pulverisateurCategorieIsVoute, pulverisateurCategorieIsFaceParFace, pulverisateurAttelage, pulverisateurRegulationIsPressionConstante, pulverisateurRegulationIsDpm, pulverisateurRegulationIsDpa, pulverisateurRegulationIsDpae, pulverisateurRegulationIsPression, pulverisateurRegulationIsDebit, pulverisateurIsJetProjete, pulverisateurIsJetPorte, pulverisateurIsPneumatique, pulverisateurAutresAccessoires, buseMarque, buseCouleur, buseGenre, buseCalibre, buseDebit, buseDebit2bars, buseDebit3bars, buseAge, buseNbBuses, buseType, buseAngle, buseFonctionnementIsStandard, buseFonctionnementIsPastilleChambre, buseFonctionnementIsInjectionAirLibre, buseFonctionnementIsInjectionAirForce, buseIsIso, manometreMarque, manometreDiametre, manometreType, manometreFondEchelle, manometrePressionTravail, exploitationTypeCultureIsGrandeCulture, exploitationTypeCultureIsLegume, exploitationTypeCultureIsElevage, exploitationTypeCultureIsArboriculture, exploitationTypeCultureIsViticulture, exploitationTypeCultureIsAutres, exploitationSau, dateSynchro, isSynchro, dateModificationAgent, dateModificationCrodip, isATGIP, isTGIP, isFacture, syntheseErreurMoyenneMano, syntheseErreurMaxiMano, syntheseErreurDebitmetre, syntheseErreurMoyenneCinemometre, syntheseUsureMoyenneBuses, syntheseNbBusesUsees, synthesePerteChargeMoyenne, synthesePerteChargeMaxi, controleIsPreControleProfessionel, controleIsAutoControle, proprietaireRepresentant}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendDiagnostic2(ByVal asyncResult As System.IAsyncResult, ByRef Diagnostic As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Diagnostic = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendDiagnostic2Async( _
                    ByVal id As String,  _
                    ByVal inspecteurId As Integer,  _
                    ByVal inspecteurNom As String,  _
                    ByVal inspecteurPrenom As String,  _
                    ByVal controleTarif As String,  _
                    ByVal controleDateDebut As String,  _
                    ByVal controleDateFin As String,  _
                    ByVal controleLieu As String,  _
                    ByVal controleTerritoire As String,  _
                    ByVal controleCommune As String,  _
                    ByVal controleCodePostal As Integer,  _
                    ByVal controleSite As Integer,  _
                    ByVal controleNomSite As Integer,  _
                    ByVal controleIsComplet As Boolean,  _
                    ByVal controlePremierControle As Boolean,  _
                    ByVal controleEtat As Boolean,  _
                    ByVal controleDateDernierControle As String,  _
                    ByVal controleIsSiteSecurise As Boolean,  _
                    ByVal controleIsRecupResidus As Boolean,  _
                    ByVal controleInfosConseils As String,  _
                    ByVal controleIsPulveRepare As Boolean,  _
                    ByVal organismePresId As Integer,  _
                    ByVal organismePresNumero As String,  _
                    ByVal organismePresNom As String,  _
                    ByVal organismeInspNom As String,  _
                    ByVal organismeInspAgrement As String,  _
                    ByVal proprietaireId As String,  _
                    ByVal proprietaireNom As String,  _
                    ByVal proprietairePrenom As String,  _
                    ByVal proprietaireNumeroSiren As String,  _
                    ByVal proprietaireRaisonSociale As String,  _
                    ByVal proprietaireCodeApe As String,  _
                    ByVal proprietaireCommune As String,  _
                    ByVal proprietaireCodePostal As Integer,  _
                    ByVal proprietaireEmail As String,  _
                    ByVal proprietaireTelephoneFixe As String,  _
                    ByVal proprietaireTelephonePortable As String,  _
                    ByVal pulverisateurId As String,  _
                    ByVal pulverisateurType As String,  _
                    ByVal pulverisateurMarque As String,  _
                    ByVal pulverisateurModele As String,  _
                    ByVal pulverisateurCapacite As String,  _
                    ByVal pulverisateurLargeurPlantation As Integer,  _
                    ByVal pulverisateurLargeur As Integer,  _
                    ByVal pulverisateurNbRangs As Integer,  _
                    ByVal pulverisateurIsVentilateur As Boolean,  _
                    ByVal pulverisateurIsDebrayage As Boolean,  _
                    ByVal pulverisateurAnneeAchat As Integer,  _
                    ByVal pulverisateurSurface As String,  _
                    ByVal pulverisateurNombreUtilisateurs As String,  _
                    ByVal pulverisateurIsCuveRincage As Boolean,  _
                    ByVal pulverisateurCapaciteCuveRincage As String,  _
                    ByVal pulverisateurIsCuveIncorporation As Boolean,  _
                    ByVal pulverisateurIsRinceBidon As Boolean,  _
                    ByVal pulverisateurIsBidonLaveMain As Boolean,  _
                    ByVal pulverisateurIsLanceLavageExterieur As Boolean,  _
                    ByVal pulverisateurIsRotobuse As Boolean,  _
                    ByVal pulverisateurCategorieIsRampe As Boolean,  _
                    ByVal pulverisateurCategorieIsAxial As Boolean,  _
                    ByVal pulverisateurCategorieIsJetDirige As Boolean,  _
                    ByVal pulverisateurCategorieIsCanon As Boolean,  _
                    ByVal pulverisateurCategorieIsVoute As Boolean,  _
                    ByVal pulverisateurCategorieIsFaceParFace As Boolean,  _
                    ByVal pulverisateurAttelage As String,  _
                    ByVal pulverisateurRegulationIsPressionConstante As Boolean,  _
                    ByVal pulverisateurRegulationIsDpm As Boolean,  _
                    ByVal pulverisateurRegulationIsDpa As Boolean,  _
                    ByVal pulverisateurRegulationIsDpae As Boolean,  _
                    ByVal pulverisateurRegulationIsPression As Boolean,  _
                    ByVal pulverisateurRegulationIsDebit As Boolean,  _
                    ByVal pulverisateurIsJetProjete As Boolean,  _
                    ByVal pulverisateurIsJetPorte As Boolean,  _
                    ByVal pulverisateurIsPneumatique As Boolean,  _
                    ByVal pulverisateurAutresAccessoires As String,  _
                    ByVal buseMarque As String,  _
                    ByVal buseCouleur As String,  _
                    ByVal buseGenre As String,  _
                    ByVal buseCalibre As String,  _
                    ByVal buseDebit As String,  _
                    ByVal buseDebit2bars As String,  _
                    ByVal buseDebit3bars As String,  _
                    ByVal buseAge As String,  _
                    ByVal buseNbBuses As String,  _
                    ByVal buseType As String,  _
                    ByVal buseAngle As String,  _
                    ByVal buseFonctionnementIsStandard As Boolean,  _
                    ByVal buseFonctionnementIsPastilleChambre As Boolean,  _
                    ByVal buseFonctionnementIsInjectionAirLibre As Boolean,  _
                    ByVal buseFonctionnementIsInjectionAirForce As Boolean,  _
                    ByVal buseIsIso As Boolean,  _
                    ByVal manometreMarque As String,  _
                    ByVal manometreDiametre As String,  _
                    ByVal manometreType As String,  _
                    ByVal manometreFondEchelle As String,  _
                    ByVal manometrePressionTravail As String,  _
                    ByVal exploitationTypeCultureIsGrandeCulture As Boolean,  _
                    ByVal exploitationTypeCultureIsLegume As Boolean,  _
                    ByVal exploitationTypeCultureIsElevage As Boolean,  _
                    ByVal exploitationTypeCultureIsArboriculture As Boolean,  _
                    ByVal exploitationTypeCultureIsViticulture As Boolean,  _
                    ByVal exploitationTypeCultureIsAutres As String,  _
                    ByVal exploitationSau As String,  _
                    ByVal dateSynchro As String,  _
                    ByVal isSynchro As Boolean,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal isATGIP As Boolean,  _
                    ByVal isTGIP As Boolean,  _
                    ByVal isFacture As Boolean,  _
                    ByVal syntheseErreurMoyenneMano As String,  _
                    ByVal syntheseErreurMaxiMano As String,  _
                    ByVal syntheseErreurDebitmetre As String,  _
                    ByVal syntheseErreurMoyenneCinemometre As String,  _
                    ByVal syntheseUsureMoyenneBuses As String,  _
                    ByVal syntheseNbBusesUsees As String,  _
                    ByVal synthesePerteChargeMoyenne As String,  _
                    ByVal synthesePerteChargeMaxi As String,  _
                    ByVal controleIsPreControleProfessionel As Boolean,  _
                    ByVal controleIsAutoControle As Boolean,  _
                    ByVal proprietaireRepresentant As String)
            Me.SendDiagnostic2Async(id, inspecteurId, inspecteurNom, inspecteurPrenom, controleTarif, controleDateDebut, controleDateFin, controleLieu, controleTerritoire, controleCommune, controleCodePostal, controleSite, controleNomSite, controleIsComplet, controlePremierControle, controleEtat, controleDateDernierControle, controleIsSiteSecurise, controleIsRecupResidus, controleInfosConseils, controleIsPulveRepare, organismePresId, organismePresNumero, organismePresNom, organismeInspNom, organismeInspAgrement, proprietaireId, proprietaireNom, proprietairePrenom, proprietaireNumeroSiren, proprietaireRaisonSociale, proprietaireCodeApe, proprietaireCommune, proprietaireCodePostal, proprietaireEmail, proprietaireTelephoneFixe, proprietaireTelephonePortable, pulverisateurId, pulverisateurType, pulverisateurMarque, pulverisateurModele, pulverisateurCapacite, pulverisateurLargeurPlantation, pulverisateurLargeur, pulverisateurNbRangs, pulverisateurIsVentilateur, pulverisateurIsDebrayage, pulverisateurAnneeAchat, pulverisateurSurface, pulverisateurNombreUtilisateurs, pulverisateurIsCuveRincage, pulverisateurCapaciteCuveRincage, pulverisateurIsCuveIncorporation, pulverisateurIsRinceBidon, pulverisateurIsBidonLaveMain, pulverisateurIsLanceLavageExterieur, pulverisateurIsRotobuse, pulverisateurCategorieIsRampe, pulverisateurCategorieIsAxial, pulverisateurCategorieIsJetDirige, pulverisateurCategorieIsCanon, pulverisateurCategorieIsVoute, pulverisateurCategorieIsFaceParFace, pulverisateurAttelage, pulverisateurRegulationIsPressionConstante, pulverisateurRegulationIsDpm, pulverisateurRegulationIsDpa, pulverisateurRegulationIsDpae, pulverisateurRegulationIsPression, pulverisateurRegulationIsDebit, pulverisateurIsJetProjete, pulverisateurIsJetPorte, pulverisateurIsPneumatique, pulverisateurAutresAccessoires, buseMarque, buseCouleur, buseGenre, buseCalibre, buseDebit, buseDebit2bars, buseDebit3bars, buseAge, buseNbBuses, buseType, buseAngle, buseFonctionnementIsStandard, buseFonctionnementIsPastilleChambre, buseFonctionnementIsInjectionAirLibre, buseFonctionnementIsInjectionAirForce, buseIsIso, manometreMarque, manometreDiametre, manometreType, manometreFondEchelle, manometrePressionTravail, exploitationTypeCultureIsGrandeCulture, exploitationTypeCultureIsLegume, exploitationTypeCultureIsElevage, exploitationTypeCultureIsArboriculture, exploitationTypeCultureIsViticulture, exploitationTypeCultureIsAutres, exploitationSau, dateSynchro, isSynchro, dateModificationAgent, dateModificationCrodip, isATGIP, isTGIP, isFacture, syntheseErreurMoyenneMano, syntheseErreurMaxiMano, syntheseErreurDebitmetre, syntheseErreurMoyenneCinemometre, syntheseUsureMoyenneBuses, syntheseNbBusesUsees, synthesePerteChargeMoyenne, synthesePerteChargeMaxi, controleIsPreControleProfessionel, controleIsAutoControle, proprietaireRepresentant, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDiagnostic2Async( _
                    ByVal id As String,  _
                    ByVal inspecteurId As Integer,  _
                    ByVal inspecteurNom As String,  _
                    ByVal inspecteurPrenom As String,  _
                    ByVal controleTarif As String,  _
                    ByVal controleDateDebut As String,  _
                    ByVal controleDateFin As String,  _
                    ByVal controleLieu As String,  _
                    ByVal controleTerritoire As String,  _
                    ByVal controleCommune As String,  _
                    ByVal controleCodePostal As Integer,  _
                    ByVal controleSite As Integer,  _
                    ByVal controleNomSite As Integer,  _
                    ByVal controleIsComplet As Boolean,  _
                    ByVal controlePremierControle As Boolean,  _
                    ByVal controleEtat As Boolean,  _
                    ByVal controleDateDernierControle As String,  _
                    ByVal controleIsSiteSecurise As Boolean,  _
                    ByVal controleIsRecupResidus As Boolean,  _
                    ByVal controleInfosConseils As String,  _
                    ByVal controleIsPulveRepare As Boolean,  _
                    ByVal organismePresId As Integer,  _
                    ByVal organismePresNumero As String,  _
                    ByVal organismePresNom As String,  _
                    ByVal organismeInspNom As String,  _
                    ByVal organismeInspAgrement As String,  _
                    ByVal proprietaireId As String,  _
                    ByVal proprietaireNom As String,  _
                    ByVal proprietairePrenom As String,  _
                    ByVal proprietaireNumeroSiren As String,  _
                    ByVal proprietaireRaisonSociale As String,  _
                    ByVal proprietaireCodeApe As String,  _
                    ByVal proprietaireCommune As String,  _
                    ByVal proprietaireCodePostal As Integer,  _
                    ByVal proprietaireEmail As String,  _
                    ByVal proprietaireTelephoneFixe As String,  _
                    ByVal proprietaireTelephonePortable As String,  _
                    ByVal pulverisateurId As String,  _
                    ByVal pulverisateurType As String,  _
                    ByVal pulverisateurMarque As String,  _
                    ByVal pulverisateurModele As String,  _
                    ByVal pulverisateurCapacite As String,  _
                    ByVal pulverisateurLargeurPlantation As Integer,  _
                    ByVal pulverisateurLargeur As Integer,  _
                    ByVal pulverisateurNbRangs As Integer,  _
                    ByVal pulverisateurIsVentilateur As Boolean,  _
                    ByVal pulverisateurIsDebrayage As Boolean,  _
                    ByVal pulverisateurAnneeAchat As Integer,  _
                    ByVal pulverisateurSurface As String,  _
                    ByVal pulverisateurNombreUtilisateurs As String,  _
                    ByVal pulverisateurIsCuveRincage As Boolean,  _
                    ByVal pulverisateurCapaciteCuveRincage As String,  _
                    ByVal pulverisateurIsCuveIncorporation As Boolean,  _
                    ByVal pulverisateurIsRinceBidon As Boolean,  _
                    ByVal pulverisateurIsBidonLaveMain As Boolean,  _
                    ByVal pulverisateurIsLanceLavageExterieur As Boolean,  _
                    ByVal pulverisateurIsRotobuse As Boolean,  _
                    ByVal pulverisateurCategorieIsRampe As Boolean,  _
                    ByVal pulverisateurCategorieIsAxial As Boolean,  _
                    ByVal pulverisateurCategorieIsJetDirige As Boolean,  _
                    ByVal pulverisateurCategorieIsCanon As Boolean,  _
                    ByVal pulverisateurCategorieIsVoute As Boolean,  _
                    ByVal pulverisateurCategorieIsFaceParFace As Boolean,  _
                    ByVal pulverisateurAttelage As String,  _
                    ByVal pulverisateurRegulationIsPressionConstante As Boolean,  _
                    ByVal pulverisateurRegulationIsDpm As Boolean,  _
                    ByVal pulverisateurRegulationIsDpa As Boolean,  _
                    ByVal pulverisateurRegulationIsDpae As Boolean,  _
                    ByVal pulverisateurRegulationIsPression As Boolean,  _
                    ByVal pulverisateurRegulationIsDebit As Boolean,  _
                    ByVal pulverisateurIsJetProjete As Boolean,  _
                    ByVal pulverisateurIsJetPorte As Boolean,  _
                    ByVal pulverisateurIsPneumatique As Boolean,  _
                    ByVal pulverisateurAutresAccessoires As String,  _
                    ByVal buseMarque As String,  _
                    ByVal buseCouleur As String,  _
                    ByVal buseGenre As String,  _
                    ByVal buseCalibre As String,  _
                    ByVal buseDebit As String,  _
                    ByVal buseDebit2bars As String,  _
                    ByVal buseDebit3bars As String,  _
                    ByVal buseAge As String,  _
                    ByVal buseNbBuses As String,  _
                    ByVal buseType As String,  _
                    ByVal buseAngle As String,  _
                    ByVal buseFonctionnementIsStandard As Boolean,  _
                    ByVal buseFonctionnementIsPastilleChambre As Boolean,  _
                    ByVal buseFonctionnementIsInjectionAirLibre As Boolean,  _
                    ByVal buseFonctionnementIsInjectionAirForce As Boolean,  _
                    ByVal buseIsIso As Boolean,  _
                    ByVal manometreMarque As String,  _
                    ByVal manometreDiametre As String,  _
                    ByVal manometreType As String,  _
                    ByVal manometreFondEchelle As String,  _
                    ByVal manometrePressionTravail As String,  _
                    ByVal exploitationTypeCultureIsGrandeCulture As Boolean,  _
                    ByVal exploitationTypeCultureIsLegume As Boolean,  _
                    ByVal exploitationTypeCultureIsElevage As Boolean,  _
                    ByVal exploitationTypeCultureIsArboriculture As Boolean,  _
                    ByVal exploitationTypeCultureIsViticulture As Boolean,  _
                    ByVal exploitationTypeCultureIsAutres As String,  _
                    ByVal exploitationSau As String,  _
                    ByVal dateSynchro As String,  _
                    ByVal isSynchro As Boolean,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal isATGIP As Boolean,  _
                    ByVal isTGIP As Boolean,  _
                    ByVal isFacture As Boolean,  _
                    ByVal syntheseErreurMoyenneMano As String,  _
                    ByVal syntheseErreurMaxiMano As String,  _
                    ByVal syntheseErreurDebitmetre As String,  _
                    ByVal syntheseErreurMoyenneCinemometre As String,  _
                    ByVal syntheseUsureMoyenneBuses As String,  _
                    ByVal syntheseNbBusesUsees As String,  _
                    ByVal synthesePerteChargeMoyenne As String,  _
                    ByVal synthesePerteChargeMaxi As String,  _
                    ByVal controleIsPreControleProfessionel As Boolean,  _
                    ByVal controleIsAutoControle As Boolean,  _
                    ByVal proprietaireRepresentant As String,  _
                    ByVal userState As Object)
            If (Me.SendDiagnostic2OperationCompleted Is Nothing) Then
                Me.SendDiagnostic2OperationCompleted = AddressOf Me.OnSendDiagnostic2OperationCompleted
            End If
            Me.InvokeAsync("SendDiagnostic2", New Object() {id, inspecteurId, inspecteurNom, inspecteurPrenom, controleTarif, controleDateDebut, controleDateFin, controleLieu, controleTerritoire, controleCommune, controleCodePostal, controleSite, controleNomSite, controleIsComplet, controlePremierControle, controleEtat, controleDateDernierControle, controleIsSiteSecurise, controleIsRecupResidus, controleInfosConseils, controleIsPulveRepare, organismePresId, organismePresNumero, organismePresNom, organismeInspNom, organismeInspAgrement, proprietaireId, proprietaireNom, proprietairePrenom, proprietaireNumeroSiren, proprietaireRaisonSociale, proprietaireCodeApe, proprietaireCommune, proprietaireCodePostal, proprietaireEmail, proprietaireTelephoneFixe, proprietaireTelephonePortable, pulverisateurId, pulverisateurType, pulverisateurMarque, pulverisateurModele, pulverisateurCapacite, pulverisateurLargeurPlantation, pulverisateurLargeur, pulverisateurNbRangs, pulverisateurIsVentilateur, pulverisateurIsDebrayage, pulverisateurAnneeAchat, pulverisateurSurface, pulverisateurNombreUtilisateurs, pulverisateurIsCuveRincage, pulverisateurCapaciteCuveRincage, pulverisateurIsCuveIncorporation, pulverisateurIsRinceBidon, pulverisateurIsBidonLaveMain, pulverisateurIsLanceLavageExterieur, pulverisateurIsRotobuse, pulverisateurCategorieIsRampe, pulverisateurCategorieIsAxial, pulverisateurCategorieIsJetDirige, pulverisateurCategorieIsCanon, pulverisateurCategorieIsVoute, pulverisateurCategorieIsFaceParFace, pulverisateurAttelage, pulverisateurRegulationIsPressionConstante, pulverisateurRegulationIsDpm, pulverisateurRegulationIsDpa, pulverisateurRegulationIsDpae, pulverisateurRegulationIsPression, pulverisateurRegulationIsDebit, pulverisateurIsJetProjete, pulverisateurIsJetPorte, pulverisateurIsPneumatique, pulverisateurAutresAccessoires, buseMarque, buseCouleur, buseGenre, buseCalibre, buseDebit, buseDebit2bars, buseDebit3bars, buseAge, buseNbBuses, buseType, buseAngle, buseFonctionnementIsStandard, buseFonctionnementIsPastilleChambre, buseFonctionnementIsInjectionAirLibre, buseFonctionnementIsInjectionAirForce, buseIsIso, manometreMarque, manometreDiametre, manometreType, manometreFondEchelle, manometrePressionTravail, exploitationTypeCultureIsGrandeCulture, exploitationTypeCultureIsLegume, exploitationTypeCultureIsElevage, exploitationTypeCultureIsArboriculture, exploitationTypeCultureIsViticulture, exploitationTypeCultureIsAutres, exploitationSau, dateSynchro, isSynchro, dateModificationAgent, dateModificationCrodip, isATGIP, isTGIP, isFacture, syntheseErreurMoyenneMano, syntheseErreurMaxiMano, syntheseErreurDebitmetre, syntheseErreurMoyenneCinemometre, syntheseUsureMoyenneBuses, syntheseNbBusesUsees, synthesePerteChargeMoyenne, synthesePerteChargeMaxi, controleIsPreControleProfessionel, controleIsAutoControle, proprietaireRepresentant}, Me.SendDiagnostic2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendDiagnostic2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendDiagnostic2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendDiagnostic2Completed(Me, New SendDiagnostic2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetDiagnosticItems", RequestElementName:="GetDiagnosticItemsRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetDiagnosticItems(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idDiagnostic As String, <System.Xml.Serialization.XmlElementAttribute("DiagnosticItemsList", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticItemsList() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetDiagnosticItems", New Object() {agentId, idDiagnostic})
            DiagnosticItemsList = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDiagnosticItems(ByVal agentId As String, ByVal idDiagnostic As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDiagnosticItems", New Object() {agentId, idDiagnostic}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDiagnosticItems(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticItemsList() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticItemsList = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticItemsAsync(ByVal agentId As String, ByVal idDiagnostic As String)
            Me.GetDiagnosticItemsAsync(agentId, idDiagnostic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticItemsAsync(ByVal agentId As String, ByVal idDiagnostic As String, ByVal userState As Object)
            If (Me.GetDiagnosticItemsOperationCompleted Is Nothing) Then
                Me.GetDiagnosticItemsOperationCompleted = AddressOf Me.OnGetDiagnosticItemsOperationCompleted
            End If
            Me.InvokeAsync("GetDiagnosticItems", New Object() {agentId, idDiagnostic}, Me.GetDiagnosticItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDiagnosticItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDiagnosticItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDiagnosticItemsCompleted(Me, New GetDiagnosticItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendDiagnosticItems", RequestElementName:="SendDiagnosticItemsRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendDiagnosticItems(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute("arrayItems", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arrayItems() As Object, <System.Xml.Serialization.XmlElementAttribute("DiagnosticItemsList", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticItemsList() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendDiagnosticItems", New Object() {agentId, arrayItems})
            DiagnosticItemsList = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendDiagnosticItems(ByVal agentId As String, ByVal arrayItems() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendDiagnosticItems", New Object() {agentId, arrayItems}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendDiagnosticItems(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticItemsList() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticItemsList = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticItemsAsync(ByVal agentId As String, ByVal arrayItems() As Object)
            Me.SendDiagnosticItemsAsync(agentId, arrayItems, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticItemsAsync(ByVal agentId As String, ByVal arrayItems() As Object, ByVal userState As Object)
            If (Me.SendDiagnosticItemsOperationCompleted Is Nothing) Then
                Me.SendDiagnosticItemsOperationCompleted = AddressOf Me.OnSendDiagnosticItemsOperationCompleted
            End If
            Me.InvokeAsync("SendDiagnosticItems", New Object() {agentId, arrayItems}, Me.SendDiagnosticItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendDiagnosticItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendDiagnosticItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendDiagnosticItemsCompleted(Me, New SendDiagnosticItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetDiagnosticBuses", RequestElementName:="GetDiagnosticBusesRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetDiagnosticBuses(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idDiagnostic As String, <System.Xml.Serialization.XmlElementAttribute("DiagnosticBusesList", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticBusesList() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetDiagnosticBuses", New Object() {agentId, idDiagnostic})
            DiagnosticBusesList = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDiagnosticBuses(ByVal agentId As String, ByVal idDiagnostic As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDiagnosticBuses", New Object() {agentId, idDiagnostic}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDiagnosticBuses(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticBusesList() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticBusesList = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticBusesAsync(ByVal agentId As String, ByVal idDiagnostic As String)
            Me.GetDiagnosticBusesAsync(agentId, idDiagnostic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticBusesAsync(ByVal agentId As String, ByVal idDiagnostic As String, ByVal userState As Object)
            If (Me.GetDiagnosticBusesOperationCompleted Is Nothing) Then
                Me.GetDiagnosticBusesOperationCompleted = AddressOf Me.OnGetDiagnosticBusesOperationCompleted
            End If
            Me.InvokeAsync("GetDiagnosticBuses", New Object() {agentId, idDiagnostic}, Me.GetDiagnosticBusesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDiagnosticBusesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDiagnosticBusesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDiagnosticBusesCompleted(Me, New GetDiagnosticBusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendDiagnosticBuses", RequestElementName:="SendDiagnosticBusesRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendDiagnosticBuses(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute("arrayBuses", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arrayBuses() As Object, <System.Xml.Serialization.XmlElementAttribute("DiagnosticBusesList", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticBusesList() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendDiagnosticBuses", New Object() {agentId, arrayBuses})
            DiagnosticBusesList = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendDiagnosticBuses(ByVal agentId As String, ByVal arrayBuses() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendDiagnosticBuses", New Object() {agentId, arrayBuses}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendDiagnosticBuses(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticBusesList() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticBusesList = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticBusesAsync(ByVal agentId As String, ByVal arrayBuses() As Object)
            Me.SendDiagnosticBusesAsync(agentId, arrayBuses, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticBusesAsync(ByVal agentId As String, ByVal arrayBuses() As Object, ByVal userState As Object)
            If (Me.SendDiagnosticBusesOperationCompleted Is Nothing) Then
                Me.SendDiagnosticBusesOperationCompleted = AddressOf Me.OnSendDiagnosticBusesOperationCompleted
            End If
            Me.InvokeAsync("SendDiagnosticBuses", New Object() {agentId, arrayBuses}, Me.SendDiagnosticBusesOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendDiagnosticBusesOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendDiagnosticBusesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendDiagnosticBusesCompleted(Me, New SendDiagnosticBusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetDiagnosticBusesDetail", RequestElementName:="GetDiagnosticBusesDetailRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetDiagnosticBusesDetail(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idDiagnostic As String, <System.Xml.Serialization.XmlElementAttribute("DiagnosticBusesDetailList", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticBusesDetailList() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetDiagnosticBusesDetail", New Object() {agentId, idDiagnostic})
            DiagnosticBusesDetailList = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDiagnosticBusesDetail(ByVal agentId As String, ByVal idDiagnostic As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDiagnosticBusesDetail", New Object() {agentId, idDiagnostic}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDiagnosticBusesDetail(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticBusesDetailList() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticBusesDetailList = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticBusesDetailAsync(ByVal agentId As String, ByVal idDiagnostic As String)
            Me.GetDiagnosticBusesDetailAsync(agentId, idDiagnostic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticBusesDetailAsync(ByVal agentId As String, ByVal idDiagnostic As String, ByVal userState As Object)
            If (Me.GetDiagnosticBusesDetailOperationCompleted Is Nothing) Then
                Me.GetDiagnosticBusesDetailOperationCompleted = AddressOf Me.OnGetDiagnosticBusesDetailOperationCompleted
            End If
            Me.InvokeAsync("GetDiagnosticBusesDetail", New Object() {agentId, idDiagnostic}, Me.GetDiagnosticBusesDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDiagnosticBusesDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDiagnosticBusesDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDiagnosticBusesDetailCompleted(Me, New GetDiagnosticBusesDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendDiagnosticBusesDetail", RequestElementName:="SendDiagnosticBusesDetailRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendDiagnosticBusesDetail(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute("arrayBuses", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arrayBuses() As Object, <System.Xml.Serialization.XmlElementAttribute("DiagnosticBusesDetailList", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticBusesDetailList() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendDiagnosticBusesDetail", New Object() {agentId, arrayBuses})
            DiagnosticBusesDetailList = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendDiagnosticBusesDetail(ByVal agentId As String, ByVal arrayBuses() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendDiagnosticBusesDetail", New Object() {agentId, arrayBuses}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendDiagnosticBusesDetail(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticBusesDetailList() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticBusesDetailList = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticBusesDetailAsync(ByVal agentId As String, ByVal arrayBuses() As Object)
            Me.SendDiagnosticBusesDetailAsync(agentId, arrayBuses, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticBusesDetailAsync(ByVal agentId As String, ByVal arrayBuses() As Object, ByVal userState As Object)
            If (Me.SendDiagnosticBusesDetailOperationCompleted Is Nothing) Then
                Me.SendDiagnosticBusesDetailOperationCompleted = AddressOf Me.OnSendDiagnosticBusesDetailOperationCompleted
            End If
            Me.InvokeAsync("SendDiagnosticBusesDetail", New Object() {agentId, arrayBuses}, Me.SendDiagnosticBusesDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendDiagnosticBusesDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendDiagnosticBusesDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendDiagnosticBusesDetailCompleted(Me, New SendDiagnosticBusesDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetDiagnosticMano542", RequestElementName:="GetDiagnosticMano542Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetDiagnosticMano542(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idDiagnostic As String, <System.Xml.Serialization.XmlElementAttribute("DiagnosticMano542List", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticMano542List() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetDiagnosticMano542", New Object() {agentId, idDiagnostic})
            DiagnosticMano542List = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDiagnosticMano542(ByVal agentId As String, ByVal idDiagnostic As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDiagnosticMano542", New Object() {agentId, idDiagnostic}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDiagnosticMano542(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticMano542List() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticMano542List = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticMano542Async(ByVal agentId As String, ByVal idDiagnostic As String)
            Me.GetDiagnosticMano542Async(agentId, idDiagnostic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticMano542Async(ByVal agentId As String, ByVal idDiagnostic As String, ByVal userState As Object)
            If (Me.GetDiagnosticMano542OperationCompleted Is Nothing) Then
                Me.GetDiagnosticMano542OperationCompleted = AddressOf Me.OnGetDiagnosticMano542OperationCompleted
            End If
            Me.InvokeAsync("GetDiagnosticMano542", New Object() {agentId, idDiagnostic}, Me.GetDiagnosticMano542OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDiagnosticMano542OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDiagnosticMano542CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDiagnosticMano542Completed(Me, New GetDiagnosticMano542CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendDiagnosticMano542", RequestElementName:="SendDiagnosticMano542Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendDiagnosticMano542(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute("arrayMano542", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arrayMano542() As Object, <System.Xml.Serialization.XmlElementAttribute("DiagnosticMano542List", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticMano542List() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendDiagnosticMano542", New Object() {agentId, arrayMano542})
            DiagnosticMano542List = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendDiagnosticMano542(ByVal agentId As String, ByVal arrayMano542() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendDiagnosticMano542", New Object() {agentId, arrayMano542}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendDiagnosticMano542(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticMano542List() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticMano542List = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticMano542Async(ByVal agentId As String, ByVal arrayMano542() As Object)
            Me.SendDiagnosticMano542Async(agentId, arrayMano542, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticMano542Async(ByVal agentId As String, ByVal arrayMano542() As Object, ByVal userState As Object)
            If (Me.SendDiagnosticMano542OperationCompleted Is Nothing) Then
                Me.SendDiagnosticMano542OperationCompleted = AddressOf Me.OnSendDiagnosticMano542OperationCompleted
            End If
            Me.InvokeAsync("SendDiagnosticMano542", New Object() {agentId, arrayMano542}, Me.SendDiagnosticMano542OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendDiagnosticMano542OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendDiagnosticMano542CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendDiagnosticMano542Completed(Me, New SendDiagnosticMano542CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetDiagnosticTroncons833", RequestElementName:="GetDiagnosticTroncons833Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetDiagnosticTroncons833(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idDiagnostic As String, <System.Xml.Serialization.XmlElementAttribute("DiagnosticTroncons833List", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticTroncons833List() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetDiagnosticTroncons833", New Object() {agentId, idDiagnostic})
            DiagnosticTroncons833List = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDiagnosticTroncons833(ByVal agentId As String, ByVal idDiagnostic As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDiagnosticTroncons833", New Object() {agentId, idDiagnostic}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDiagnosticTroncons833(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticTroncons833List() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticTroncons833List = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticTroncons833Async(ByVal agentId As String, ByVal idDiagnostic As String)
            Me.GetDiagnosticTroncons833Async(agentId, idDiagnostic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDiagnosticTroncons833Async(ByVal agentId As String, ByVal idDiagnostic As String, ByVal userState As Object)
            If (Me.GetDiagnosticTroncons833OperationCompleted Is Nothing) Then
                Me.GetDiagnosticTroncons833OperationCompleted = AddressOf Me.OnGetDiagnosticTroncons833OperationCompleted
            End If
            Me.InvokeAsync("GetDiagnosticTroncons833", New Object() {agentId, idDiagnostic}, Me.GetDiagnosticTroncons833OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDiagnosticTroncons833OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDiagnosticTroncons833CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDiagnosticTroncons833Completed(Me, New GetDiagnosticTroncons833CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Diagnostic)), XmlInclude(GetType(DiagnosticItem)), XmlInclude(GetType(DiagnosticBuses)), XmlInclude(GetType(DiagnosticBusesDetail)), XmlInclude(GetType(DiagnosticMano542)), XmlInclude(GetType(DiagnosticTroncons833)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendDiagnosticTroncons833", RequestElementName:="SendDiagnosticTroncons833Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendDiagnosticTroncons833(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute("arrayTroncons833", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal arrayTroncons833() As Object, <System.Xml.Serialization.XmlElementAttribute("DiagnosticTroncons833List", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef DiagnosticTroncons833List() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendDiagnosticTroncons833", New Object() {agentId, arrayTroncons833})
            DiagnosticTroncons833List = CType(results(1), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendDiagnosticTroncons833(ByVal agentId As String, ByVal arrayTroncons833() As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendDiagnosticTroncons833", New Object() {agentId, arrayTroncons833}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendDiagnosticTroncons833(ByVal asyncResult As System.IAsyncResult, ByRef DiagnosticTroncons833List() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            DiagnosticTroncons833List = CType(results(1),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticTroncons833Async(ByVal agentId As String, ByVal arrayTroncons833() As Object)
            Me.SendDiagnosticTroncons833Async(agentId, arrayTroncons833, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDiagnosticTroncons833Async(ByVal agentId As String, ByVal arrayTroncons833() As Object, ByVal userState As Object)
            If (Me.SendDiagnosticTroncons833OperationCompleted Is Nothing) Then
                Me.SendDiagnosticTroncons833OperationCompleted = AddressOf Me.OnSendDiagnosticTroncons833OperationCompleted
            End If
            Me.InvokeAsync("SendDiagnosticTroncons833", New Object() {agentId, arrayTroncons833}, Me.SendDiagnosticTroncons833OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendDiagnosticTroncons833OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendDiagnosticTroncons833CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendDiagnosticTroncons833Completed(Me, New SendDiagnosticTroncons833CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Exploitation)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/getExploitation", RequestElementName:="GetExploitationRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetExploitation(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Exploitation As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetExploitation", New Object() {agentId, id})
            Exploitation = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetExploitation(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetExploitation", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetExploitation(ByVal asyncResult As System.IAsyncResult, ByRef Exploitation As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Exploitation = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExploitationAsync(ByVal agentId As String, ByVal id As String)
            Me.GetExploitationAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExploitationAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetExploitationOperationCompleted Is Nothing) Then
                Me.GetExploitationOperationCompleted = AddressOf Me.OnGetExploitationOperationCompleted
            End If
            Me.InvokeAsync("GetExploitation", New Object() {agentId, id}, Me.GetExploitationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExploitationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExploitationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExploitationCompleted(Me, New GetExploitationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Exploitation)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/sendExploitation", RequestElementName:="SendExploitationRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendExploitation(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal ExploitationRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Exploitation As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendExploitation", New Object() {agentId, ExploitationRequest})
            Exploitation = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendExploitation(ByVal agentId As String, ByVal ExploitationRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendExploitation", New Object() {agentId, ExploitationRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendExploitation(ByVal asyncResult As System.IAsyncResult, ByRef Exploitation As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Exploitation = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendExploitationAsync(ByVal agentId As String, ByVal ExploitationRequest As Object)
            Me.SendExploitationAsync(agentId, ExploitationRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendExploitationAsync(ByVal agentId As String, ByVal ExploitationRequest As Object, ByVal userState As Object)
            If (Me.SendExploitationOperationCompleted Is Nothing) Then
                Me.SendExploitationOperationCompleted = AddressOf Me.OnSendExploitationOperationCompleted
            End If
            Me.InvokeAsync("SendExploitation", New Object() {agentId, ExploitationRequest}, Me.SendExploitationOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendExploitationOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendExploitationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendExploitationCompleted(Me, New SendExploitationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/sendExploitation2", RequestElementName:="SendExploitation2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendExploitation2( _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal numeroSiren As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal codeApe As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal raisonSociale As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal nombreExploitant As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal nomExploitant As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal prenomExploitant As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal adresse As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal codePostal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal commune As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal telephoneFixe As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal telephonePortable As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal telephoneFax As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal eMail As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateDernierControle As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isProdGrandeCulture As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isProdElevage As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isProdArboriculture As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isProdLegume As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isProdViticulture As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal isProdAutre As Boolean,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal productionAutre As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal sau As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Exploitation As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendExploitation2", New Object() {id, idStructure, numeroSiren, codeApe, raisonSociale, nombreExploitant, nomExploitant, prenomExploitant, adresse, codePostal, commune, telephoneFixe, telephonePortable, telephoneFax, eMail, dateModificationCrodip, dateModificationAgent, dateDernierControle, isProdGrandeCulture, isProdElevage, isProdArboriculture, isProdLegume, isProdViticulture, isProdAutre, productionAutre, sau})
            Exploitation = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendExploitation2( _
                    ByVal id As String,  _
                    ByVal idStructure As String,  _
                    ByVal numeroSiren As String,  _
                    ByVal codeApe As String,  _
                    ByVal raisonSociale As String,  _
                    ByVal nombreExploitant As String,  _
                    ByVal nomExploitant As String,  _
                    ByVal prenomExploitant As String,  _
                    ByVal adresse As String,  _
                    ByVal codePostal As String,  _
                    ByVal commune As String,  _
                    ByVal telephoneFixe As String,  _
                    ByVal telephonePortable As String,  _
                    ByVal telephoneFax As String,  _
                    ByVal eMail As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateDernierControle As String,  _
                    ByVal isProdGrandeCulture As Boolean,  _
                    ByVal isProdElevage As Boolean,  _
                    ByVal isProdArboriculture As Boolean,  _
                    ByVal isProdLegume As Boolean,  _
                    ByVal isProdViticulture As Boolean,  _
                    ByVal isProdAutre As Boolean,  _
                    ByVal productionAutre As String,  _
                    ByVal sau As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendExploitation2", New Object() {id, idStructure, numeroSiren, codeApe, raisonSociale, nombreExploitant, nomExploitant, prenomExploitant, adresse, codePostal, commune, telephoneFixe, telephonePortable, telephoneFax, eMail, dateModificationCrodip, dateModificationAgent, dateDernierControle, isProdGrandeCulture, isProdElevage, isProdArboriculture, isProdLegume, isProdViticulture, isProdAutre, productionAutre, sau}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendExploitation2(ByVal asyncResult As System.IAsyncResult, ByRef Exploitation As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Exploitation = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendExploitation2Async( _
                    ByVal id As String,  _
                    ByVal idStructure As String,  _
                    ByVal numeroSiren As String,  _
                    ByVal codeApe As String,  _
                    ByVal raisonSociale As String,  _
                    ByVal nombreExploitant As String,  _
                    ByVal nomExploitant As String,  _
                    ByVal prenomExploitant As String,  _
                    ByVal adresse As String,  _
                    ByVal codePostal As String,  _
                    ByVal commune As String,  _
                    ByVal telephoneFixe As String,  _
                    ByVal telephonePortable As String,  _
                    ByVal telephoneFax As String,  _
                    ByVal eMail As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateDernierControle As String,  _
                    ByVal isProdGrandeCulture As Boolean,  _
                    ByVal isProdElevage As Boolean,  _
                    ByVal isProdArboriculture As Boolean,  _
                    ByVal isProdLegume As Boolean,  _
                    ByVal isProdViticulture As Boolean,  _
                    ByVal isProdAutre As Boolean,  _
                    ByVal productionAutre As String,  _
                    ByVal sau As String)
            Me.SendExploitation2Async(id, idStructure, numeroSiren, codeApe, raisonSociale, nombreExploitant, nomExploitant, prenomExploitant, adresse, codePostal, commune, telephoneFixe, telephonePortable, telephoneFax, eMail, dateModificationCrodip, dateModificationAgent, dateDernierControle, isProdGrandeCulture, isProdElevage, isProdArboriculture, isProdLegume, isProdViticulture, isProdAutre, productionAutre, sau, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendExploitation2Async( _
                    ByVal id As String,  _
                    ByVal idStructure As String,  _
                    ByVal numeroSiren As String,  _
                    ByVal codeApe As String,  _
                    ByVal raisonSociale As String,  _
                    ByVal nombreExploitant As String,  _
                    ByVal nomExploitant As String,  _
                    ByVal prenomExploitant As String,  _
                    ByVal adresse As String,  _
                    ByVal codePostal As String,  _
                    ByVal commune As String,  _
                    ByVal telephoneFixe As String,  _
                    ByVal telephonePortable As String,  _
                    ByVal telephoneFax As String,  _
                    ByVal eMail As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateDernierControle As String,  _
                    ByVal isProdGrandeCulture As Boolean,  _
                    ByVal isProdElevage As Boolean,  _
                    ByVal isProdArboriculture As Boolean,  _
                    ByVal isProdLegume As Boolean,  _
                    ByVal isProdViticulture As Boolean,  _
                    ByVal isProdAutre As Boolean,  _
                    ByVal productionAutre As String,  _
                    ByVal sau As String,  _
                    ByVal userState As Object)
            If (Me.SendExploitation2OperationCompleted Is Nothing) Then
                Me.SendExploitation2OperationCompleted = AddressOf Me.OnSendExploitation2OperationCompleted
            End If
            Me.InvokeAsync("SendExploitation2", New Object() {id, idStructure, numeroSiren, codeApe, raisonSociale, nombreExploitant, nomExploitant, prenomExploitant, adresse, codePostal, commune, telephoneFixe, telephonePortable, telephoneFax, eMail, dateModificationCrodip, dateModificationAgent, dateDernierControle, isProdGrandeCulture, isProdElevage, isProdArboriculture, isProdLegume, isProdViticulture, isProdAutre, productionAutre, sau}, Me.SendExploitation2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendExploitation2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendExploitation2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendExploitation2Completed(Me, New SendExploitation2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ExploitationTOPulverisateur)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/getExploitationTOPulverisateur", RequestElementName:="GetExploitationTOPulverisateurRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetExploitationTOPulverisateur(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ExploitationTOPulverisateur As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetExploitationTOPulverisateur", New Object() {agentId, id})
            ExploitationTOPulverisateur = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetExploitationTOPulverisateur(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetExploitationTOPulverisateur", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetExploitationTOPulverisateur(ByVal asyncResult As System.IAsyncResult, ByRef ExploitationTOPulverisateur As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ExploitationTOPulverisateur = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExploitationTOPulverisateurAsync(ByVal agentId As String, ByVal id As String)
            Me.GetExploitationTOPulverisateurAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExploitationTOPulverisateurAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetExploitationTOPulverisateurOperationCompleted Is Nothing) Then
                Me.GetExploitationTOPulverisateurOperationCompleted = AddressOf Me.OnGetExploitationTOPulverisateurOperationCompleted
            End If
            Me.InvokeAsync("GetExploitationTOPulverisateur", New Object() {agentId, id}, Me.GetExploitationTOPulverisateurOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExploitationTOPulverisateurOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExploitationTOPulverisateurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExploitationTOPulverisateurCompleted(Me, New GetExploitationTOPulverisateurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ExploitationTOPulverisateur)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/sendExploitationTOPulverisateur", RequestElementName:="SendExploitationTOPulverisateurRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendExploitationTOPulverisateur(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal ExploitationTOPulverisateurRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ExploitationTOPulverisateur As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendExploitationTOPulverisateur", New Object() {agentId, ExploitationTOPulverisateurRequest})
            ExploitationTOPulverisateur = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendExploitationTOPulverisateur(ByVal agentId As String, ByVal ExploitationTOPulverisateurRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendExploitationTOPulverisateur", New Object() {agentId, ExploitationTOPulverisateurRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendExploitationTOPulverisateur(ByVal asyncResult As System.IAsyncResult, ByRef ExploitationTOPulverisateur As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ExploitationTOPulverisateur = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendExploitationTOPulverisateurAsync(ByVal agentId As String, ByVal ExploitationTOPulverisateurRequest As Object)
            Me.SendExploitationTOPulverisateurAsync(agentId, ExploitationTOPulverisateurRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendExploitationTOPulverisateurAsync(ByVal agentId As String, ByVal ExploitationTOPulverisateurRequest As Object, ByVal userState As Object)
            If (Me.SendExploitationTOPulverisateurOperationCompleted Is Nothing) Then
                Me.SendExploitationTOPulverisateurOperationCompleted = AddressOf Me.OnSendExploitationTOPulverisateurOperationCompleted
            End If
            Me.InvokeAsync("SendExploitationTOPulverisateur", New Object() {agentId, ExploitationTOPulverisateurRequest}, Me.SendExploitationTOPulverisateurOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendExploitationTOPulverisateurOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendExploitationTOPulverisateurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendExploitationTOPulverisateurCompleted(Me, New SendExploitationTOPulverisateurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/sendExploitationTOPulverisateur2", RequestElementName:="SendExploitationTOPulverisateur2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendExploitationTOPulverisateur2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idPulverisateur As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idExploitation As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ExploitationTOPulverisateur As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendExploitationTOPulverisateur2", New Object() {id, idPulverisateur, idExploitation, dateModificationCrodip, dateModificationAgent})
            ExploitationTOPulverisateur = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendExploitationTOPulverisateur2(ByVal id As String, ByVal idPulverisateur As String, ByVal idExploitation As String, ByVal dateModificationCrodip As String, ByVal dateModificationAgent As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendExploitationTOPulverisateur2", New Object() {id, idPulverisateur, idExploitation, dateModificationCrodip, dateModificationAgent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendExploitationTOPulverisateur2(ByVal asyncResult As System.IAsyncResult, ByRef ExploitationTOPulverisateur As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ExploitationTOPulverisateur = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendExploitationTOPulverisateur2Async(ByVal id As String, ByVal idPulverisateur As String, ByVal idExploitation As String, ByVal dateModificationCrodip As String, ByVal dateModificationAgent As String)
            Me.SendExploitationTOPulverisateur2Async(id, idPulverisateur, idExploitation, dateModificationCrodip, dateModificationAgent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendExploitationTOPulverisateur2Async(ByVal id As String, ByVal idPulverisateur As String, ByVal idExploitation As String, ByVal dateModificationCrodip As String, ByVal dateModificationAgent As String, ByVal userState As Object)
            If (Me.SendExploitationTOPulverisateur2OperationCompleted Is Nothing) Then
                Me.SendExploitationTOPulverisateur2OperationCompleted = AddressOf Me.OnSendExploitationTOPulverisateur2OperationCompleted
            End If
            Me.InvokeAsync("SendExploitationTOPulverisateur2", New Object() {id, idPulverisateur, idExploitation, dateModificationCrodip, dateModificationAgent}, Me.SendExploitationTOPulverisateur2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendExploitationTOPulverisateur2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendExploitationTOPulverisateur2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendExploitationTOPulverisateur2Completed(Me, New SendExploitationTOPulverisateur2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ControleBanc)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetControleBancMesure", RequestElementName:="GetControleBancMesureRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetControleBancMesure(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ControleBancMesure As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetControleBancMesure", New Object() {agentId, id})
            ControleBancMesure = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetControleBancMesure(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetControleBancMesure", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetControleBancMesure(ByVal asyncResult As System.IAsyncResult, ByRef ControleBancMesure As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ControleBancMesure = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetControleBancMesureAsync(ByVal agentId As String, ByVal id As String)
            Me.GetControleBancMesureAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetControleBancMesureAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetControleBancMesureOperationCompleted Is Nothing) Then
                Me.GetControleBancMesureOperationCompleted = AddressOf Me.OnGetControleBancMesureOperationCompleted
            End If
            Me.InvokeAsync("GetControleBancMesure", New Object() {agentId, id}, Me.GetControleBancMesureOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetControleBancMesureOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetControleBancMesureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetControleBancMesureCompleted(Me, New GetControleBancMesureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ControleBanc)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendControleBancMesure", RequestElementName:="SendControleBancMesureRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendControleBancMesure(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal ControleBancMesureRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ControleBancMesure As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendControleBancMesure", New Object() {agentId, ControleBancMesureRequest})
            ControleBancMesure = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendControleBancMesure(ByVal agentId As String, ByVal ControleBancMesureRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendControleBancMesure", New Object() {agentId, ControleBancMesureRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendControleBancMesure(ByVal asyncResult As System.IAsyncResult, ByRef ControleBancMesure As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ControleBancMesure = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendControleBancMesureAsync(ByVal agentId As String, ByVal ControleBancMesureRequest As Object)
            Me.SendControleBancMesureAsync(agentId, ControleBancMesureRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendControleBancMesureAsync(ByVal agentId As String, ByVal ControleBancMesureRequest As Object, ByVal userState As Object)
            If (Me.SendControleBancMesureOperationCompleted Is Nothing) Then
                Me.SendControleBancMesureOperationCompleted = AddressOf Me.OnSendControleBancMesureOperationCompleted
            End If
            Me.InvokeAsync("SendControleBancMesure", New Object() {agentId, ControleBancMesureRequest}, Me.SendControleBancMesureOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendControleBancMesureOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendControleBancMesureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendControleBancMesureCompleted(Me, New SendControleBancMesureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendControleBancMesure2", RequestElementName:="SendControleBancMesure2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendControleBancMesure2( _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idStructure As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idBanc As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buse1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buse2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buse3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buse4 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buse5 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal buse6 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tempExt As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tempEau As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal resultat As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_pressionEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_debitEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_2bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_2bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_2bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_2bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_2bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_3bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_3bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_3bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_3bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b1_3bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_pressionEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_debitEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_2bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_2bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_2bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_2bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_2bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_3bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_3bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_3bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_3bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b2_3bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_pressionEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_debitEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_2bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_2bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_2bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_2bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_2bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_3bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_3bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_3bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_3bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b3_3bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_pressionEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_debitEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_2bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_2bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_2bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_2bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_2bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_3bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_3bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_3bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_3bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b4_3bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_pressionEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_debitEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_2bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_2bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_2bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_2bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_2bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_3bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_3bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_3bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_3bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b5_3bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_pressionEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_debitEtal As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_2bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_2bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_2bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_2bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_2bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_3bar_m1 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_3bar_m2 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_3bar_m3 As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_3bar_moy As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal b6_3bar_ecart As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ControleBancMesure As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendControleBancMesure2", New Object() {id, idStructure, idBanc, buse1, buse2, buse3, buse4, buse5, buse6, tempExt, tempEau, resultat, b1_pressionEtal, b1_debitEtal, b1_2bar_m1, b1_2bar_m2, b1_2bar_m3, b1_2bar_moy, b1_2bar_ecart, b1_3bar_m1, b1_3bar_m2, b1_3bar_m3, b1_3bar_moy, b1_3bar_ecart, b2_pressionEtal, b2_debitEtal, b2_2bar_m1, b2_2bar_m2, b2_2bar_m3, b2_2bar_moy, b2_2bar_ecart, b2_3bar_m1, b2_3bar_m2, b2_3bar_m3, b2_3bar_moy, b2_3bar_ecart, b3_pressionEtal, b3_debitEtal, b3_2bar_m1, b3_2bar_m2, b3_2bar_m3, b3_2bar_moy, b3_2bar_ecart, b3_3bar_m1, b3_3bar_m2, b3_3bar_m3, b3_3bar_moy, b3_3bar_ecart, b4_pressionEtal, b4_debitEtal, b4_2bar_m1, b4_2bar_m2, b4_2bar_m3, b4_2bar_moy, b4_2bar_ecart, b4_3bar_m1, b4_3bar_m2, b4_3bar_m3, b4_3bar_moy, b4_3bar_ecart, b5_pressionEtal, b5_debitEtal, b5_2bar_m1, b5_2bar_m2, b5_2bar_m3, b5_2bar_moy, b5_2bar_ecart, b5_3bar_m1, b5_3bar_m2, b5_3bar_m3, b5_3bar_moy, b5_3bar_ecart, b6_pressionEtal, b6_debitEtal, b6_2bar_m1, b6_2bar_m2, b6_2bar_m3, b6_2bar_moy, b6_2bar_ecart, b6_3bar_m1, b6_3bar_m2, b6_3bar_m3, b6_3bar_moy, b6_3bar_ecart, dateModificationAgent, dateModificationCrodip})
            ControleBancMesure = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendControleBancMesure2( _
                    ByVal id As String,  _
                    ByVal idStructure As String,  _
                    ByVal idBanc As String,  _
                    ByVal buse1 As String,  _
                    ByVal buse2 As String,  _
                    ByVal buse3 As String,  _
                    ByVal buse4 As String,  _
                    ByVal buse5 As String,  _
                    ByVal buse6 As String,  _
                    ByVal tempExt As String,  _
                    ByVal tempEau As String,  _
                    ByVal resultat As String,  _
                    ByVal b1_pressionEtal As String,  _
                    ByVal b1_debitEtal As String,  _
                    ByVal b1_2bar_m1 As String,  _
                    ByVal b1_2bar_m2 As String,  _
                    ByVal b1_2bar_m3 As String,  _
                    ByVal b1_2bar_moy As String,  _
                    ByVal b1_2bar_ecart As String,  _
                    ByVal b1_3bar_m1 As String,  _
                    ByVal b1_3bar_m2 As String,  _
                    ByVal b1_3bar_m3 As String,  _
                    ByVal b1_3bar_moy As String,  _
                    ByVal b1_3bar_ecart As String,  _
                    ByVal b2_pressionEtal As String,  _
                    ByVal b2_debitEtal As String,  _
                    ByVal b2_2bar_m1 As String,  _
                    ByVal b2_2bar_m2 As String,  _
                    ByVal b2_2bar_m3 As String,  _
                    ByVal b2_2bar_moy As String,  _
                    ByVal b2_2bar_ecart As String,  _
                    ByVal b2_3bar_m1 As String,  _
                    ByVal b2_3bar_m2 As String,  _
                    ByVal b2_3bar_m3 As String,  _
                    ByVal b2_3bar_moy As String,  _
                    ByVal b2_3bar_ecart As String,  _
                    ByVal b3_pressionEtal As String,  _
                    ByVal b3_debitEtal As String,  _
                    ByVal b3_2bar_m1 As String,  _
                    ByVal b3_2bar_m2 As String,  _
                    ByVal b3_2bar_m3 As String,  _
                    ByVal b3_2bar_moy As String,  _
                    ByVal b3_2bar_ecart As String,  _
                    ByVal b3_3bar_m1 As String,  _
                    ByVal b3_3bar_m2 As String,  _
                    ByVal b3_3bar_m3 As String,  _
                    ByVal b3_3bar_moy As String,  _
                    ByVal b3_3bar_ecart As String,  _
                    ByVal b4_pressionEtal As String,  _
                    ByVal b4_debitEtal As String,  _
                    ByVal b4_2bar_m1 As String,  _
                    ByVal b4_2bar_m2 As String,  _
                    ByVal b4_2bar_m3 As String,  _
                    ByVal b4_2bar_moy As String,  _
                    ByVal b4_2bar_ecart As String,  _
                    ByVal b4_3bar_m1 As String,  _
                    ByVal b4_3bar_m2 As String,  _
                    ByVal b4_3bar_m3 As String,  _
                    ByVal b4_3bar_moy As String,  _
                    ByVal b4_3bar_ecart As String,  _
                    ByVal b5_pressionEtal As String,  _
                    ByVal b5_debitEtal As String,  _
                    ByVal b5_2bar_m1 As String,  _
                    ByVal b5_2bar_m2 As String,  _
                    ByVal b5_2bar_m3 As String,  _
                    ByVal b5_2bar_moy As String,  _
                    ByVal b5_2bar_ecart As String,  _
                    ByVal b5_3bar_m1 As String,  _
                    ByVal b5_3bar_m2 As String,  _
                    ByVal b5_3bar_m3 As String,  _
                    ByVal b5_3bar_moy As String,  _
                    ByVal b5_3bar_ecart As String,  _
                    ByVal b6_pressionEtal As String,  _
                    ByVal b6_debitEtal As String,  _
                    ByVal b6_2bar_m1 As String,  _
                    ByVal b6_2bar_m2 As String,  _
                    ByVal b6_2bar_m3 As String,  _
                    ByVal b6_2bar_moy As String,  _
                    ByVal b6_2bar_ecart As String,  _
                    ByVal b6_3bar_m1 As String,  _
                    ByVal b6_3bar_m2 As String,  _
                    ByVal b6_3bar_m3 As String,  _
                    ByVal b6_3bar_moy As String,  _
                    ByVal b6_3bar_ecart As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendControleBancMesure2", New Object() {id, idStructure, idBanc, buse1, buse2, buse3, buse4, buse5, buse6, tempExt, tempEau, resultat, b1_pressionEtal, b1_debitEtal, b1_2bar_m1, b1_2bar_m2, b1_2bar_m3, b1_2bar_moy, b1_2bar_ecart, b1_3bar_m1, b1_3bar_m2, b1_3bar_m3, b1_3bar_moy, b1_3bar_ecart, b2_pressionEtal, b2_debitEtal, b2_2bar_m1, b2_2bar_m2, b2_2bar_m3, b2_2bar_moy, b2_2bar_ecart, b2_3bar_m1, b2_3bar_m2, b2_3bar_m3, b2_3bar_moy, b2_3bar_ecart, b3_pressionEtal, b3_debitEtal, b3_2bar_m1, b3_2bar_m2, b3_2bar_m3, b3_2bar_moy, b3_2bar_ecart, b3_3bar_m1, b3_3bar_m2, b3_3bar_m3, b3_3bar_moy, b3_3bar_ecart, b4_pressionEtal, b4_debitEtal, b4_2bar_m1, b4_2bar_m2, b4_2bar_m3, b4_2bar_moy, b4_2bar_ecart, b4_3bar_m1, b4_3bar_m2, b4_3bar_m3, b4_3bar_moy, b4_3bar_ecart, b5_pressionEtal, b5_debitEtal, b5_2bar_m1, b5_2bar_m2, b5_2bar_m3, b5_2bar_moy, b5_2bar_ecart, b5_3bar_m1, b5_3bar_m2, b5_3bar_m3, b5_3bar_moy, b5_3bar_ecart, b6_pressionEtal, b6_debitEtal, b6_2bar_m1, b6_2bar_m2, b6_2bar_m3, b6_2bar_moy, b6_2bar_ecart, b6_3bar_m1, b6_3bar_m2, b6_3bar_m3, b6_3bar_moy, b6_3bar_ecart, dateModificationAgent, dateModificationCrodip}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendControleBancMesure2(ByVal asyncResult As System.IAsyncResult, ByRef ControleBancMesure As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ControleBancMesure = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendControleBancMesure2Async( _
                    ByVal id As String,  _
                    ByVal idStructure As String,  _
                    ByVal idBanc As String,  _
                    ByVal buse1 As String,  _
                    ByVal buse2 As String,  _
                    ByVal buse3 As String,  _
                    ByVal buse4 As String,  _
                    ByVal buse5 As String,  _
                    ByVal buse6 As String,  _
                    ByVal tempExt As String,  _
                    ByVal tempEau As String,  _
                    ByVal resultat As String,  _
                    ByVal b1_pressionEtal As String,  _
                    ByVal b1_debitEtal As String,  _
                    ByVal b1_2bar_m1 As String,  _
                    ByVal b1_2bar_m2 As String,  _
                    ByVal b1_2bar_m3 As String,  _
                    ByVal b1_2bar_moy As String,  _
                    ByVal b1_2bar_ecart As String,  _
                    ByVal b1_3bar_m1 As String,  _
                    ByVal b1_3bar_m2 As String,  _
                    ByVal b1_3bar_m3 As String,  _
                    ByVal b1_3bar_moy As String,  _
                    ByVal b1_3bar_ecart As String,  _
                    ByVal b2_pressionEtal As String,  _
                    ByVal b2_debitEtal As String,  _
                    ByVal b2_2bar_m1 As String,  _
                    ByVal b2_2bar_m2 As String,  _
                    ByVal b2_2bar_m3 As String,  _
                    ByVal b2_2bar_moy As String,  _
                    ByVal b2_2bar_ecart As String,  _
                    ByVal b2_3bar_m1 As String,  _
                    ByVal b2_3bar_m2 As String,  _
                    ByVal b2_3bar_m3 As String,  _
                    ByVal b2_3bar_moy As String,  _
                    ByVal b2_3bar_ecart As String,  _
                    ByVal b3_pressionEtal As String,  _
                    ByVal b3_debitEtal As String,  _
                    ByVal b3_2bar_m1 As String,  _
                    ByVal b3_2bar_m2 As String,  _
                    ByVal b3_2bar_m3 As String,  _
                    ByVal b3_2bar_moy As String,  _
                    ByVal b3_2bar_ecart As String,  _
                    ByVal b3_3bar_m1 As String,  _
                    ByVal b3_3bar_m2 As String,  _
                    ByVal b3_3bar_m3 As String,  _
                    ByVal b3_3bar_moy As String,  _
                    ByVal b3_3bar_ecart As String,  _
                    ByVal b4_pressionEtal As String,  _
                    ByVal b4_debitEtal As String,  _
                    ByVal b4_2bar_m1 As String,  _
                    ByVal b4_2bar_m2 As String,  _
                    ByVal b4_2bar_m3 As String,  _
                    ByVal b4_2bar_moy As String,  _
                    ByVal b4_2bar_ecart As String,  _
                    ByVal b4_3bar_m1 As String,  _
                    ByVal b4_3bar_m2 As String,  _
                    ByVal b4_3bar_m3 As String,  _
                    ByVal b4_3bar_moy As String,  _
                    ByVal b4_3bar_ecart As String,  _
                    ByVal b5_pressionEtal As String,  _
                    ByVal b5_debitEtal As String,  _
                    ByVal b5_2bar_m1 As String,  _
                    ByVal b5_2bar_m2 As String,  _
                    ByVal b5_2bar_m3 As String,  _
                    ByVal b5_2bar_moy As String,  _
                    ByVal b5_2bar_ecart As String,  _
                    ByVal b5_3bar_m1 As String,  _
                    ByVal b5_3bar_m2 As String,  _
                    ByVal b5_3bar_m3 As String,  _
                    ByVal b5_3bar_moy As String,  _
                    ByVal b5_3bar_ecart As String,  _
                    ByVal b6_pressionEtal As String,  _
                    ByVal b6_debitEtal As String,  _
                    ByVal b6_2bar_m1 As String,  _
                    ByVal b6_2bar_m2 As String,  _
                    ByVal b6_2bar_m3 As String,  _
                    ByVal b6_2bar_moy As String,  _
                    ByVal b6_2bar_ecart As String,  _
                    ByVal b6_3bar_m1 As String,  _
                    ByVal b6_3bar_m2 As String,  _
                    ByVal b6_3bar_m3 As String,  _
                    ByVal b6_3bar_moy As String,  _
                    ByVal b6_3bar_ecart As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateModificationCrodip As String)
            Me.SendControleBancMesure2Async(id, idStructure, idBanc, buse1, buse2, buse3, buse4, buse5, buse6, tempExt, tempEau, resultat, b1_pressionEtal, b1_debitEtal, b1_2bar_m1, b1_2bar_m2, b1_2bar_m3, b1_2bar_moy, b1_2bar_ecart, b1_3bar_m1, b1_3bar_m2, b1_3bar_m3, b1_3bar_moy, b1_3bar_ecart, b2_pressionEtal, b2_debitEtal, b2_2bar_m1, b2_2bar_m2, b2_2bar_m3, b2_2bar_moy, b2_2bar_ecart, b2_3bar_m1, b2_3bar_m2, b2_3bar_m3, b2_3bar_moy, b2_3bar_ecart, b3_pressionEtal, b3_debitEtal, b3_2bar_m1, b3_2bar_m2, b3_2bar_m3, b3_2bar_moy, b3_2bar_ecart, b3_3bar_m1, b3_3bar_m2, b3_3bar_m3, b3_3bar_moy, b3_3bar_ecart, b4_pressionEtal, b4_debitEtal, b4_2bar_m1, b4_2bar_m2, b4_2bar_m3, b4_2bar_moy, b4_2bar_ecart, b4_3bar_m1, b4_3bar_m2, b4_3bar_m3, b4_3bar_moy, b4_3bar_ecart, b5_pressionEtal, b5_debitEtal, b5_2bar_m1, b5_2bar_m2, b5_2bar_m3, b5_2bar_moy, b5_2bar_ecart, b5_3bar_m1, b5_3bar_m2, b5_3bar_m3, b5_3bar_moy, b5_3bar_ecart, b6_pressionEtal, b6_debitEtal, b6_2bar_m1, b6_2bar_m2, b6_2bar_m3, b6_2bar_moy, b6_2bar_ecart, b6_3bar_m1, b6_3bar_m2, b6_3bar_m3, b6_3bar_moy, b6_3bar_ecart, dateModificationAgent, dateModificationCrodip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendControleBancMesure2Async( _
                    ByVal id As String,  _
                    ByVal idStructure As String,  _
                    ByVal idBanc As String,  _
                    ByVal buse1 As String,  _
                    ByVal buse2 As String,  _
                    ByVal buse3 As String,  _
                    ByVal buse4 As String,  _
                    ByVal buse5 As String,  _
                    ByVal buse6 As String,  _
                    ByVal tempExt As String,  _
                    ByVal tempEau As String,  _
                    ByVal resultat As String,  _
                    ByVal b1_pressionEtal As String,  _
                    ByVal b1_debitEtal As String,  _
                    ByVal b1_2bar_m1 As String,  _
                    ByVal b1_2bar_m2 As String,  _
                    ByVal b1_2bar_m3 As String,  _
                    ByVal b1_2bar_moy As String,  _
                    ByVal b1_2bar_ecart As String,  _
                    ByVal b1_3bar_m1 As String,  _
                    ByVal b1_3bar_m2 As String,  _
                    ByVal b1_3bar_m3 As String,  _
                    ByVal b1_3bar_moy As String,  _
                    ByVal b1_3bar_ecart As String,  _
                    ByVal b2_pressionEtal As String,  _
                    ByVal b2_debitEtal As String,  _
                    ByVal b2_2bar_m1 As String,  _
                    ByVal b2_2bar_m2 As String,  _
                    ByVal b2_2bar_m3 As String,  _
                    ByVal b2_2bar_moy As String,  _
                    ByVal b2_2bar_ecart As String,  _
                    ByVal b2_3bar_m1 As String,  _
                    ByVal b2_3bar_m2 As String,  _
                    ByVal b2_3bar_m3 As String,  _
                    ByVal b2_3bar_moy As String,  _
                    ByVal b2_3bar_ecart As String,  _
                    ByVal b3_pressionEtal As String,  _
                    ByVal b3_debitEtal As String,  _
                    ByVal b3_2bar_m1 As String,  _
                    ByVal b3_2bar_m2 As String,  _
                    ByVal b3_2bar_m3 As String,  _
                    ByVal b3_2bar_moy As String,  _
                    ByVal b3_2bar_ecart As String,  _
                    ByVal b3_3bar_m1 As String,  _
                    ByVal b3_3bar_m2 As String,  _
                    ByVal b3_3bar_m3 As String,  _
                    ByVal b3_3bar_moy As String,  _
                    ByVal b3_3bar_ecart As String,  _
                    ByVal b4_pressionEtal As String,  _
                    ByVal b4_debitEtal As String,  _
                    ByVal b4_2bar_m1 As String,  _
                    ByVal b4_2bar_m2 As String,  _
                    ByVal b4_2bar_m3 As String,  _
                    ByVal b4_2bar_moy As String,  _
                    ByVal b4_2bar_ecart As String,  _
                    ByVal b4_3bar_m1 As String,  _
                    ByVal b4_3bar_m2 As String,  _
                    ByVal b4_3bar_m3 As String,  _
                    ByVal b4_3bar_moy As String,  _
                    ByVal b4_3bar_ecart As String,  _
                    ByVal b5_pressionEtal As String,  _
                    ByVal b5_debitEtal As String,  _
                    ByVal b5_2bar_m1 As String,  _
                    ByVal b5_2bar_m2 As String,  _
                    ByVal b5_2bar_m3 As String,  _
                    ByVal b5_2bar_moy As String,  _
                    ByVal b5_2bar_ecart As String,  _
                    ByVal b5_3bar_m1 As String,  _
                    ByVal b5_3bar_m2 As String,  _
                    ByVal b5_3bar_m3 As String,  _
                    ByVal b5_3bar_moy As String,  _
                    ByVal b5_3bar_ecart As String,  _
                    ByVal b6_pressionEtal As String,  _
                    ByVal b6_debitEtal As String,  _
                    ByVal b6_2bar_m1 As String,  _
                    ByVal b6_2bar_m2 As String,  _
                    ByVal b6_2bar_m3 As String,  _
                    ByVal b6_2bar_moy As String,  _
                    ByVal b6_2bar_ecart As String,  _
                    ByVal b6_3bar_m1 As String,  _
                    ByVal b6_3bar_m2 As String,  _
                    ByVal b6_3bar_m3 As String,  _
                    ByVal b6_3bar_moy As String,  _
                    ByVal b6_3bar_ecart As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal userState As Object)
            If (Me.SendControleBancMesure2OperationCompleted Is Nothing) Then
                Me.SendControleBancMesure2OperationCompleted = AddressOf Me.OnSendControleBancMesure2OperationCompleted
            End If
            Me.InvokeAsync("SendControleBancMesure2", New Object() {id, idStructure, idBanc, buse1, buse2, buse3, buse4, buse5, buse6, tempExt, tempEau, resultat, b1_pressionEtal, b1_debitEtal, b1_2bar_m1, b1_2bar_m2, b1_2bar_m3, b1_2bar_moy, b1_2bar_ecart, b1_3bar_m1, b1_3bar_m2, b1_3bar_m3, b1_3bar_moy, b1_3bar_ecart, b2_pressionEtal, b2_debitEtal, b2_2bar_m1, b2_2bar_m2, b2_2bar_m3, b2_2bar_moy, b2_2bar_ecart, b2_3bar_m1, b2_3bar_m2, b2_3bar_m3, b2_3bar_moy, b2_3bar_ecart, b3_pressionEtal, b3_debitEtal, b3_2bar_m1, b3_2bar_m2, b3_2bar_m3, b3_2bar_moy, b3_2bar_ecart, b3_3bar_m1, b3_3bar_m2, b3_3bar_m3, b3_3bar_moy, b3_3bar_ecart, b4_pressionEtal, b4_debitEtal, b4_2bar_m1, b4_2bar_m2, b4_2bar_m3, b4_2bar_moy, b4_2bar_ecart, b4_3bar_m1, b4_3bar_m2, b4_3bar_m3, b4_3bar_moy, b4_3bar_ecart, b5_pressionEtal, b5_debitEtal, b5_2bar_m1, b5_2bar_m2, b5_2bar_m3, b5_2bar_moy, b5_2bar_ecart, b5_3bar_m1, b5_3bar_m2, b5_3bar_m3, b5_3bar_moy, b5_3bar_ecart, b6_pressionEtal, b6_debitEtal, b6_2bar_m1, b6_2bar_m2, b6_2bar_m3, b6_2bar_moy, b6_2bar_ecart, b6_3bar_m1, b6_3bar_m2, b6_3bar_m3, b6_3bar_moy, b6_3bar_ecart, dateModificationAgent, dateModificationCrodip}, Me.SendControleBancMesure2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendControleBancMesure2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendControleBancMesure2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendControleBancMesure2Completed(Me, New SendControleBancMesure2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ControleMano)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetControleManoMesure", RequestElementName:="GetControleManoMesureRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetControleManoMesure(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ControleManoMesure As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetControleManoMesure", New Object() {agentId, id})
            ControleManoMesure = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetControleManoMesure(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetControleManoMesure", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetControleManoMesure(ByVal asyncResult As System.IAsyncResult, ByRef ControleManoMesure As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ControleManoMesure = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetControleManoMesureAsync(ByVal agentId As String, ByVal id As String)
            Me.GetControleManoMesureAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetControleManoMesureAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetControleManoMesureOperationCompleted Is Nothing) Then
                Me.GetControleManoMesureOperationCompleted = AddressOf Me.OnGetControleManoMesureOperationCompleted
            End If
            Me.InvokeAsync("GetControleManoMesure", New Object() {agentId, id}, Me.GetControleManoMesureOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetControleManoMesureOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetControleManoMesureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetControleManoMesureCompleted(Me, New GetControleManoMesureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ControleMano)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendControleManoMesure", RequestElementName:="SendControleManoMesureRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendControleManoMesure(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal ControleManoMesureRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ControleManoMesure As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendControleManoMesure", New Object() {agentId, ControleManoMesureRequest})
            ControleManoMesure = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendControleManoMesure(ByVal agentId As String, ByVal ControleManoMesureRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendControleManoMesure", New Object() {agentId, ControleManoMesureRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendControleManoMesure(ByVal asyncResult As System.IAsyncResult, ByRef ControleManoMesure As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ControleManoMesure = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendControleManoMesureAsync(ByVal agentId As String, ByVal ControleManoMesureRequest As Object)
            Me.SendControleManoMesureAsync(agentId, ControleManoMesureRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendControleManoMesureAsync(ByVal agentId As String, ByVal ControleManoMesureRequest As Object, ByVal userState As Object)
            If (Me.SendControleManoMesureOperationCompleted Is Nothing) Then
                Me.SendControleManoMesureOperationCompleted = AddressOf Me.OnSendControleManoMesureOperationCompleted
            End If
            Me.InvokeAsync("SendControleManoMesure", New Object() {agentId, ControleManoMesureRequest}, Me.SendControleManoMesureOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendControleManoMesureOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendControleManoMesureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendControleManoMesureCompleted(Me, New SendControleManoMesureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(FVBanc)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetFVBanc", RequestElementName:="GetFVBancRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetFVBanc(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef FVBanc As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetFVBanc", New Object() {agentId, id})
            FVBanc = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFVBanc(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFVBanc", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFVBanc(ByVal asyncResult As System.IAsyncResult, ByRef FVBanc As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            FVBanc = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFVBancAsync(ByVal agentId As String, ByVal id As String)
            Me.GetFVBancAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFVBancAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetFVBancOperationCompleted Is Nothing) Then
                Me.GetFVBancOperationCompleted = AddressOf Me.OnGetFVBancOperationCompleted
            End If
            Me.InvokeAsync("GetFVBanc", New Object() {agentId, id}, Me.GetFVBancOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFVBancOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFVBancCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFVBancCompleted(Me, New GetFVBancCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(FVBanc)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendFVBanc", RequestElementName:="SendFVBancRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendFVBanc(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal FVBancRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef FVBanc As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendFVBanc", New Object() {agentId, FVBancRequest})
            FVBanc = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendFVBanc(ByVal agentId As String, ByVal FVBancRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendFVBanc", New Object() {agentId, FVBancRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendFVBanc(ByVal asyncResult As System.IAsyncResult, ByRef FVBanc As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            FVBanc = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFVBancAsync(ByVal agentId As String, ByVal FVBancRequest As Object)
            Me.SendFVBancAsync(agentId, FVBancRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFVBancAsync(ByVal agentId As String, ByVal FVBancRequest As Object, ByVal userState As Object)
            If (Me.SendFVBancOperationCompleted Is Nothing) Then
                Me.SendFVBancOperationCompleted = AddressOf Me.OnSendFVBancOperationCompleted
            End If
            Me.InvokeAsync("SendFVBanc", New Object() {agentId, FVBancRequest}, Me.SendFVBancOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFVBancOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFVBancCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFVBancCompleted(Me, New SendFVBancCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendFVBanc2", RequestElementName:="SendFVBanc2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendFVBanc2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idBancMesure As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal type As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal auteur As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idAgentControleur As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal caracteristiques As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModif As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal blocage As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pressionControle As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal valeursMesurees As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idManometreControle As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idBuseEtalon As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef FVBanc As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendFVBanc2", New Object() {id, idBancMesure, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, pressionControle, valeursMesurees, idManometreControle, idBuseEtalon, dateModificationCrodip, dateModificationAgent})
            FVBanc = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendFVBanc2( _
                    ByVal id As String,  _
                    ByVal idBancMesure As String,  _
                    ByVal type As String,  _
                    ByVal auteur As String,  _
                    ByVal idAgentControleur As Integer,  _
                    ByVal caracteristiques As String,  _
                    ByVal dateModif As String,  _
                    ByVal blocage As Integer,  _
                    ByVal pressionControle As String,  _
                    ByVal valeursMesurees As String,  _
                    ByVal idManometreControle As String,  _
                    ByVal idBuseEtalon As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendFVBanc2", New Object() {id, idBancMesure, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, pressionControle, valeursMesurees, idManometreControle, idBuseEtalon, dateModificationCrodip, dateModificationAgent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendFVBanc2(ByVal asyncResult As System.IAsyncResult, ByRef FVBanc As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            FVBanc = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFVBanc2Async(ByVal id As String, ByVal idBancMesure As String, ByVal type As String, ByVal auteur As String, ByVal idAgentControleur As Integer, ByVal caracteristiques As String, ByVal dateModif As String, ByVal blocage As Integer, ByVal pressionControle As String, ByVal valeursMesurees As String, ByVal idManometreControle As String, ByVal idBuseEtalon As String, ByVal dateModificationCrodip As String, ByVal dateModificationAgent As String)
            Me.SendFVBanc2Async(id, idBancMesure, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, pressionControle, valeursMesurees, idManometreControle, idBuseEtalon, dateModificationCrodip, dateModificationAgent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFVBanc2Async(ByVal id As String, ByVal idBancMesure As String, ByVal type As String, ByVal auteur As String, ByVal idAgentControleur As Integer, ByVal caracteristiques As String, ByVal dateModif As String, ByVal blocage As Integer, ByVal pressionControle As String, ByVal valeursMesurees As String, ByVal idManometreControle As String, ByVal idBuseEtalon As String, ByVal dateModificationCrodip As String, ByVal dateModificationAgent As String, ByVal userState As Object)
            If (Me.SendFVBanc2OperationCompleted Is Nothing) Then
                Me.SendFVBanc2OperationCompleted = AddressOf Me.OnSendFVBanc2OperationCompleted
            End If
            Me.InvokeAsync("SendFVBanc2", New Object() {id, idBancMesure, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, pressionControle, valeursMesurees, idManometreControle, idBuseEtalon, dateModificationCrodip, dateModificationAgent}, Me.SendFVBanc2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFVBanc2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFVBanc2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFVBanc2Completed(Me, New SendFVBanc2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(FVManometreControle)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetFVManometreControle", RequestElementName:="GetFVManometreControleRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetFVManometreControle(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef FVManometreControle As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetFVManometreControle", New Object() {agentId, id})
            FVManometreControle = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFVManometreControle(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFVManometreControle", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFVManometreControle(ByVal asyncResult As System.IAsyncResult, ByRef FVManometreControle As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            FVManometreControle = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFVManometreControleAsync(ByVal agentId As String, ByVal id As String)
            Me.GetFVManometreControleAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFVManometreControleAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetFVManometreControleOperationCompleted Is Nothing) Then
                Me.GetFVManometreControleOperationCompleted = AddressOf Me.OnGetFVManometreControleOperationCompleted
            End If
            Me.InvokeAsync("GetFVManometreControle", New Object() {agentId, id}, Me.GetFVManometreControleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFVManometreControleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFVManometreControleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFVManometreControleCompleted(Me, New GetFVManometreControleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(FVManometreControle)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendFVManometreControle", RequestElementName:="SendFVManometreControleRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendFVManometreControle(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal FVManometreControleRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef FVManometreControle As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendFVManometreControle", New Object() {agentId, FVManometreControleRequest})
            FVManometreControle = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendFVManometreControle(ByVal agentId As String, ByVal FVManometreControleRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendFVManometreControle", New Object() {agentId, FVManometreControleRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendFVManometreControle(ByVal asyncResult As System.IAsyncResult, ByRef FVManometreControle As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            FVManometreControle = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFVManometreControleAsync(ByVal agentId As String, ByVal FVManometreControleRequest As Object)
            Me.SendFVManometreControleAsync(agentId, FVManometreControleRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFVManometreControleAsync(ByVal agentId As String, ByVal FVManometreControleRequest As Object, ByVal userState As Object)
            If (Me.SendFVManometreControleOperationCompleted Is Nothing) Then
                Me.SendFVManometreControleOperationCompleted = AddressOf Me.OnSendFVManometreControleOperationCompleted
            End If
            Me.InvokeAsync("SendFVManometreControle", New Object() {agentId, FVManometreControleRequest}, Me.SendFVManometreControleOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFVManometreControleOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFVManometreControleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFVManometreControleCompleted(Me, New SendFVManometreControleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendFVManometreControle2", RequestElementName:="SendFVManometreControle2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendFVManometreControle2( _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idManometre As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal type As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal auteur As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idAgentControleur As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal caracteristiques As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModif As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal blocage As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idReetalonnage As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal nomLaboratoire As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateReetalonnage As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pressionControle As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal valeursMesurees As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idManometreControleur As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef FVManometreControle As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendFVManometreControle2", New Object() {id, idManometre, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, idReetalonnage, nomLaboratoire, dateReetalonnage, pressionControle, valeursMesurees, idManometreControleur, dateModificationCrodip, dateModificationAgent})
            FVManometreControle = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendFVManometreControle2( _
                    ByVal id As String,  _
                    ByVal idManometre As String,  _
                    ByVal type As String,  _
                    ByVal auteur As String,  _
                    ByVal idAgentControleur As Integer,  _
                    ByVal caracteristiques As String,  _
                    ByVal dateModif As String,  _
                    ByVal blocage As Integer,  _
                    ByVal idReetalonnage As String,  _
                    ByVal nomLaboratoire As String,  _
                    ByVal dateReetalonnage As String,  _
                    ByVal pressionControle As String,  _
                    ByVal valeursMesurees As String,  _
                    ByVal idManometreControleur As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendFVManometreControle2", New Object() {id, idManometre, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, idReetalonnage, nomLaboratoire, dateReetalonnage, pressionControle, valeursMesurees, idManometreControleur, dateModificationCrodip, dateModificationAgent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendFVManometreControle2(ByVal asyncResult As System.IAsyncResult, ByRef FVManometreControle As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            FVManometreControle = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFVManometreControle2Async( _
                    ByVal id As String,  _
                    ByVal idManometre As String,  _
                    ByVal type As String,  _
                    ByVal auteur As String,  _
                    ByVal idAgentControleur As Integer,  _
                    ByVal caracteristiques As String,  _
                    ByVal dateModif As String,  _
                    ByVal blocage As Integer,  _
                    ByVal idReetalonnage As String,  _
                    ByVal nomLaboratoire As String,  _
                    ByVal dateReetalonnage As String,  _
                    ByVal pressionControle As String,  _
                    ByVal valeursMesurees As String,  _
                    ByVal idManometreControleur As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String)
            Me.SendFVManometreControle2Async(id, idManometre, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, idReetalonnage, nomLaboratoire, dateReetalonnage, pressionControle, valeursMesurees, idManometreControleur, dateModificationCrodip, dateModificationAgent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFVManometreControle2Async( _
                    ByVal id As String,  _
                    ByVal idManometre As String,  _
                    ByVal type As String,  _
                    ByVal auteur As String,  _
                    ByVal idAgentControleur As Integer,  _
                    ByVal caracteristiques As String,  _
                    ByVal dateModif As String,  _
                    ByVal blocage As Integer,  _
                    ByVal idReetalonnage As String,  _
                    ByVal nomLaboratoire As String,  _
                    ByVal dateReetalonnage As String,  _
                    ByVal pressionControle As String,  _
                    ByVal valeursMesurees As String,  _
                    ByVal idManometreControleur As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal userState As Object)
            If (Me.SendFVManometreControle2OperationCompleted Is Nothing) Then
                Me.SendFVManometreControle2OperationCompleted = AddressOf Me.OnSendFVManometreControle2OperationCompleted
            End If
            Me.InvokeAsync("SendFVManometreControle2", New Object() {id, idManometre, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, idReetalonnage, nomLaboratoire, dateReetalonnage, pressionControle, valeursMesurees, idManometreControleur, dateModificationCrodip, dateModificationAgent}, Me.SendFVManometreControle2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFVManometreControle2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFVManometreControle2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFVManometreControle2Completed(Me, New SendFVManometreControle2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(FVManometreEtalon)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetFVManometreEtalon", RequestElementName:="GetFVManometreEtalonRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetFVManometreEtalon(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef FVManometreEtalon As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetFVManometreEtalon", New Object() {agentId, id})
            FVManometreEtalon = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFVManometreEtalon(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFVManometreEtalon", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFVManometreEtalon(ByVal asyncResult As System.IAsyncResult, ByRef FVManometreEtalon As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            FVManometreEtalon = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFVManometreEtalonAsync(ByVal agentId As String, ByVal id As String)
            Me.GetFVManometreEtalonAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFVManometreEtalonAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetFVManometreEtalonOperationCompleted Is Nothing) Then
                Me.GetFVManometreEtalonOperationCompleted = AddressOf Me.OnGetFVManometreEtalonOperationCompleted
            End If
            Me.InvokeAsync("GetFVManometreEtalon", New Object() {agentId, id}, Me.GetFVManometreEtalonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFVManometreEtalonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFVManometreEtalonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFVManometreEtalonCompleted(Me, New GetFVManometreEtalonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(FVManometreEtalon)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendFVManometreEtalon", RequestElementName:="SendFVManometreEtalonRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendFVManometreEtalon(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal FVManometreEtalonRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef FVManometreEtalon As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendFVManometreEtalon", New Object() {agentId, FVManometreEtalonRequest})
            FVManometreEtalon = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendFVManometreEtalon(ByVal agentId As String, ByVal FVManometreEtalonRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendFVManometreEtalon", New Object() {agentId, FVManometreEtalonRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendFVManometreEtalon(ByVal asyncResult As System.IAsyncResult, ByRef FVManometreEtalon As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            FVManometreEtalon = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFVManometreEtalonAsync(ByVal agentId As String, ByVal FVManometreEtalonRequest As Object)
            Me.SendFVManometreEtalonAsync(agentId, FVManometreEtalonRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFVManometreEtalonAsync(ByVal agentId As String, ByVal FVManometreEtalonRequest As Object, ByVal userState As Object)
            If (Me.SendFVManometreEtalonOperationCompleted Is Nothing) Then
                Me.SendFVManometreEtalonOperationCompleted = AddressOf Me.OnSendFVManometreEtalonOperationCompleted
            End If
            Me.InvokeAsync("SendFVManometreEtalon", New Object() {agentId, FVManometreEtalonRequest}, Me.SendFVManometreEtalonOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFVManometreEtalonOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFVManometreEtalonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFVManometreEtalonCompleted(Me, New SendFVManometreEtalonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendFVManometreEtalon2", RequestElementName:="SendFVManometreEtalon2Request", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendFVManometreEtalon2( _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idManometre As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal type As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal auteur As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idAgentControleur As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal caracteristiques As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModif As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal blocage As Integer,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idReetalonnage As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal nomLaboratoire As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateReetalonnage As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pressionControle As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal valeursMesurees As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idManometreControleur As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationCrodip As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal dateModificationAgent As String,  _
                    <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef FVManometreEtalon As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendFVManometreEtalon2", New Object() {id, idManometre, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, idReetalonnage, nomLaboratoire, dateReetalonnage, pressionControle, valeursMesurees, idManometreControleur, dateModificationCrodip, dateModificationAgent})
            FVManometreEtalon = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendFVManometreEtalon2( _
                    ByVal id As String,  _
                    ByVal idManometre As String,  _
                    ByVal type As String,  _
                    ByVal auteur As String,  _
                    ByVal idAgentControleur As Integer,  _
                    ByVal caracteristiques As String,  _
                    ByVal dateModif As String,  _
                    ByVal blocage As Integer,  _
                    ByVal idReetalonnage As String,  _
                    ByVal nomLaboratoire As String,  _
                    ByVal dateReetalonnage As String,  _
                    ByVal pressionControle As String,  _
                    ByVal valeursMesurees As String,  _
                    ByVal idManometreControleur As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendFVManometreEtalon2", New Object() {id, idManometre, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, idReetalonnage, nomLaboratoire, dateReetalonnage, pressionControle, valeursMesurees, idManometreControleur, dateModificationCrodip, dateModificationAgent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendFVManometreEtalon2(ByVal asyncResult As System.IAsyncResult, ByRef FVManometreEtalon As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            FVManometreEtalon = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFVManometreEtalon2Async( _
                    ByVal id As String,  _
                    ByVal idManometre As String,  _
                    ByVal type As String,  _
                    ByVal auteur As String,  _
                    ByVal idAgentControleur As Integer,  _
                    ByVal caracteristiques As String,  _
                    ByVal dateModif As String,  _
                    ByVal blocage As Integer,  _
                    ByVal idReetalonnage As String,  _
                    ByVal nomLaboratoire As String,  _
                    ByVal dateReetalonnage As String,  _
                    ByVal pressionControle As String,  _
                    ByVal valeursMesurees As String,  _
                    ByVal idManometreControleur As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String)
            Me.SendFVManometreEtalon2Async(id, idManometre, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, idReetalonnage, nomLaboratoire, dateReetalonnage, pressionControle, valeursMesurees, idManometreControleur, dateModificationCrodip, dateModificationAgent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFVManometreEtalon2Async( _
                    ByVal id As String,  _
                    ByVal idManometre As String,  _
                    ByVal type As String,  _
                    ByVal auteur As String,  _
                    ByVal idAgentControleur As Integer,  _
                    ByVal caracteristiques As String,  _
                    ByVal dateModif As String,  _
                    ByVal blocage As Integer,  _
                    ByVal idReetalonnage As String,  _
                    ByVal nomLaboratoire As String,  _
                    ByVal dateReetalonnage As String,  _
                    ByVal pressionControle As String,  _
                    ByVal valeursMesurees As String,  _
                    ByVal idManometreControleur As String,  _
                    ByVal dateModificationCrodip As String,  _
                    ByVal dateModificationAgent As String,  _
                    ByVal userState As Object)
            If (Me.SendFVManometreEtalon2OperationCompleted Is Nothing) Then
                Me.SendFVManometreEtalon2OperationCompleted = AddressOf Me.OnSendFVManometreEtalon2OperationCompleted
            End If
            Me.InvokeAsync("SendFVManometreEtalon2", New Object() {id, idManometre, type, auteur, idAgentControleur, caracteristiques, dateModif, blocage, idReetalonnage, nomLaboratoire, dateReetalonnage, pressionControle, valeursMesurees, idManometreControleur, dateModificationCrodip, dateModificationAgent}, Me.SendFVManometreEtalon2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFVManometreEtalon2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFVManometreEtalon2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFVManometreEtalon2Completed(Me, New SendFVManometreEtalon2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Pulverisateur)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetPulverisateur", RequestElementName:="GetPulverisateurRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetPulverisateur(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Pulverisateur As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetPulverisateur", New Object() {agentId, id})
            Pulverisateur = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPulverisateur(ByVal agentId As String, ByVal id As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPulverisateur", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPulverisateur(ByVal asyncResult As System.IAsyncResult, ByRef Pulverisateur As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Pulverisateur = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPulverisateurAsync(ByVal agentId As String, ByVal id As String)
            Me.GetPulverisateurAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPulverisateurAsync(ByVal agentId As String, ByVal id As String, ByVal userState As Object)
            If (Me.GetPulverisateurOperationCompleted Is Nothing) Then
                Me.GetPulverisateurOperationCompleted = AddressOf Me.OnGetPulverisateurOperationCompleted
            End If
            Me.InvokeAsync("GetPulverisateur", New Object() {agentId, id}, Me.GetPulverisateurOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPulverisateurOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPulverisateurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPulverisateurCompleted(Me, New GetPulverisateurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Pulverisateur)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendPulverisateur", RequestElementName:="SendPulverisateurRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendPulverisateur(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal PulverisateurRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef Pulverisateur As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendPulverisateur", New Object() {agentId, PulverisateurRequest})
            Pulverisateur = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendPulverisateur(ByVal agentId As String, ByVal PulverisateurRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendPulverisateur", New Object() {agentId, PulverisateurRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendPulverisateur(ByVal asyncResult As System.IAsyncResult, ByRef Pulverisateur As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Pulverisateur = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendPulverisateurAsync(ByVal agentId As String, ByVal PulverisateurRequest As Object)
            Me.SendPulverisateurAsync(agentId, PulverisateurRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendPulverisateurAsync(ByVal agentId As String, ByVal PulverisateurRequest As Object, ByVal userState As Object)
            If (Me.SendPulverisateurOperationCompleted Is Nothing) Then
                Me.SendPulverisateurOperationCompleted = AddressOf Me.OnSendPulverisateurOperationCompleted
            End If
            Me.InvokeAsync("SendPulverisateur", New Object() {agentId, PulverisateurRequest}, Me.SendPulverisateurOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendPulverisateurOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendPulverisateurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendPulverisateurCompleted(Me, New SendPulverisateurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Structuree)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetStructure", RequestElementName:="GetStructureRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetStructure(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal id As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef [Structure] As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetStructure", New Object() {agentId, id})
            [Structure] = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetStructure(ByVal agentId As String, ByVal id As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetStructure", New Object() {agentId, id}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetStructure(ByVal asyncResult As System.IAsyncResult, ByRef [Structure] As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            [Structure] = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStructureAsync(ByVal agentId As String, ByVal id As Integer)
            Me.GetStructureAsync(agentId, id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStructureAsync(ByVal agentId As String, ByVal id As Integer, ByVal userState As Object)
            If (Me.GetStructureOperationCompleted Is Nothing) Then
                Me.GetStructureOperationCompleted = AddressOf Me.OnGetStructureOperationCompleted
            End If
            Me.InvokeAsync("GetStructure", New Object() {agentId, id}, Me.GetStructureOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStructureOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStructureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStructureCompleted(Me, New GetStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Structuree)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/SendStructure", RequestElementName:="SendStructureRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function SendStructure(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal StructureRequest As Object, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef [Structure] As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("SendStructure", New Object() {agentId, StructureRequest})
            [Structure] = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginSendStructure(ByVal agentId As String, ByVal StructureRequest As Object, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendStructure", New Object() {agentId, StructureRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendStructure(ByVal asyncResult As System.IAsyncResult, ByRef [Structure] As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            [Structure] = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendStructureAsync(ByVal agentId As String, ByVal StructureRequest As Object)
            Me.SendStructureAsync(agentId, StructureRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendStructureAsync(ByVal agentId As String, ByVal StructureRequest As Object, ByVal userState As Object)
            If (Me.SendStructureOperationCompleted Is Nothing) Then
                Me.SendStructureOperationCompleted = AddressOf Me.OnSendStructureOperationCompleted
            End If
            Me.InvokeAsync("SendStructure", New Object() {agentId, StructureRequest}, Me.SendStructureOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendStructureOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendStructureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendStructureCompleted(Me, New SendStructureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ReferentielBuse)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetReferentielBuse", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetReferentielBuse(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ReferentielBuse As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetReferentielBuse", New Object() {agentId})
            ReferentielBuse = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReferentielBuse(ByVal agentId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReferentielBuse", New Object() {agentId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReferentielBuse(ByVal asyncResult As System.IAsyncResult, ByRef ReferentielBuse As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ReferentielBuse = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReferentielBuseAsync(ByVal agentId As String)
            Me.GetReferentielBuseAsync(agentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReferentielBuseAsync(ByVal agentId As String, ByVal userState As Object)
            If (Me.GetReferentielBuseOperationCompleted Is Nothing) Then
                Me.GetReferentielBuseOperationCompleted = AddressOf Me.OnGetReferentielBuseOperationCompleted
            End If
            Me.InvokeAsync("GetReferentielBuse", New Object() {agentId}, Me.GetReferentielBuseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReferentielBuseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReferentielBuseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReferentielBuseCompleted(Me, New GetReferentielBuseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ReferentielManometre)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetReferentielManometre", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetReferentielManometre(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ReferentielManometre As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetReferentielManometre", New Object() {agentId})
            ReferentielManometre = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReferentielManometre(ByVal agentId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReferentielManometre", New Object() {agentId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReferentielManometre(ByVal asyncResult As System.IAsyncResult, ByRef ReferentielManometre As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ReferentielManometre = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReferentielManometreAsync(ByVal agentId As String)
            Me.GetReferentielManometreAsync(agentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReferentielManometreAsync(ByVal agentId As String, ByVal userState As Object)
            If (Me.GetReferentielManometreOperationCompleted Is Nothing) Then
                Me.GetReferentielManometreOperationCompleted = AddressOf Me.OnGetReferentielManometreOperationCompleted
            End If
            Me.InvokeAsync("GetReferentielManometre", New Object() {agentId}, Me.GetReferentielManometreOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReferentielManometreOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReferentielManometreCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReferentielManometreCompleted(Me, New GetReferentielManometreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ReferentielPulverisateur)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetReferentielPulverisateur", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetReferentielPulverisateur(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ReferentielPulverisateur As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetReferentielPulverisateur", New Object() {agentId})
            ReferentielPulverisateur = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReferentielPulverisateur(ByVal agentId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReferentielPulverisateur", New Object() {agentId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReferentielPulverisateur(ByVal asyncResult As System.IAsyncResult, ByRef ReferentielPulverisateur As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ReferentielPulverisateur = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReferentielPulverisateurAsync(ByVal agentId As String)
            Me.GetReferentielPulverisateurAsync(agentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReferentielPulverisateurAsync(ByVal agentId As String, ByVal userState As Object)
            If (Me.GetReferentielPulverisateurOperationCompleted Is Nothing) Then
                Me.GetReferentielPulverisateurOperationCompleted = AddressOf Me.OnGetReferentielPulverisateurOperationCompleted
            End If
            Me.InvokeAsync("GetReferentielPulverisateur", New Object() {agentId}, Me.GetReferentielPulverisateurOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReferentielPulverisateurOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReferentielPulverisateurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReferentielPulverisateurCompleted(Me, New GetReferentielPulverisateurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(ReferentielTerritoire)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetReferentielTerritoire", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetReferentielTerritoire(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef ReferentielTerritoire As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetReferentielTerritoire", New Object() {agentId})
            ReferentielTerritoire = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReferentielTerritoire(ByVal agentId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReferentielTerritoire", New Object() {agentId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReferentielTerritoire(ByVal asyncResult As System.IAsyncResult, ByRef ReferentielTerritoire As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ReferentielTerritoire = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReferentielTerritoireAsync(ByVal agentId As String)
            Me.GetReferentielTerritoireAsync(agentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReferentielTerritoireAsync(ByVal agentId As String, ByVal userState As Object)
            If (Me.GetReferentielTerritoireOperationCompleted Is Nothing) Then
                Me.GetReferentielTerritoireOperationCompleted = AddressOf Me.OnGetReferentielTerritoireOperationCompleted
            End If
            Me.InvokeAsync("GetReferentielTerritoire", New Object() {agentId}, Me.GetReferentielTerritoireOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReferentielTerritoireOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReferentielTerritoireCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReferentielTerritoireCompleted(Me, New GetReferentielTerritoireCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Agent)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetVersionLogicielAgent", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function GetVersionLogicielAgent(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef VersionLogicielAgent As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetVersionLogicielAgent", New Object(-1) {})
            VersionLogicielAgent = CType(results(1), Object)
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetVersionLogicielAgent(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetVersionLogicielAgent", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetVersionLogicielAgent(ByVal asyncResult As System.IAsyncResult, ByRef VersionLogicielAgent As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            VersionLogicielAgent = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVersionLogicielAgentAsync()
            Me.GetVersionLogicielAgentAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVersionLogicielAgentAsync(ByVal userState As Object)
            If (Me.GetVersionLogicielAgentOperationCompleted Is Nothing) Then
                Me.GetVersionLogicielAgentOperationCompleted = AddressOf Me.OnGetVersionLogicielAgentOperationCompleted
            End If
            Me.InvokeAsync("GetVersionLogicielAgent", New Object(-1) {}, Me.GetVersionLogicielAgentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVersionLogicielAgentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVersionLogicielAgentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVersionLogicielAgentCompleted(Me, New GetVersionLogicielAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetSoftwareUpdate", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSoftwareUpdate(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal version As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef infos As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetSoftwareUpdate", New Object() {version})
            infos = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSoftwareUpdate(ByVal version As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSoftwareUpdate", New Object() {version}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSoftwareUpdate(ByVal asyncResult As System.IAsyncResult, ByRef infos As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            infos = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSoftwareUpdateAsync(ByVal version As String)
            Me.GetSoftwareUpdateAsync(version, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSoftwareUpdateAsync(ByVal version As String, ByVal userState As Object)
            If (Me.GetSoftwareUpdateOperationCompleted Is Nothing) Then
                Me.GetSoftwareUpdateOperationCompleted = AddressOf Me.OnGetSoftwareUpdateOperationCompleted
            End If
            Me.InvokeAsync("GetSoftwareUpdate", New Object() {version}, Me.GetSoftwareUpdateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSoftwareUpdateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSoftwareUpdateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSoftwareUpdateCompleted(Me, New GetSoftwareUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetSynchroDateTime", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSynchroDateTime(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef SynchroDateTime As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("GetSynchroDateTime", New Object(-1) {})
            SynchroDateTime = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSynchroDateTime(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSynchroDateTime", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSynchroDateTime(ByVal asyncResult As System.IAsyncResult, ByRef SynchroDateTime As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            SynchroDateTime = CType(results(1),Object)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSynchroDateTimeAsync()
            Me.GetSynchroDateTimeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSynchroDateTimeAsync(ByVal userState As Object)
            If (Me.GetSynchroDateTimeOperationCompleted Is Nothing) Then
                Me.GetSynchroDateTimeOperationCompleted = AddressOf Me.OnGetSynchroDateTimeOperationCompleted
            End If
            Me.InvokeAsync("GetSynchroDateTime", New Object(-1) {}, Me.GetSynchroDateTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSynchroDateTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSynchroDateTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSynchroDateTimeCompleted(Me, New GetSynchroDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/GetIncrementDiagnostic", RequestElementName:="GetIncrementDiagnosticRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIncrementDiagnostic(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agentId As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef result As Integer) As <System.Xml.Serialization.XmlElementAttribute("increment", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Object
            Dim results() As Object = Me.Invoke("GetIncrementDiagnostic", New Object() {agentId})
            result = CType(results(1),Integer)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginGetIncrementDiagnostic(ByVal agentId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetIncrementDiagnostic", New Object() {agentId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetIncrementDiagnostic(ByVal asyncResult As System.IAsyncResult, ByRef result As Integer) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            result = CType(results(1),Integer)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIncrementDiagnosticAsync(ByVal agentId As String)
            Me.GetIncrementDiagnosticAsync(agentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIncrementDiagnosticAsync(ByVal agentId As String, ByVal userState As Object)
            If (Me.GetIncrementDiagnosticOperationCompleted Is Nothing) Then
                Me.GetIncrementDiagnosticOperationCompleted = AddressOf Me.OnGetIncrementDiagnosticOperationCompleted
            End If
            Me.InvokeAsync("GetIncrementDiagnostic", New Object() {agentId}, Me.GetIncrementDiagnosticOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIncrementDiagnosticOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIncrementDiagnosticCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIncrementDiagnosticCompleted(Me, New GetIncrementDiagnosticCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <XmlInclude(GetType(Agent)), System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.example.org/crodip/UpdatesAvailable", RequestElementName:="UpdatesAvailableRequest", RequestNamespace:="http://www.example.org/crodip/", ResponseNamespace:="http://www.example.org/crodip/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)> _
        Public Function UpdatesAvailable(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal agent As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal lastUpdateDateTime As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef isUpdateAvailable As Integer, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef isComplete As Integer, <System.Xml.Serialization.XmlElementAttribute("updatesList", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByRef updatesList() As Object) As <System.Xml.Serialization.XmlElementAttribute("result", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Integer
            Dim results() As Object = Me.Invoke("UpdatesAvailable", New Object() {agent, lastUpdateDateTime})
            isUpdateAvailable = CType(results(1), Integer)
            isComplete = CType(results(2), Integer)
            updatesList = CType(results(3), Object())
            Return CType(results(0), Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginUpdatesAvailable(ByVal agent As String, ByVal lastUpdateDateTime As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UpdatesAvailable", New Object() {agent, lastUpdateDateTime}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUpdatesAvailable(ByVal asyncResult As System.IAsyncResult, ByRef isUpdateAvailable As Integer, ByRef isComplete As Integer, ByRef updatesList() As Object) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            isUpdateAvailable = CType(results(1),Integer)
            isComplete = CType(results(2),Integer)
            updatesList = CType(results(3),Object())
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatesAvailableAsync(ByVal agent As String, ByVal lastUpdateDateTime As String)
            Me.UpdatesAvailableAsync(agent, lastUpdateDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatesAvailableAsync(ByVal agent As String, ByVal lastUpdateDateTime As String, ByVal userState As Object)
            If (Me.UpdatesAvailableOperationCompleted Is Nothing) Then
                Me.UpdatesAvailableOperationCompleted = AddressOf Me.OnUpdatesAvailableOperationCompleted
            End If
            Me.InvokeAsync("UpdatesAvailable", New Object() {agent, lastUpdateDateTime}, Me.UpdatesAvailableOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatesAvailableOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatesAvailableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatesAvailableCompleted(Me, New UpdatesAvailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendLogsCompletedEventHandler(ByVal sender As Object, ByVal e As SendLogsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendLogsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendLogs2CompletedEventHandler(ByVal sender As Object, ByVal e As SendLogs2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendLogs2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAgentCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Agent() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendAgentCompletedEventHandler(ByVal sender As Object, ByVal e As SendAgentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendAgentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Agent() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendAgent2CompletedEventHandler(ByVal sender As Object, ByVal e As SendAgent2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendAgent2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Agent() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SetDateSynchroAgentCompletedEventHandler(ByVal sender As Object, ByVal e As SetDateSynchroAgentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetDateSynchroAgentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPrestationCategorieCompletedEventHandler(ByVal sender As Object, ByVal e As GetPrestationCategorieCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPrestationCategorieCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PrestationCategorie() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendPrestationCategorieCompletedEventHandler(ByVal sender As Object, ByVal e As SendPrestationCategorieCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendPrestationCategorieCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PrestationCategorie() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendPrestationCategorie2CompletedEventHandler(ByVal sender As Object, ByVal e As SendPrestationCategorie2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendPrestationCategorie2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PrestationCategorie() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPrestationTarifCompletedEventHandler(ByVal sender As Object, ByVal e As GetPrestationTarifCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPrestationTarifCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PrestationTarif() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendPrestationTarifCompletedEventHandler(ByVal sender As Object, ByVal e As SendPrestationTarifCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendPrestationTarifCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PrestationTarif() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendPrestationTarif2CompletedEventHandler(ByVal sender As Object, ByVal e As SendPrestationTarif2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendPrestationTarif2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PrestationTarif() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetBuseCompletedEventHandler(ByVal sender As Object, ByVal e As GetBuseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBuseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Buse() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendBuseCompletedEventHandler(ByVal sender As Object, ByVal e As SendBuseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendBuseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Buse() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendBuse2CompletedEventHandler(ByVal sender As Object, ByVal e As SendBuse2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendBuse2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Buse() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetManometreControleCompletedEventHandler(ByVal sender As Object, ByVal e As GetManometreControleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetManometreControleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ManometreControle() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendManometreControleCompletedEventHandler(ByVal sender As Object, ByVal e As SendManometreControleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendManometreControleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ManometreControle() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendManometreControle2CompletedEventHandler(ByVal sender As Object, ByVal e As SendManometreControle2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendManometreControle2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ManometreControle() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetManometreEtalonCompletedEventHandler(ByVal sender As Object, ByVal e As GetManometreEtalonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetManometreEtalonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ManometreEtalon() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendManometreEtalonCompletedEventHandler(ByVal sender As Object, ByVal e As SendManometreEtalonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendManometreEtalonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ManometreEtalon() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendManometreEtalon2CompletedEventHandler(ByVal sender As Object, ByVal e As SendManometreEtalon2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendManometreEtalon2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ManometreEtalon() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetBancCompletedEventHandler(ByVal sender As Object, ByVal e As GetBancCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBancCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Banc() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendBancCompletedEventHandler(ByVal sender As Object, ByVal e As SendBancCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendBancCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Banc() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendBanc2CompletedEventHandler(ByVal sender As Object, ByVal e As SendBanc2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendBanc2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Banc() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDiagnosticCompletedEventHandler(ByVal sender As Object, ByVal e As GetDiagnosticCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDiagnosticCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Diagnostic() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendDiagnosticCompletedEventHandler(ByVal sender As Object, ByVal e As SendDiagnosticCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendDiagnosticCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Diagnostic() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendDiagnostic2CompletedEventHandler(ByVal sender As Object, ByVal e As SendDiagnostic2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendDiagnostic2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Diagnostic() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDiagnosticItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDiagnosticItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDiagnosticItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticItemsList() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendDiagnosticItemsCompletedEventHandler(ByVal sender As Object, ByVal e As SendDiagnosticItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendDiagnosticItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticItemsList() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDiagnosticBusesCompletedEventHandler(ByVal sender As Object, ByVal e As GetDiagnosticBusesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDiagnosticBusesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticBusesList() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendDiagnosticBusesCompletedEventHandler(ByVal sender As Object, ByVal e As SendDiagnosticBusesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendDiagnosticBusesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticBusesList() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDiagnosticBusesDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetDiagnosticBusesDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDiagnosticBusesDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticBusesDetailList() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendDiagnosticBusesDetailCompletedEventHandler(ByVal sender As Object, ByVal e As SendDiagnosticBusesDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendDiagnosticBusesDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticBusesDetailList() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDiagnosticMano542CompletedEventHandler(ByVal sender As Object, ByVal e As GetDiagnosticMano542CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDiagnosticMano542CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticMano542List() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendDiagnosticMano542CompletedEventHandler(ByVal sender As Object, ByVal e As SendDiagnosticMano542CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendDiagnosticMano542CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticMano542List() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetDiagnosticTroncons833CompletedEventHandler(ByVal sender As Object, ByVal e As GetDiagnosticTroncons833CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDiagnosticTroncons833CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticTroncons833List() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendDiagnosticTroncons833CompletedEventHandler(ByVal sender As Object, ByVal e As SendDiagnosticTroncons833CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendDiagnosticTroncons833CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DiagnosticTroncons833List() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetExploitationCompletedEventHandler(ByVal sender As Object, ByVal e As GetExploitationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExploitationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Exploitation() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendExploitationCompletedEventHandler(ByVal sender As Object, ByVal e As SendExploitationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendExploitationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Exploitation() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendExploitation2CompletedEventHandler(ByVal sender As Object, ByVal e As SendExploitation2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendExploitation2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Exploitation() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetExploitationTOPulverisateurCompletedEventHandler(ByVal sender As Object, ByVal e As GetExploitationTOPulverisateurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExploitationTOPulverisateurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ExploitationTOPulverisateur() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendExploitationTOPulverisateurCompletedEventHandler(ByVal sender As Object, ByVal e As SendExploitationTOPulverisateurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendExploitationTOPulverisateurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ExploitationTOPulverisateur() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendExploitationTOPulverisateur2CompletedEventHandler(ByVal sender As Object, ByVal e As SendExploitationTOPulverisateur2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendExploitationTOPulverisateur2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ExploitationTOPulverisateur() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetControleBancMesureCompletedEventHandler(ByVal sender As Object, ByVal e As GetControleBancMesureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetControleBancMesureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ControleBancMesure() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendControleBancMesureCompletedEventHandler(ByVal sender As Object, ByVal e As SendControleBancMesureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendControleBancMesureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ControleBancMesure() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendControleBancMesure2CompletedEventHandler(ByVal sender As Object, ByVal e As SendControleBancMesure2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendControleBancMesure2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ControleBancMesure() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetControleManoMesureCompletedEventHandler(ByVal sender As Object, ByVal e As GetControleManoMesureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetControleManoMesureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ControleManoMesure() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendControleManoMesureCompletedEventHandler(ByVal sender As Object, ByVal e As SendControleManoMesureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendControleManoMesureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ControleManoMesure() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetFVBancCompletedEventHandler(ByVal sender As Object, ByVal e As GetFVBancCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFVBancCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FVBanc() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendFVBancCompletedEventHandler(ByVal sender As Object, ByVal e As SendFVBancCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFVBancCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FVBanc() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendFVBanc2CompletedEventHandler(ByVal sender As Object, ByVal e As SendFVBanc2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFVBanc2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FVBanc() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetFVManometreControleCompletedEventHandler(ByVal sender As Object, ByVal e As GetFVManometreControleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFVManometreControleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FVManometreControle() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendFVManometreControleCompletedEventHandler(ByVal sender As Object, ByVal e As SendFVManometreControleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFVManometreControleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FVManometreControle() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendFVManometreControle2CompletedEventHandler(ByVal sender As Object, ByVal e As SendFVManometreControle2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFVManometreControle2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FVManometreControle() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetFVManometreEtalonCompletedEventHandler(ByVal sender As Object, ByVal e As GetFVManometreEtalonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFVManometreEtalonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FVManometreEtalon() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendFVManometreEtalonCompletedEventHandler(ByVal sender As Object, ByVal e As SendFVManometreEtalonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFVManometreEtalonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FVManometreEtalon() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendFVManometreEtalon2CompletedEventHandler(ByVal sender As Object, ByVal e As SendFVManometreEtalon2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFVManometreEtalon2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FVManometreEtalon() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetPulverisateurCompletedEventHandler(ByVal sender As Object, ByVal e As GetPulverisateurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPulverisateurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Pulverisateur() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendPulverisateurCompletedEventHandler(ByVal sender As Object, ByVal e As SendPulverisateurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendPulverisateurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Pulverisateur() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetStructureCompletedEventHandler(ByVal sender As Object, ByVal e As GetStructureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStructureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property [Structure]() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SendStructureCompletedEventHandler(ByVal sender As Object, ByVal e As SendStructureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendStructureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property [Structure]() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReferentielBuseCompletedEventHandler(ByVal sender As Object, ByVal e As GetReferentielBuseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReferentielBuseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ReferentielBuse() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReferentielManometreCompletedEventHandler(ByVal sender As Object, ByVal e As GetReferentielManometreCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReferentielManometreCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ReferentielManometre() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReferentielPulverisateurCompletedEventHandler(ByVal sender As Object, ByVal e As GetReferentielPulverisateurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReferentielPulverisateurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ReferentielPulverisateur() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetReferentielTerritoireCompletedEventHandler(ByVal sender As Object, ByVal e As GetReferentielTerritoireCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReferentielTerritoireCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ReferentielTerritoire() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetVersionLogicielAgentCompletedEventHandler(ByVal sender As Object, ByVal e As GetVersionLogicielAgentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVersionLogicielAgentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property VersionLogicielAgent() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSoftwareUpdateCompletedEventHandler(ByVal sender As Object, ByVal e As GetSoftwareUpdateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSoftwareUpdateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property infos() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSynchroDateTimeCompletedEventHandler(ByVal sender As Object, ByVal e As GetSynchroDateTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSynchroDateTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SynchroDateTime() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetIncrementDiagnosticCompletedEventHandler(ByVal sender As Object, ByVal e As GetIncrementDiagnosticCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIncrementDiagnosticCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public Overloads ReadOnly Property Resulto() As Object
            Get
                Me.RaiseExceptionIfNecessary()
                Return CType(Me.results(0), Object)
            End Get
        End Property
        
        '''<remarks/>
        Public Overloads ReadOnly Property result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdatesAvailableCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatesAvailableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatesAvailableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property isUpdateAvailable() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property isComplete() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property updatesList() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Object())
            End Get
        End Property
    End Class
End Namespace
